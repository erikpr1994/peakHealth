{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/context/ExerciseContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\n\nimport { FilterState } from '../types';\n\ninterface ExerciseContextType {\n  searchTerm: string;\n  handleSearchChange: (value: string) => void;\n  clearSearch: () => void;\n  filters: FilterState;\n  handleFilterChange: (type: keyof FilterState, value: string) => void;\n  clearFilters: () => void;\n  getActiveFilterCount: () => number;\n}\n\nconst ExerciseContext = createContext<ExerciseContextType | undefined>(\n  undefined\n);\n\ninterface ExerciseProviderProps {\n  children: ReactNode;\n}\n\nexport const ExerciseProvider = ({ children }: ExerciseProviderProps) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filters, setFilters] = useState<FilterState>({\n    difficulties: [],\n    muscleGroups: [],\n    equipment: [],\n  });\n\n  const handleSearchChange = (value: string) => {\n    setSearchTerm(value);\n  };\n\n  const clearSearch = () => {\n    setSearchTerm('');\n  };\n\n  const handleFilterChange = (type: keyof FilterState, value: string) => {\n    setFilters(prev => {\n      const currentArray = prev[type] as any[];\n      const isIncluded = currentArray.includes(value);\n\n      return {\n        ...prev,\n        [type]: isIncluded\n          ? currentArray.filter(item => item !== value)\n          : [...currentArray, value],\n      };\n    });\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      difficulties: [],\n      muscleGroups: [],\n      equipment: [],\n    });\n  };\n\n  const getActiveFilterCount = () => {\n    return (\n      filters.difficulties.length +\n      filters.muscleGroups.length +\n      filters.equipment.length\n    );\n  };\n\n  const value: ExerciseContextType = {\n    searchTerm,\n    handleSearchChange,\n    clearSearch,\n    filters,\n    handleFilterChange,\n    clearFilters,\n    getActiveFilterCount,\n  };\n\n  return (\n    <ExerciseContext.Provider value={value}>\n      {children}\n    </ExerciseContext.Provider>\n  );\n};\n\nexport function useExerciseContext() {\n  const context = useContext(ExerciseContext);\n  if (context === undefined) {\n    throw new Error(\n      'useExerciseContext must be used within an ExerciseProvider'\n    );\n  }\n  return context;\n}\n"],"names":[],"mappings":";;;;;AAAA;;;;AAcA,MAAM,gCAAkB,CAAA,GAAA,qWAAA,CAAA,gBAAa,AAAD,EAClC;AAOK,MAAM,mBAAmB;QAAC,EAAE,QAAQ,EAAyB;;IAClE,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qWAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qWAAA,CAAA,WAAQ,AAAD,EAAe;QAClD,cAAc,EAAE;QAChB,cAAc,EAAE;QAChB,WAAW,EAAE;IACf;IAEA,MAAM,qBAAqB,CAAC;QAC1B,cAAc;IAChB;IAEA,MAAM,cAAc;QAClB,cAAc;IAChB;IAEA,MAAM,qBAAqB,CAAC,MAAyB;QACnD,WAAW,CAAA;YACT,MAAM,eAAe,IAAI,CAAC,KAAK;YAC/B,MAAM,aAAa,aAAa,QAAQ,CAAC;YAEzC,OAAO;gBACL,GAAG,IAAI;gBACP,CAAC,KAAK,EAAE,aACJ,aAAa,MAAM,CAAC,CAAA,OAAQ,SAAS,SACrC;uBAAI;oBAAc;iBAAM;YAC9B;QACF;IACF;IAEA,MAAM,eAAe;QACnB,WAAW;YACT,cAAc,EAAE;YAChB,cAAc,EAAE;YAChB,WAAW,EAAE;QACf;IACF;IAEA,MAAM,uBAAuB;QAC3B,OACE,QAAQ,YAAY,CAAC,MAAM,GAC3B,QAAQ,YAAY,CAAC,MAAM,GAC3B,QAAQ,SAAS,CAAC,MAAM;IAE5B;IAEA,MAAM,QAA6B;QACjC;QACA;QACA;QACA;QACA;QACA;QACA;IACF;IAEA,qBACE,qYAAC,gBAAgB,QAAQ;QAAC,OAAO;kBAC9B;;;;;;AAGP;GA7Da;KAAA;AA+DN,SAAS;;IACd,MAAM,UAAU,CAAA,GAAA,qWAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MACR;IAEJ;IACA,OAAO;AACT;IARgB","debugId":null}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/hooks/useExerciseFilters.ts"],"sourcesContent":["import { useExerciseContext } from '../context/ExerciseContext';\n\nexport function useExerciseFilters() {\n  const { filters, handleFilterChange, clearFilters, getActiveFilterCount } =\n    useExerciseContext();\n\n  return {\n    filters,\n    handleFilterChange,\n    clearFilters,\n    getActiveFilterCount,\n  };\n}\n"],"names":[],"mappings":";;;AAAA;;;AAEO,SAAS;;IACd,MAAM,EAAE,OAAO,EAAE,kBAAkB,EAAE,YAAY,EAAE,oBAAoB,EAAE,GACvE,CAAA,GAAA,8JAAA,CAAA,qBAAkB,AAAD;IAEnB,OAAO;QACL;QACA;QACA;QACA;IACF;AACF;GAVgB;;QAEZ,8JAAA,CAAA,qBAAkB","debugId":null}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/hooks/useExercises.ts"],"sourcesContent":["import useSWR from 'swr';\n\nimport type { Exercise } from '../types';\nimport type {\n  Category,\n  Difficulty,\n  Equipment,\n  MuscleGroup,\n} from '../types/constants';\n\n// Fetcher function for SWR\nconst fetcher = async (url: string) => {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Failed to fetch data');\n  }\n  return response.json();\n};\n\n// Hook to get all exercises\nexport function useExercises() {\n  const { data, error, isLoading, mutate } = useSWR<{ exercises: Exercise[] }>(\n    '/api/exercises',\n    fetcher\n  );\n\n  return {\n    exercises: data?.exercises || [],\n    isLoading,\n    error,\n    mutate,\n  };\n}\n\n// Hook to get a single exercise by ID\nexport function useExercise(exerciseId: string) {\n  const { data, error, isLoading, mutate } = useSWR<{ exercise: Exercise }>(\n    exerciseId ? `/api/exercises/${exerciseId}` : null,\n    fetcher\n  );\n\n  return {\n    exercise: data?.exercise,\n    isLoading,\n    error,\n    mutate,\n  };\n}\n\n// Hook to search exercises with filters\nexport function useExerciseSearch(params: {\n  searchTerm?: string;\n  category?: Category;\n  difficulties?: Difficulty[];\n  equipment?: Equipment[];\n  muscleGroups?: MuscleGroup[];\n}) {\n  const searchParams = new URLSearchParams();\n\n  if (params.searchTerm) searchParams.append('searchTerm', params.searchTerm);\n  if (params.category) searchParams.append('category', params.category);\n\n  // Handle multiple values for each filter type\n  if (params.difficulties) {\n    params.difficulties.forEach(difficulty => {\n      searchParams.append('difficulty', difficulty);\n    });\n  }\n  if (params.equipment) {\n    params.equipment.forEach(eq => {\n      searchParams.append('equipment', eq);\n    });\n  }\n  if (params.muscleGroups) {\n    params.muscleGroups.forEach(mg => {\n      searchParams.append('muscleGroup', mg);\n    });\n  }\n\n  const { data, error, isLoading, mutate } = useSWR<{ exercises: Exercise[] }>(\n    searchParams.toString()\n      ? `/api/exercises/search?${searchParams.toString()}`\n      : null,\n    fetcher\n  );\n\n  return {\n    exercises: data?.exercises || [],\n    isLoading,\n    error,\n    mutate,\n  };\n}\n\n// Hook to get user's favorite exercises\nexport function useUserFavorites(userId?: string) {\n  const { data, error, isLoading, mutate } = useSWR<{ exercises: Exercise[] }>(\n    userId ? `/api/exercises/favorites?userId=${userId}` : null,\n    fetcher\n  );\n\n  return {\n    favorites: data?.exercises || [],\n    isLoading,\n    error,\n    mutate,\n  };\n}\n\n// Hook to manage favorites (add/remove)\nexport function useFavoriteManagement() {\n  const addToFavorites = async (userId: string, exerciseId: string) => {\n    const response = await fetch('/api/exercises/favorites', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ userId, exerciseId }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to add to favorites');\n    }\n\n    return response.json();\n  };\n\n  const removeFromFavorites = async (userId: string, exerciseId: string) => {\n    const response = await fetch(\n      `/api/exercises/favorites?userId=${userId}&exerciseId=${exerciseId}`,\n      {\n        method: 'DELETE',\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error('Failed to remove from favorites');\n    }\n\n    return response.json();\n  };\n\n  return {\n    addToFavorites,\n    removeFromFavorites,\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 262, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/utils/filterUtils.ts"],"sourcesContent":["import { Exercise, FilterState } from '../types';\n\nexport const filterExercises = (\n  exercises: Exercise[],\n  searchTerm: string,\n  selectedCategory: string,\n  filters: FilterState\n): Exercise[] => {\n  return exercises.filter(exercise => {\n    // Get the main variant for filtering\n    const mainVariant = exercise.variants.find(\n      v => v.id === exercise.mainVariantId\n    );\n    if (!mainVariant) return false;\n\n    // Search filter\n    const matchesSearch =\n      exercise.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      mainVariant.muscleGroups.some(muscle =>\n        muscle.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n\n    // Category filter\n    const matchesCategory =\n      selectedCategory === 'All' || exercise.category === selectedCategory;\n\n    // Advanced filters\n    const matchesDifficulty =\n      filters.difficulties.length === 0 ||\n      filters.difficulties.includes(mainVariant.difficulty);\n\n    const matchesMuscleGroup =\n      filters.muscleGroups.length === 0 ||\n      filters.muscleGroups.some(group =>\n        mainVariant.muscleGroups.includes(group)\n      );\n\n    const matchesEquipment =\n      filters.equipment.length === 0 ||\n      (mainVariant.equipment &&\n        filters.equipment.some(eq => mainVariant.equipment?.includes(eq)));\n\n    return (\n      matchesSearch &&\n      matchesCategory &&\n      matchesDifficulty &&\n      matchesMuscleGroup &&\n      matchesEquipment\n    );\n  });\n};\n\nexport const getActiveFilterCount = (filters: FilterState): number => {\n  return (\n    filters.difficulties.length +\n    filters.muscleGroups.length +\n    filters.equipment.length\n  );\n};\n"],"names":[],"mappings":";;;;AAEO,MAAM,kBAAkB,CAC7B,WACA,YACA,kBACA;IAEA,OAAO,UAAU,MAAM,CAAC,CAAA;QACtB,qCAAqC;QACrC,MAAM,cAAc,SAAS,QAAQ,CAAC,IAAI,CACxC,CAAA,IAAK,EAAE,EAAE,KAAK,SAAS,aAAa;QAEtC,IAAI,CAAC,aAAa,OAAO;QAEzB,gBAAgB;QAChB,MAAM,gBACJ,SAAS,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,WAAW,OAC3D,YAAY,YAAY,CAAC,IAAI,CAAC,CAAA,SAC5B,OAAO,WAAW,GAAG,QAAQ,CAAC,WAAW,WAAW;QAGxD,kBAAkB;QAClB,MAAM,kBACJ,qBAAqB,SAAS,SAAS,QAAQ,KAAK;QAEtD,mBAAmB;QACnB,MAAM,oBACJ,QAAQ,YAAY,CAAC,MAAM,KAAK,KAChC,QAAQ,YAAY,CAAC,QAAQ,CAAC,YAAY,UAAU;QAEtD,MAAM,qBACJ,QAAQ,YAAY,CAAC,MAAM,KAAK,KAChC,QAAQ,YAAY,CAAC,IAAI,CAAC,CAAA,QACxB,YAAY,YAAY,CAAC,QAAQ,CAAC;QAGtC,MAAM,mBACJ,QAAQ,SAAS,CAAC,MAAM,KAAK,KAC5B,YAAY,SAAS,IACpB,QAAQ,SAAS,CAAC,IAAI,CAAC,CAAA;gBAAM;oBAAA,yBAAA,YAAY,SAAS,cAArB,6CAAA,uBAAuB,QAAQ,CAAC;;QAEjE,OACE,iBACA,mBACA,qBACA,sBACA;IAEJ;AACF;AAEO,MAAM,uBAAuB,CAAC;IACnC,OACE,QAAQ,YAAY,CAAC,MAAM,GAC3B,QAAQ,YAAY,CAAC,MAAM,GAC3B,QAAQ,SAAS,CAAC,MAAM;AAE5B","debugId":null}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/types/constants.ts"],"sourcesContent":["/**\n * Exercise constants and enums\n */\n\n// Exercise categories\nexport const CATEGORY = {\n  STRENGTH: 'Strength',\n  CARDIO: 'Cardio',\n  FLEXIBILITY: 'Flexibility',\n  BALANCE: 'Balance',\n} as const;\n\nexport type Category = (typeof CATEGORY)[keyof typeof CATEGORY];\n\n// Difficulty levels\nexport const DIFFICULTY = {\n  BEGINNER: 'Beginner',\n  INTERMEDIATE: 'Intermediate',\n  ADVANCED: 'Advanced',\n  UNKNOWN: 'Unknown',\n} as const;\n\nexport type Difficulty = (typeof DIFFICULTY)[keyof typeof DIFFICULTY];\n\n// Equipment types\nexport const EQUIPMENT = {\n  BARBELL: 'Barbell',\n  DUMBBELL: 'Dumbbell',\n  BODYWEIGHT: 'Bodyweight',\n  MACHINE: 'Machine',\n  RESISTANCE_BAND: 'Resistance Band',\n  KETTLEBELL: 'Kettlebell',\n  CABLE: 'Cable',\n  BENCH: 'Bench',\n  INCLINE_BENCH: 'Incline Bench',\n  DECLINE_BENCH: 'Decline Bench',\n  PULLUP_BAR: 'Pull-up Bar',\n  SQUAT_RACK: 'Squat Rack',\n  STEP: 'Step',\n} as const;\n\nexport type Equipment = (typeof EQUIPMENT)[keyof typeof EQUIPMENT];\n\n// Muscle groups\nexport const MUSCLE_GROUP = {\n  CHEST: 'Chest',\n  BACK: 'Back',\n  LEGS: 'Legs',\n  ARMS: 'Arms',\n  SHOULDERS: 'Shoulders',\n  CORE: 'Core',\n  GLUTES: 'Glutes',\n  BICEPS: 'Biceps',\n  TRICEPS: 'Triceps',\n  CARDIO: 'Cardio',\n  FULL_BODY: 'Full Body',\n  UPPER_CHEST: 'Upper Chest',\n  LOWER_CHEST: 'Lower Chest',\n  FRONT_DELTS: 'Front Delts',\n  OBLIQUES: 'Obliques',\n  QUADRICEPS: 'Quadriceps',\n  HAMSTRINGS: 'Hamstrings',\n} as const;\n\nexport type MuscleGroup = (typeof MUSCLE_GROUP)[keyof typeof MUSCLE_GROUP];\n"],"names":[],"mappings":"AAAA;;CAEC,GAED,sBAAsB;;;;;;;AACf,MAAM,WAAW;IACtB,UAAU;IACV,QAAQ;IACR,aAAa;IACb,SAAS;AACX;AAKO,MAAM,aAAa;IACxB,UAAU;IACV,cAAc;IACd,UAAU;IACV,SAAS;AACX;AAKO,MAAM,YAAY;IACvB,SAAS;IACT,UAAU;IACV,YAAY;IACZ,SAAS;IACT,iBAAiB;IACjB,YAAY;IACZ,OAAO;IACP,OAAO;IACP,eAAe;IACf,eAAe;IACf,YAAY;IACZ,YAAY;IACZ,MAAM;AACR;AAKO,MAAM,eAAe;IAC1B,OAAO;IACP,MAAM;IACN,MAAM;IACN,MAAM;IACN,WAAW;IACX,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,SAAS;IACT,QAAQ;IACR,WAAW;IACX,aAAa;IACb,aAAa;IACb,aAAa;IACb,UAAU;IACV,YAAY;IACZ,YAAY;AACd","debugId":null}},
    {"offset": {"line": 361, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/types/ids.ts"],"sourcesContent":["/**\n * Branded ID types for type safety\n */\n\n// Exercise-related IDs\nexport type ExerciseId = string & { readonly __brand: 'ExerciseId' };\nexport type ExerciseVariantId = string & {\n  readonly __brand: 'ExerciseVariantId';\n};\nexport type RoutineId = string & { readonly __brand: 'RoutineId' };\n\n// Utility functions to create branded IDs\nexport const createExerciseId = (id: string): ExerciseId => id as ExerciseId;\nexport const createExerciseVariantId = (id: string): ExerciseVariantId =>\n  id as ExerciseVariantId;\nexport const createRoutineId = (id: string): RoutineId => id as RoutineId;\n\n// Type guards\nexport const isExerciseId = (id: string): id is ExerciseId => {\n  return typeof id === 'string' && id.length > 0;\n};\n\nexport const isExerciseVariantId = (id: string): id is ExerciseVariantId => {\n  return typeof id === 'string' && id.length > 0;\n};\n\nexport const isRoutineId = (id: string): id is RoutineId => {\n  return typeof id === 'string' && id.length > 0;\n};\n"],"names":[],"mappings":"AAAA;;CAEC,GAED,uBAAuB;;;;;;;;;AAQhB,MAAM,mBAAmB,CAAC,KAA2B;AACrD,MAAM,0BAA0B,CAAC,KACtC;AACK,MAAM,kBAAkB,CAAC,KAA0B;AAGnD,MAAM,eAAe,CAAC;IAC3B,OAAO,OAAO,OAAO,YAAY,GAAG,MAAM,GAAG;AAC/C;AAEO,MAAM,sBAAsB,CAAC;IAClC,OAAO,OAAO,OAAO,YAAY,GAAG,MAAM,GAAG;AAC/C;AAEO,MAAM,cAAc,CAAC;IAC1B,OAAO,OAAO,OAAO,YAAY,GAAG,MAAM,GAAG;AAC/C","debugId":null}},
    {"offset": {"line": 393, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/types/exercise.ts"],"sourcesContent":["/**\n * Main exercise interfaces\n */\n\nimport type { Category, Difficulty, Equipment, MuscleGroup } from './constants';\nimport type { ExerciseId, ExerciseVariantId } from './ids';\n\n// Instruction step interface\nexport interface InstructionStep {\n  title: string;\n  description: string;\n}\n\n// Exercise tips interface\nexport interface ExerciseTips {\n  proTips: string[];\n  commonMistakes: string[];\n  safetyNotes?: string[];\n}\n\n// Media interface for exercise variants\nexport interface ExerciseMedia {\n  images?: string[];\n  videos?: string[];\n  featuredImage?: string;\n  featuredVideo?: string;\n}\n\n// Exercise variant interface - contains all detailed data\nexport interface ExerciseVariant {\n  // Core Identity\n  id: ExerciseVariantId;\n  name: string;\n  alternativeNames?: string[];\n  description: string;\n  focus: string;\n\n  // Exercise Characteristics\n  difficulty: Difficulty;\n  equipment: Equipment[];\n  muscleGroups: MuscleGroup[];\n  secondaryMuscles?: MuscleGroup[];\n  isUnilateral?: boolean;\n\n  // Instructions & Guidance\n  instructions: string[];\n  steps: InstructionStep[];\n  tips?: ExerciseTips;\n\n  // Media Assets\n  media?: ExerciseMedia;\n\n  // Additional Data\n  prerequisites?: ExerciseVariantId[];\n\n  // Database fields\n  created_at?: Date;\n  updated_at?: Date;\n}\n\n// Main Exercise interface - wrapper for variants\nexport interface Exercise {\n  // Core Identity\n  id: ExerciseId;\n  name: string;\n  alternativeNames?: string[];\n  category: Category;\n  description: string;\n\n  // Variants Management\n  variants: ExerciseVariant[];\n  mainVariantId: ExerciseVariantId; // ID of the main/default variant\n\n  // Display Properties\n  icon: string;\n  iconColor: string;\n\n  // Status flags\n  isFavorite: boolean;\n  isPopular?: boolean;\n  isNew?: boolean;\n\n  // Ratings\n  rating?: number;\n\n  // Summary Information (aggregated from variants)\n  summary?: {\n    difficultyRange: {\n      min: Difficulty;\n      max: Difficulty;\n    };\n    equipmentOptions: Equipment[];\n    primaryMuscleGroups: MuscleGroup[];\n  };\n\n  // Search & Categorization\n  tags?: string[];\n\n  // Exercise Relationships\n  relatedExercises?: ExerciseId[];\n\n  // Database fields\n  created_at?: Date;\n  updated_at?: Date;\n}\n\n// Extended exercise data for detailed views (deprecated - use ExerciseVariant instead)\nexport type ExerciseData = Exercise & {\n  totalRatings: number;\n  type: string;\n  mechanics: string;\n  primaryMuscles: MuscleGroup[];\n\n  // Detailed instructions\n  steps: InstructionStep[];\n  proTips: string[];\n  commonMistakes: string[];\n};\n\n// Routine interface\nexport interface Routine {\n  id: string;\n  name: string;\n  schedule: string;\n  exercises: number;\n  isSelected: boolean;\n}\n"],"names":[],"mappings":"AAAA;;CAEC","debugId":null}},
    {"offset": {"line": 406, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/types/api.ts"],"sourcesContent":["/**\n * API types for exercise services\n */\n\nimport type { Category, Difficulty, Equipment, MuscleGroup } from './constants';\nimport type { Exercise, ExerciseVariant } from './exercise';\nimport type { ExerciseId, ExerciseVariantId } from './ids';\n\n// Search and filter parameters\nexport interface ExerciseSearchParams {\n  query?: string;\n  category?: Category[];\n  equipment?: Equipment[];\n  targetMuscles?: MuscleGroup[];\n  difficulty?: Difficulty[];\n  tags?: string[];\n  featured?: boolean;\n}\n\n// Pagination parameters\nexport interface PaginationParams {\n  page?: number;\n  limit?: number;\n  offset?: number;\n}\n\n// Sort parameters\nexport interface ExerciseSortParams {\n  sortBy?: 'name' | 'difficulty' | 'featured' | 'popularity' | 'created_at';\n  sortOrder?: 'asc' | 'desc';\n}\n\n// Combined query parameters\nexport interface ExerciseQueryParams\n  extends ExerciseSearchParams,\n    PaginationParams,\n    ExerciseSortParams {}\n\n// API response types\nexport interface ExerciseListResponse {\n  exercises: Exercise[];\n  total: number;\n  page: number;\n  limit: number;\n  hasNext: boolean;\n  hasPrevious: boolean;\n}\n\nexport interface ExerciseResponse {\n  exercise: Exercise;\n}\n\nexport interface ExerciseVariantResponse {\n  variant: ExerciseVariant;\n  exercise: Pick<Exercise, 'id' | 'name' | 'category'>;\n}\n\n// Error response\nexport interface ExerciseApiError {\n  code: string;\n  message: string;\n  details?: Record<string, unknown>;\n}\n\n// Request types for creating/updating exercises\nexport interface CreateExerciseRequest {\n  exercise: Omit<Exercise, 'id' | 'created_at' | 'updated_at'>;\n}\n\nexport interface UpdateExerciseRequest {\n  exerciseId: ExerciseId;\n  updates: Partial<Omit<Exercise, 'id'>>;\n}\n\nexport interface CreateVariantRequest {\n  exerciseId: ExerciseId;\n  variant: Omit<ExerciseVariant, 'id'>;\n}\n\nexport interface UpdateVariantRequest {\n  variantId: ExerciseVariantId;\n  updates: Partial<Omit<ExerciseVariant, 'id'>>;\n}\n"],"names":[],"mappings":"AAAA;;CAEC","debugId":null}},
    {"offset": {"line": 419, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/types/utils.ts"],"sourcesContent":["/**\n * Utility types for exercise operations\n */\n\nimport type { Exercise, ExerciseVariant } from './exercise';\n\n// Partial types for updates\nexport type ExerciseUpdate = Partial<Omit<Exercise, 'id' | 'variants'>>;\nexport type ExerciseVariantUpdate = Partial<Omit<ExerciseVariant, 'id'>>;\n\n// Readonly types for immutable data\nexport type ReadonlyExercise = Readonly<Exercise>;\nexport type ReadonlyExerciseVariant = Readonly<ExerciseVariant>;\n\n// Exercise summary (minimal data for lists)\nexport type ExerciseSummary = Pick<\n  Exercise,\n  | 'id'\n  | 'name'\n  | 'category'\n  | 'description'\n  | 'isPopular'\n  | 'isNew'\n  | 'rating'\n  | 'icon'\n  | 'iconColor'\n>;\n\n// Variant summary (minimal data for variant lists)\nexport type ExerciseVariantSummary = Pick<\n  ExerciseVariant,\n  'id' | 'name' | 'description' | 'difficulty' | 'equipment' | 'muscleGroups'\n>;\n\n// Exercise with selected variant (for display)\nexport interface ExerciseWithVariant {\n  exercise: Exercise;\n  selectedVariant: ExerciseVariant;\n}\n\n// Exercise creation data (without generated fields)\nexport type ExerciseCreateData = Omit<\n  Exercise,\n  'id' | 'created_at' | 'updated_at'\n>;\nexport type ExerciseVariantCreateData = Omit<ExerciseVariant, 'id'>;\n\n// Exercise search result\nexport interface ExerciseSearchResult {\n  exercise: ExerciseSummary;\n  matchedVariants: ExerciseVariantSummary[];\n  relevanceScore: number;\n}\n\n// Exercise validation result\nexport interface ExerciseValidationResult {\n  isValid: boolean;\n  errors: Array<{\n    field: string;\n    message: string;\n  }>;\n  warnings: Array<{\n    field: string;\n    message: string;\n  }>;\n}\n\n// Type for exercise filtering functions\nexport type ExerciseFilter = (exercise: Exercise) => boolean;\nexport type ExerciseVariantFilter = (variant: ExerciseVariant) => boolean;\n\n// Type for exercise sorting functions\nexport type ExerciseSorter = (a: Exercise, b: Exercise) => number;\nexport type ExerciseVariantSorter = (\n  a: ExerciseVariant,\n  b: ExerciseVariant\n) => number;\n"],"names":[],"mappings":"AAAA;;CAEC","debugId":null}},
    {"offset": {"line": 432, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/types/ui.ts"],"sourcesContent":["/**\n * UI-specific types for exercise components\n */\n\nimport type { Difficulty, Equipment, MuscleGroup } from './constants';\nimport type { Exercise, ExerciseVariant } from './exercise';\n\n// Filter state for exercise lists\nexport interface FilterState {\n  difficulties: Difficulty[];\n  muscleGroups: MuscleGroup[];\n  equipment: Equipment[];\n}\n\n// Exercise selection modal props\nexport interface ExerciseSelectionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSelectExercise: (exercise: Exercise, variant?: ExerciseVariant) => void;\n}\n\n// Exercise card props\nexport interface ExerciseCardProps {\n  exercise: Exercise;\n  variant?: ExerciseVariant;\n  onSelect?: (exercise: Exercise, variant?: ExerciseVariant) => void;\n  onFavorite?: (exerciseId: string) => void;\n  showVariantSelector?: boolean;\n}\n\n// Exercise list props\nexport interface ExerciseListProps {\n  exercises: Exercise[];\n  onExerciseSelect: (exercise: Exercise, variant?: ExerciseVariant) => void;\n  filters?: FilterState;\n  loading?: boolean;\n}\n\n// Search and filter props\nexport interface SearchAndFiltersProps {\n  onSearch: (query: string) => void;\n  onFilterChange: (filters: FilterState) => void;\n  filters: FilterState;\n  searchQuery: string;\n}\n"],"names":[],"mappings":"AAAA;;CAEC","debugId":null}},
    {"offset": {"line": 445, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/types/data.ts"],"sourcesContent":["/**\n * Exercise data constants\n */\n\nimport { CATEGORY, DIFFICULTY, EQUIPMENT, MUSCLE_GROUP } from './constants';\n\n// Export the arrays for backward compatibility\nexport const difficulties = Object.values(DIFFICULTY);\nexport const equipment = Object.values(EQUIPMENT);\nexport const muscleGroups = Object.values(MUSCLE_GROUP);\nexport const exerciseCategories = Object.values(CATEGORY);\n\n// Export the types for backward compatibility (using different names to avoid conflicts)\nexport type DifficultyType = (typeof DIFFICULTY)[keyof typeof DIFFICULTY];\nexport type EquipmentType = (typeof EQUIPMENT)[keyof typeof EQUIPMENT];\nexport type MuscleGroupType = (typeof MUSCLE_GROUP)[keyof typeof MUSCLE_GROUP];\nexport type ExerciseCategoryType = (typeof CATEGORY)[keyof typeof CATEGORY];\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;;AAED;;AAGO,MAAM,eAAe,OAAO,MAAM,CAAC,qJAAA,CAAA,aAAU;AAC7C,MAAM,YAAY,OAAO,MAAM,CAAC,qJAAA,CAAA,YAAS;AACzC,MAAM,eAAe,OAAO,MAAM,CAAC,qJAAA,CAAA,eAAY;AAC/C,MAAM,qBAAqB,OAAO,MAAM,CAAC,qJAAA,CAAA,WAAQ","debugId":null}},
    {"offset": {"line": 468, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/types/mockData.ts"],"sourcesContent":["import { CATEGORY, DIFFICULTY, EQUIPMENT, MUSCLE_GROUP } from './constants';\nimport { Exercise, ExerciseVariant, Routine } from './exercise';\nimport { createExerciseId, createExerciseVariantId } from './ids';\n\n// Mock exercise variants\nconst benchPressVariants: ExerciseVariant[] = [\n  {\n    id: createExerciseVariantId('bench-press-basic'),\n    name: 'Bench Press',\n    description:\n      'A fundamental upper body exercise targeting the chest, triceps, and shoulders.',\n    focus: 'Overall Chest',\n    difficulty: DIFFICULTY.INTERMEDIATE,\n    equipment: [EQUIPMENT.BARBELL, EQUIPMENT.BENCH],\n    muscleGroups: [\n      MUSCLE_GROUP.CHEST,\n      MUSCLE_GROUP.TRICEPS,\n      MUSCLE_GROUP.SHOULDERS,\n    ],\n    instructions: [\n      'Lie flat on the bench with feet planted on the ground',\n      'Grip the barbell with hands slightly wider than shoulder-width',\n      'Lower the bar to your chest with control',\n      'Press the bar back up to starting position',\n    ],\n    steps: [\n      {\n        title: 'Starting Position',\n        description:\n          'Lie flat on the bench with your feet planted firmly on the floor. Your eyes should be directly under the barbell.',\n      },\n      {\n        title: 'Grip',\n        description:\n          'Grip the barbell with hands slightly wider than shoulder-width apart. Wrap your thumbs around the bar for safety.',\n      },\n      {\n        title: 'Lowering Phase',\n        description:\n          'Lower the bar slowly and under control to your mid-chest. Keep your elbows at approximately a 45-75 degree angle.',\n      },\n      {\n        title: 'Pressing Phase',\n        description:\n          'Push the bar back up to the starting position by extending your arms. Focus on pushing through your chest muscles.',\n      },\n      {\n        title: 'Breathing',\n        description:\n          'Inhale during the lowering phase and exhale during the pressing phase.',\n      },\n    ],\n    tips: {\n      proTips: [\n        'Keep your wrists straight and directly above your elbows.',\n        'Maintain a slight arch in your lower back, but keep your butt on the bench.',\n        'Drive through your feet for stability and added power.',\n        'Keep your shoulder blades retracted and \"tucked\" throughout the movement.',\n        'Focus on pushing yourself away from the bar, rather than pushing the bar away from you.',\n      ],\n      commonMistakes: [\n        'Bouncing the bar off your chest, which can lead to injury.',\n        'Lifting your butt off the bench, which reduces stability.',\n        'Flaring your elbows out too wide, which can strain your shoulders.',\n        'Not lowering the bar to chest level, which reduces the effectiveness.',\n        'Using too much weight and sacrificing proper form.',\n      ],\n    },\n    media: {\n      images: ['/exercise-images/bench-press.jpg'],\n      videos: ['/videos/bench-press.mp4'],\n      featuredImage: '/exercise-images/bench-press.jpg',\n      featuredVideo: '/videos/bench-press.mp4',\n    },\n  },\n  {\n    id: createExerciseVariantId('incline-bench'),\n    name: 'Incline Bench Press',\n    description: 'Targets upper chest more than flat bench press.',\n    focus: 'Upper Chest Focus',\n    difficulty: DIFFICULTY.INTERMEDIATE,\n    equipment: [EQUIPMENT.BARBELL, EQUIPMENT.INCLINE_BENCH],\n    muscleGroups: [\n      MUSCLE_GROUP.UPPER_CHEST,\n      MUSCLE_GROUP.SHOULDERS,\n      MUSCLE_GROUP.TRICEPS,\n    ],\n    instructions: [\n      'Set bench to 30-45 degree incline',\n      'Lie back with feet planted firmly',\n      'Grip barbell with hands slightly wider than shoulder-width',\n      'Lower bar to upper chest with control',\n      'Press bar back up to starting position',\n    ],\n    steps: [\n      {\n        title: 'Setup',\n        description: 'Set the bench to a 30-45 degree incline angle.',\n      },\n      {\n        title: 'Position',\n        description: 'Lie back with feet planted firmly on the ground.',\n      },\n      {\n        title: 'Grip',\n        description:\n          'Grip the barbell with hands slightly wider than shoulder-width.',\n      },\n      {\n        title: 'Execution',\n        description:\n          'Lower the bar to your upper chest with control, then press back up.',\n      },\n    ],\n    media: {\n      images: ['/exercise-images/incline-bench.jpg'],\n      featuredImage: '/exercise-images/incline-bench.jpg',\n    },\n  },\n  {\n    id: createExerciseVariantId('decline-bench'),\n    name: 'Decline Bench Press',\n    description: 'Targets lower chest more than flat bench press.',\n    focus: 'Lower Chest Focus',\n    difficulty: DIFFICULTY.INTERMEDIATE,\n    equipment: [EQUIPMENT.BARBELL, EQUIPMENT.DECLINE_BENCH],\n    muscleGroups: [\n      MUSCLE_GROUP.LOWER_CHEST,\n      MUSCLE_GROUP.SHOULDERS,\n      MUSCLE_GROUP.TRICEPS,\n    ],\n    instructions: [\n      'Set bench to 15-30 degree decline',\n      'Secure feet under the foot pads',\n      'Grip barbell with hands slightly wider than shoulder-width',\n      'Lower bar to lower chest with control',\n      'Press bar back up to starting position',\n    ],\n    steps: [\n      {\n        title: 'Setup',\n        description: 'Set the bench to a 15-30 degree decline angle.',\n      },\n      {\n        title: 'Position',\n        description: 'Secure your feet under the foot pads for stability.',\n      },\n      {\n        title: 'Execution',\n        description:\n          'Lower the bar to your lower chest with control, then press back up.',\n      },\n    ],\n    media: {\n      images: ['/exercise-images/decline-bench.jpg'],\n      featuredImage: '/exercise-images/decline-bench.jpg',\n    },\n  },\n  {\n    id: createExerciseVariantId('dumbbell-bench'),\n    name: 'Dumbbell Bench Press',\n    description: 'Allows greater range of motion and stabilizer engagement.',\n    focus: 'Stabilizer Focus',\n    difficulty: DIFFICULTY.INTERMEDIATE,\n    equipment: [EQUIPMENT.DUMBBELL, EQUIPMENT.BENCH],\n    muscleGroups: [\n      MUSCLE_GROUP.CHEST,\n      MUSCLE_GROUP.SHOULDERS,\n      MUSCLE_GROUP.TRICEPS,\n    ],\n    instructions: [\n      'Lie flat on bench with dumbbells at chest level',\n      'Press dumbbells up until arms are fully extended',\n      'Lower dumbbells back to chest with control',\n      'Keep core engaged throughout movement',\n      'Maintain neutral wrist position',\n    ],\n    steps: [\n      {\n        title: 'Setup',\n        description: 'Lie flat on the bench with dumbbells at chest level.',\n      },\n      {\n        title: 'Execution',\n        description: 'Press the dumbbells up until arms are fully extended.',\n      },\n      {\n        title: 'Control',\n        description: 'Lower the dumbbells back to chest with control.',\n      },\n    ],\n    media: {\n      images: ['/exercise-images/dumbbell-bench.jpg'],\n      featuredImage: '/exercise-images/dumbbell-bench.jpg',\n    },\n  },\n];\n\nconst squatVariants: ExerciseVariant[] = [\n  {\n    id: createExerciseVariantId('squat-basic'),\n    name: 'Squat',\n    description:\n      'A fundamental lower body exercise targeting the legs and glutes.',\n    focus: 'Overall Lower Body',\n    difficulty: DIFFICULTY.BEGINNER,\n    equipment: [EQUIPMENT.BODYWEIGHT],\n    muscleGroups: [MUSCLE_GROUP.LEGS, MUSCLE_GROUP.GLUTES],\n    instructions: [\n      'Stand with feet shoulder-width apart',\n      'Lower hips back and down as if sitting in a chair',\n      'Keep knees tracking over toes',\n      'Return to standing position',\n    ],\n    steps: [\n      {\n        title: 'Starting Position',\n        description: 'Stand with feet shoulder-width apart.',\n      },\n      {\n        title: 'Movement',\n        description: 'Lower hips back and down as if sitting in a chair.',\n      },\n      {\n        title: 'Form',\n        description: 'Keep knees tracking over toes.',\n      },\n      {\n        title: 'Return',\n        description: 'Return to standing position.',\n      },\n    ],\n    media: {\n      images: ['/exercise-images/squat.jpg'],\n      featuredImage: '/exercise-images/squat.jpg',\n    },\n  },\n  {\n    id: createExerciseVariantId('goblet-squat'),\n    name: 'Goblet Squat',\n    description: 'Squat variation with a dumbbell held at chest level.',\n    focus: 'Form Focus',\n    difficulty: DIFFICULTY.BEGINNER,\n    equipment: [EQUIPMENT.DUMBBELL],\n    muscleGroups: [MUSCLE_GROUP.LEGS, MUSCLE_GROUP.GLUTES, MUSCLE_GROUP.CORE],\n    instructions: [\n      'Hold dumbbell vertically at chest level',\n      'Stand with feet shoulder-width apart',\n      'Lower into squat position',\n      'Keep chest up and core engaged',\n      'Return to standing position',\n    ],\n    steps: [\n      {\n        title: 'Setup',\n        description: 'Hold a dumbbell vertically at chest level.',\n      },\n      {\n        title: 'Position',\n        description: 'Stand with feet shoulder-width apart.',\n      },\n      {\n        title: 'Movement',\n        description: 'Lower into squat position while keeping chest up.',\n      },\n    ],\n    media: {\n      images: ['/exercise-images/goblet-squat.jpg'],\n      featuredImage: '/exercise-images/goblet-squat.jpg',\n    },\n  },\n];\n\nconst pushUpVariants: ExerciseVariant[] = [\n  {\n    id: createExerciseVariantId('pushup-basic'),\n    name: 'Push-up',\n    description:\n      'A bodyweight exercise that builds upper body and core strength.',\n    focus: 'Overall Upper Body',\n    difficulty: DIFFICULTY.BEGINNER,\n    equipment: [EQUIPMENT.BODYWEIGHT],\n    muscleGroups: [MUSCLE_GROUP.CHEST, MUSCLE_GROUP.TRICEPS, MUSCLE_GROUP.CORE],\n    instructions: [\n      'Start in plank position with hands under shoulders',\n      'Lower body until chest nearly touches ground',\n      'Push back up to starting position',\n      'Keep core engaged throughout movement',\n    ],\n    steps: [\n      {\n        title: 'Starting Position',\n        description: 'Start in plank position with hands under shoulders.',\n      },\n      {\n        title: 'Movement',\n        description: 'Lower body until chest nearly touches ground.',\n      },\n      {\n        title: 'Return',\n        description: 'Push back up to starting position.',\n      },\n    ],\n    media: {\n      images: ['/exercise-images/pushup.jpg'],\n      featuredImage: '/exercise-images/pushup.jpg',\n    },\n  },\n  {\n    id: createExerciseVariantId('incline-pushup'),\n    name: 'Incline Push-up',\n    description: 'Easier variation with hands elevated.',\n    focus: 'Beginner Friendly',\n    difficulty: DIFFICULTY.BEGINNER,\n    equipment: [EQUIPMENT.BENCH, EQUIPMENT.STEP],\n    muscleGroups: [\n      MUSCLE_GROUP.CHEST,\n      MUSCLE_GROUP.TRICEPS,\n      MUSCLE_GROUP.SHOULDERS,\n    ],\n    instructions: [\n      'Place hands on elevated surface (bench, step, etc.)',\n      'Keep body in straight line from head to heels',\n      'Lower chest toward elevated surface',\n      'Push back up to starting position',\n      'Maintain core engagement throughout',\n    ],\n    steps: [\n      {\n        title: 'Setup',\n        description: 'Place hands on an elevated surface like a bench or step.',\n      },\n      {\n        title: 'Form',\n        description: 'Keep body in straight line from head to heels.',\n      },\n      {\n        title: 'Movement',\n        description: 'Lower chest toward elevated surface, then push back up.',\n      },\n    ],\n    media: {\n      images: ['/exercise-images/incline-pushup.jpg'],\n      featuredImage: '/exercise-images/incline-pushup.jpg',\n    },\n  },\n  {\n    id: createExerciseVariantId('diamond-pushup'),\n    name: 'Diamond Push-up',\n    description: 'Advanced variation targeting triceps more intensely.',\n    focus: 'Tricep Focus',\n    difficulty: DIFFICULTY.ADVANCED,\n    equipment: [EQUIPMENT.BODYWEIGHT],\n    muscleGroups: [MUSCLE_GROUP.TRICEPS, MUSCLE_GROUP.CHEST, MUSCLE_GROUP.CORE],\n    instructions: [\n      'Form diamond shape with hands under chest',\n      'Keep elbows close to body',\n      'Lower chest toward hands',\n      'Push back up to starting position',\n      'Maintain straight body line throughout',\n    ],\n    steps: [\n      {\n        title: 'Setup',\n        description: 'Form diamond shape with hands under chest.',\n      },\n      {\n        title: 'Form',\n        description: 'Keep elbows close to body.',\n      },\n      {\n        title: 'Movement',\n        description: 'Lower chest toward hands, then push back up.',\n      },\n    ],\n    media: {\n      images: ['/exercise-images/diamond-pushup.jpg'],\n      featuredImage: '/exercise-images/diamond-pushup.jpg',\n    },\n  },\n];\n\n// Mock exercises for ExerciseSelectionModal and ExercisesList\nexport const mockExercises: Exercise[] = [\n  {\n    id: createExerciseId('bench-press'),\n    name: 'Bench Press',\n    category: CATEGORY.STRENGTH,\n    description:\n      'A fundamental upper body exercise targeting the chest, triceps, and shoulders.',\n    variants: benchPressVariants,\n    mainVariantId: createExerciseVariantId('bench-press-basic'),\n    icon: '🏋️',\n    iconColor: 'bg-indigo-100 text-indigo-600',\n    isFavorite: false,\n    isPopular: true,\n    rating: 4.8,\n    summary: {\n      difficultyRange: {\n        min: DIFFICULTY.INTERMEDIATE,\n        max: DIFFICULTY.INTERMEDIATE,\n      },\n      equipmentOptions: [\n        EQUIPMENT.BARBELL,\n        EQUIPMENT.BENCH,\n        EQUIPMENT.DUMBBELL,\n        EQUIPMENT.INCLINE_BENCH,\n        EQUIPMENT.DECLINE_BENCH,\n      ],\n      primaryMuscleGroups: [\n        MUSCLE_GROUP.CHEST,\n        MUSCLE_GROUP.TRICEPS,\n        MUSCLE_GROUP.SHOULDERS,\n        MUSCLE_GROUP.UPPER_CHEST,\n        MUSCLE_GROUP.LOWER_CHEST,\n      ],\n    },\n    tags: ['compound', 'upper-body', 'strength'],\n  },\n  {\n    id: createExerciseId('squats'),\n    name: 'Squats',\n    category: CATEGORY.STRENGTH,\n    description:\n      'A fundamental lower body exercise targeting the legs and glutes.',\n    variants: squatVariants,\n    mainVariantId: createExerciseVariantId('squat-basic'),\n    icon: '🏋️',\n    iconColor: 'bg-indigo-100 text-indigo-600',\n    isFavorite: false,\n    rating: 4.9,\n    summary: {\n      difficultyRange: {\n        min: DIFFICULTY.BEGINNER,\n        max: DIFFICULTY.BEGINNER,\n      },\n      equipmentOptions: [EQUIPMENT.BODYWEIGHT, EQUIPMENT.DUMBBELL],\n      primaryMuscleGroups: [\n        MUSCLE_GROUP.LEGS,\n        MUSCLE_GROUP.GLUTES,\n        MUSCLE_GROUP.CORE,\n      ],\n    },\n    tags: ['compound', 'lower-body', 'strength'],\n  },\n  {\n    id: createExerciseId('push-ups'),\n    name: 'Push-ups',\n    category: CATEGORY.STRENGTH,\n    description:\n      'A bodyweight exercise that builds upper body and core strength.',\n    variants: pushUpVariants,\n    mainVariantId: createExerciseVariantId('pushup-basic'),\n    icon: '💪',\n    iconColor: 'bg-indigo-100 text-indigo-600',\n    isFavorite: false,\n    rating: 4.6,\n    summary: {\n      difficultyRange: {\n        min: DIFFICULTY.BEGINNER,\n        max: DIFFICULTY.ADVANCED,\n      },\n      equipmentOptions: [EQUIPMENT.BODYWEIGHT, EQUIPMENT.BENCH, EQUIPMENT.STEP],\n      primaryMuscleGroups: [\n        MUSCLE_GROUP.CHEST,\n        MUSCLE_GROUP.TRICEPS,\n        MUSCLE_GROUP.CORE,\n        MUSCLE_GROUP.SHOULDERS,\n      ],\n    },\n    tags: ['bodyweight', 'upper-body', 'strength'],\n  },\n];\n\n// Mock routines for ExerciseDetail\nexport const mockRoutines: Routine[] = [\n  {\n    id: 'upper-body',\n    name: 'Upper Body Split',\n    schedule: 'Mon, Wed, Fri • 12 exercises',\n    exercises: 12,\n    isSelected: false,\n  },\n  {\n    id: 'push-day',\n    name: 'Push Day',\n    schedule: 'Tue, Sat • 8 exercises',\n    exercises: 8,\n    isSelected: false,\n  },\n  {\n    id: 'chest-focus',\n    name: 'Chest Focus',\n    schedule: 'Thu • 6 exercises',\n    exercises: 6,\n    isSelected: true,\n  },\n];\n\n// Legacy mock data for backward compatibility (deprecated)\nexport const mockExerciseData = mockExercises[0];\n"],"names":[],"mappings":";;;;;AAAA;AAEA;;;AAEA,yBAAyB;AACzB,MAAM,qBAAwC;IAC5C;QACE,IAAI,CAAA,GAAA,+IAAA,CAAA,0BAAuB,AAAD,EAAE;QAC5B,MAAM;QACN,aACE;QACF,OAAO;QACP,YAAY,qJAAA,CAAA,aAAU,CAAC,YAAY;QACnC,WAAW;YAAC,qJAAA,CAAA,YAAS,CAAC,OAAO;YAAE,qJAAA,CAAA,YAAS,CAAC,KAAK;SAAC;QAC/C,cAAc;YACZ,qJAAA,CAAA,eAAY,CAAC,KAAK;YAClB,qJAAA,CAAA,eAAY,CAAC,OAAO;YACpB,qJAAA,CAAA,eAAY,CAAC,SAAS;SACvB;QACD,cAAc;YACZ;YACA;YACA;YACA;SACD;QACD,OAAO;YACL;gBACE,OAAO;gBACP,aACE;YACJ;YACA;gBACE,OAAO;gBACP,aACE;YACJ;YACA;gBACE,OAAO;gBACP,aACE;YACJ;YACA;gBACE,OAAO;gBACP,aACE;YACJ;YACA;gBACE,OAAO;gBACP,aACE;YACJ;SACD;QACD,MAAM;YACJ,SAAS;gBACP;gBACA;gBACA;gBACA;gBACA;aACD;YACD,gBAAgB;gBACd;gBACA;gBACA;gBACA;gBACA;aACD;QACH;QACA,OAAO;YACL,QAAQ;gBAAC;aAAmC;YAC5C,QAAQ;gBAAC;aAA0B;YACnC,eAAe;YACf,eAAe;QACjB;IACF;IACA;QACE,IAAI,CAAA,GAAA,+IAAA,CAAA,0BAAuB,AAAD,EAAE;QAC5B,MAAM;QACN,aAAa;QACb,OAAO;QACP,YAAY,qJAAA,CAAA,aAAU,CAAC,YAAY;QACnC,WAAW;YAAC,qJAAA,CAAA,YAAS,CAAC,OAAO;YAAE,qJAAA,CAAA,YAAS,CAAC,aAAa;SAAC;QACvD,cAAc;YACZ,qJAAA,CAAA,eAAY,CAAC,WAAW;YACxB,qJAAA,CAAA,eAAY,CAAC,SAAS;YACtB,qJAAA,CAAA,eAAY,CAAC,OAAO;SACrB;QACD,cAAc;YACZ;YACA;YACA;YACA;YACA;SACD;QACD,OAAO;YACL;gBACE,OAAO;gBACP,aAAa;YACf;YACA;gBACE,OAAO;gBACP,aAAa;YACf;YACA;gBACE,OAAO;gBACP,aACE;YACJ;YACA;gBACE,OAAO;gBACP,aACE;YACJ;SACD;QACD,OAAO;YACL,QAAQ;gBAAC;aAAqC;YAC9C,eAAe;QACjB;IACF;IACA;QACE,IAAI,CAAA,GAAA,+IAAA,CAAA,0BAAuB,AAAD,EAAE;QAC5B,MAAM;QACN,aAAa;QACb,OAAO;QACP,YAAY,qJAAA,CAAA,aAAU,CAAC,YAAY;QACnC,WAAW;YAAC,qJAAA,CAAA,YAAS,CAAC,OAAO;YAAE,qJAAA,CAAA,YAAS,CAAC,aAAa;SAAC;QACvD,cAAc;YACZ,qJAAA,CAAA,eAAY,CAAC,WAAW;YACxB,qJAAA,CAAA,eAAY,CAAC,SAAS;YACtB,qJAAA,CAAA,eAAY,CAAC,OAAO;SACrB;QACD,cAAc;YACZ;YACA;YACA;YACA;YACA;SACD;QACD,OAAO;YACL;gBACE,OAAO;gBACP,aAAa;YACf;YACA;gBACE,OAAO;gBACP,aAAa;YACf;YACA;gBACE,OAAO;gBACP,aACE;YACJ;SACD;QACD,OAAO;YACL,QAAQ;gBAAC;aAAqC;YAC9C,eAAe;QACjB;IACF;IACA;QACE,IAAI,CAAA,GAAA,+IAAA,CAAA,0BAAuB,AAAD,EAAE;QAC5B,MAAM;QACN,aAAa;QACb,OAAO;QACP,YAAY,qJAAA,CAAA,aAAU,CAAC,YAAY;QACnC,WAAW;YAAC,qJAAA,CAAA,YAAS,CAAC,QAAQ;YAAE,qJAAA,CAAA,YAAS,CAAC,KAAK;SAAC;QAChD,cAAc;YACZ,qJAAA,CAAA,eAAY,CAAC,KAAK;YAClB,qJAAA,CAAA,eAAY,CAAC,SAAS;YACtB,qJAAA,CAAA,eAAY,CAAC,OAAO;SACrB;QACD,cAAc;YACZ;YACA;YACA;YACA;YACA;SACD;QACD,OAAO;YACL;gBACE,OAAO;gBACP,aAAa;YACf;YACA;gBACE,OAAO;gBACP,aAAa;YACf;YACA;gBACE,OAAO;gBACP,aAAa;YACf;SACD;QACD,OAAO;YACL,QAAQ;gBAAC;aAAsC;YAC/C,eAAe;QACjB;IACF;CACD;AAED,MAAM,gBAAmC;IACvC;QACE,IAAI,CAAA,GAAA,+IAAA,CAAA,0BAAuB,AAAD,EAAE;QAC5B,MAAM;QACN,aACE;QACF,OAAO;QACP,YAAY,qJAAA,CAAA,aAAU,CAAC,QAAQ;QAC/B,WAAW;YAAC,qJAAA,CAAA,YAAS,CAAC,UAAU;SAAC;QACjC,cAAc;YAAC,qJAAA,CAAA,eAAY,CAAC,IAAI;YAAE,qJAAA,CAAA,eAAY,CAAC,MAAM;SAAC;QACtD,cAAc;YACZ;YACA;YACA;YACA;SACD;QACD,OAAO;YACL;gBACE,OAAO;gBACP,aAAa;YACf;YACA;gBACE,OAAO;gBACP,aAAa;YACf;YACA;gBACE,OAAO;gBACP,aAAa;YACf;YACA;gBACE,OAAO;gBACP,aAAa;YACf;SACD;QACD,OAAO;YACL,QAAQ;gBAAC;aAA6B;YACtC,eAAe;QACjB;IACF;IACA;QACE,IAAI,CAAA,GAAA,+IAAA,CAAA,0BAAuB,AAAD,EAAE;QAC5B,MAAM;QACN,aAAa;QACb,OAAO;QACP,YAAY,qJAAA,CAAA,aAAU,CAAC,QAAQ;QAC/B,WAAW;YAAC,qJAAA,CAAA,YAAS,CAAC,QAAQ;SAAC;QAC/B,cAAc;YAAC,qJAAA,CAAA,eAAY,CAAC,IAAI;YAAE,qJAAA,CAAA,eAAY,CAAC,MAAM;YAAE,qJAAA,CAAA,eAAY,CAAC,IAAI;SAAC;QACzE,cAAc;YACZ;YACA;YACA;YACA;YACA;SACD;QACD,OAAO;YACL;gBACE,OAAO;gBACP,aAAa;YACf;YACA;gBACE,OAAO;gBACP,aAAa;YACf;YACA;gBACE,OAAO;gBACP,aAAa;YACf;SACD;QACD,OAAO;YACL,QAAQ;gBAAC;aAAoC;YAC7C,eAAe;QACjB;IACF;CACD;AAED,MAAM,iBAAoC;IACxC;QACE,IAAI,CAAA,GAAA,+IAAA,CAAA,0BAAuB,AAAD,EAAE;QAC5B,MAAM;QACN,aACE;QACF,OAAO;QACP,YAAY,qJAAA,CAAA,aAAU,CAAC,QAAQ;QAC/B,WAAW;YAAC,qJAAA,CAAA,YAAS,CAAC,UAAU;SAAC;QACjC,cAAc;YAAC,qJAAA,CAAA,eAAY,CAAC,KAAK;YAAE,qJAAA,CAAA,eAAY,CAAC,OAAO;YAAE,qJAAA,CAAA,eAAY,CAAC,IAAI;SAAC;QAC3E,cAAc;YACZ;YACA;YACA;YACA;SACD;QACD,OAAO;YACL;gBACE,OAAO;gBACP,aAAa;YACf;YACA;gBACE,OAAO;gBACP,aAAa;YACf;YACA;gBACE,OAAO;gBACP,aAAa;YACf;SACD;QACD,OAAO;YACL,QAAQ;gBAAC;aAA8B;YACvC,eAAe;QACjB;IACF;IACA;QACE,IAAI,CAAA,GAAA,+IAAA,CAAA,0BAAuB,AAAD,EAAE;QAC5B,MAAM;QACN,aAAa;QACb,OAAO;QACP,YAAY,qJAAA,CAAA,aAAU,CAAC,QAAQ;QAC/B,WAAW;YAAC,qJAAA,CAAA,YAAS,CAAC,KAAK;YAAE,qJAAA,CAAA,YAAS,CAAC,IAAI;SAAC;QAC5C,cAAc;YACZ,qJAAA,CAAA,eAAY,CAAC,KAAK;YAClB,qJAAA,CAAA,eAAY,CAAC,OAAO;YACpB,qJAAA,CAAA,eAAY,CAAC,SAAS;SACvB;QACD,cAAc;YACZ;YACA;YACA;YACA;YACA;SACD;QACD,OAAO;YACL;gBACE,OAAO;gBACP,aAAa;YACf;YACA;gBACE,OAAO;gBACP,aAAa;YACf;YACA;gBACE,OAAO;gBACP,aAAa;YACf;SACD;QACD,OAAO;YACL,QAAQ;gBAAC;aAAsC;YAC/C,eAAe;QACjB;IACF;IACA;QACE,IAAI,CAAA,GAAA,+IAAA,CAAA,0BAAuB,AAAD,EAAE;QAC5B,MAAM;QACN,aAAa;QACb,OAAO;QACP,YAAY,qJAAA,CAAA,aAAU,CAAC,QAAQ;QAC/B,WAAW;YAAC,qJAAA,CAAA,YAAS,CAAC,UAAU;SAAC;QACjC,cAAc;YAAC,qJAAA,CAAA,eAAY,CAAC,OAAO;YAAE,qJAAA,CAAA,eAAY,CAAC,KAAK;YAAE,qJAAA,CAAA,eAAY,CAAC,IAAI;SAAC;QAC3E,cAAc;YACZ;YACA;YACA;YACA;YACA;SACD;QACD,OAAO;YACL;gBACE,OAAO;gBACP,aAAa;YACf;YACA;gBACE,OAAO;gBACP,aAAa;YACf;YACA;gBACE,OAAO;gBACP,aAAa;YACf;SACD;QACD,OAAO;YACL,QAAQ;gBAAC;aAAsC;YAC/C,eAAe;QACjB;IACF;CACD;AAGM,MAAM,gBAA4B;IACvC;QACE,IAAI,CAAA,GAAA,+IAAA,CAAA,mBAAgB,AAAD,EAAE;QACrB,MAAM;QACN,UAAU,qJAAA,CAAA,WAAQ,CAAC,QAAQ;QAC3B,aACE;QACF,UAAU;QACV,eAAe,CAAA,GAAA,+IAAA,CAAA,0BAAuB,AAAD,EAAE;QACvC,MAAM;QACN,WAAW;QACX,YAAY;QACZ,WAAW;QACX,QAAQ;QACR,SAAS;YACP,iBAAiB;gBACf,KAAK,qJAAA,CAAA,aAAU,CAAC,YAAY;gBAC5B,KAAK,qJAAA,CAAA,aAAU,CAAC,YAAY;YAC9B;YACA,kBAAkB;gBAChB,qJAAA,CAAA,YAAS,CAAC,OAAO;gBACjB,qJAAA,CAAA,YAAS,CAAC,KAAK;gBACf,qJAAA,CAAA,YAAS,CAAC,QAAQ;gBAClB,qJAAA,CAAA,YAAS,CAAC,aAAa;gBACvB,qJAAA,CAAA,YAAS,CAAC,aAAa;aACxB;YACD,qBAAqB;gBACnB,qJAAA,CAAA,eAAY,CAAC,KAAK;gBAClB,qJAAA,CAAA,eAAY,CAAC,OAAO;gBACpB,qJAAA,CAAA,eAAY,CAAC,SAAS;gBACtB,qJAAA,CAAA,eAAY,CAAC,WAAW;gBACxB,qJAAA,CAAA,eAAY,CAAC,WAAW;aACzB;QACH;QACA,MAAM;YAAC;YAAY;YAAc;SAAW;IAC9C;IACA;QACE,IAAI,CAAA,GAAA,+IAAA,CAAA,mBAAgB,AAAD,EAAE;QACrB,MAAM;QACN,UAAU,qJAAA,CAAA,WAAQ,CAAC,QAAQ;QAC3B,aACE;QACF,UAAU;QACV,eAAe,CAAA,GAAA,+IAAA,CAAA,0BAAuB,AAAD,EAAE;QACvC,MAAM;QACN,WAAW;QACX,YAAY;QACZ,QAAQ;QACR,SAAS;YACP,iBAAiB;gBACf,KAAK,qJAAA,CAAA,aAAU,CAAC,QAAQ;gBACxB,KAAK,qJAAA,CAAA,aAAU,CAAC,QAAQ;YAC1B;YACA,kBAAkB;gBAAC,qJAAA,CAAA,YAAS,CAAC,UAAU;gBAAE,qJAAA,CAAA,YAAS,CAAC,QAAQ;aAAC;YAC5D,qBAAqB;gBACnB,qJAAA,CAAA,eAAY,CAAC,IAAI;gBACjB,qJAAA,CAAA,eAAY,CAAC,MAAM;gBACnB,qJAAA,CAAA,eAAY,CAAC,IAAI;aAClB;QACH;QACA,MAAM;YAAC;YAAY;YAAc;SAAW;IAC9C;IACA;QACE,IAAI,CAAA,GAAA,+IAAA,CAAA,mBAAgB,AAAD,EAAE;QACrB,MAAM;QACN,UAAU,qJAAA,CAAA,WAAQ,CAAC,QAAQ;QAC3B,aACE;QACF,UAAU;QACV,eAAe,CAAA,GAAA,+IAAA,CAAA,0BAAuB,AAAD,EAAE;QACvC,MAAM;QACN,WAAW;QACX,YAAY;QACZ,QAAQ;QACR,SAAS;YACP,iBAAiB;gBACf,KAAK,qJAAA,CAAA,aAAU,CAAC,QAAQ;gBACxB,KAAK,qJAAA,CAAA,aAAU,CAAC,QAAQ;YAC1B;YACA,kBAAkB;gBAAC,qJAAA,CAAA,YAAS,CAAC,UAAU;gBAAE,qJAAA,CAAA,YAAS,CAAC,KAAK;gBAAE,qJAAA,CAAA,YAAS,CAAC,IAAI;aAAC;YACzE,qBAAqB;gBACnB,qJAAA,CAAA,eAAY,CAAC,KAAK;gBAClB,qJAAA,CAAA,eAAY,CAAC,OAAO;gBACpB,qJAAA,CAAA,eAAY,CAAC,IAAI;gBACjB,qJAAA,CAAA,eAAY,CAAC,SAAS;aACvB;QACH;QACA,MAAM;YAAC;YAAc;YAAc;SAAW;IAChD;CACD;AAGM,MAAM,eAA0B;IACrC;QACE,IAAI;QACJ,MAAM;QACN,UAAU;QACV,WAAW;QACX,YAAY;IACd;IACA;QACE,IAAI;QACJ,MAAM;QACN,UAAU;QACV,WAAW;QACX,YAAY;IACd;IACA;QACE,IAAI;QACJ,MAAM;QACN,UAAU;QACV,WAAW;QACX,YAAY;IACd;CACD;AAGM,MAAM,mBAAmB,aAAa,CAAC,EAAE","debugId":null}},
    {"offset": {"line": 1038, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/types/index.ts"],"sourcesContent":["/**\n * Exercise types for Peak Health\n */\n\n// Re-export all constants\nexport * from './constants';\n\n// Re-export all ID types\nexport * from './ids';\n\n// Re-export main exercise interfaces\nexport * from './exercise';\n\n// Re-export API types\nexport * from './api';\n\n// Re-export utility types\nexport * from './utils';\n\n// Re-export UI types\nexport * from './ui';\n\n// Re-export data constants and mock data\nexport * from './data';\nexport * from './mockData';\n"],"names":[],"mappings":"AAAA;;CAEC,GAED,0BAA0B;;AAC1B;AAEA,yBAAyB;AACzB;AAEA,qCAAqC;AACrC;AAEA,sBAAsB;AACtB;AAEA,0BAA0B;AAC1B;AAEA,qBAAqB;AACrB;AAEA,yCAAyC;AACzC;AACA","debugId":null}},
    {"offset": {"line": 1087, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/utils/exerciseUtils.ts"],"sourcesContent":["import { Exercise, ExerciseVariant, Difficulty } from '../types';\n\nexport const getDifficultyColor = (difficulty: Difficulty) => {\n  const colors = {\n    Beginner: 'bg-green-100 text-green-700',\n    Intermediate: 'bg-yellow-100 text-yellow-700',\n    Advanced: 'bg-red-100 text-red-700',\n    Unknown: 'bg-gray-100 text-gray-700',\n  };\n  return colors[difficulty] || colors.Unknown;\n};\n\nexport const getDifficultyColorWithBorder = (difficulty: Difficulty) => {\n  switch (difficulty) {\n    case 'Beginner':\n      return 'bg-emerald-100 text-emerald-700 border-emerald-200';\n    case 'Intermediate':\n      return 'bg-amber-100 text-amber-700 border-amber-200';\n    case 'Advanced':\n      return 'bg-red-100 text-red-700 border-red-200';\n    case 'Unknown':\n      return 'bg-gray-100 text-gray-700 border-gray-200';\n    default:\n      return 'bg-gray-100 text-gray-700 border-gray-200';\n  }\n};\n\nexport const getCategoryColor = (category: string) => {\n  const colors = {\n    Strength: 'bg-indigo-100 text-indigo-700',\n    Cardio: 'bg-green-100 text-green-700',\n    Flexibility: 'bg-purple-100 text-purple-700',\n    Balance: 'bg-yellow-100 text-yellow-700',\n  };\n  return colors[category as keyof typeof colors] || colors.Strength;\n};\n\nexport const getEffectiveExercise = (\n  exercise: Exercise,\n  selectedVariant?: ExerciseVariant\n): ExerciseVariant => {\n  if (!selectedVariant) {\n    // Return the main variant if no variant is selected\n    const mainVariant = exercise.variants.find(\n      v => v.id === exercise.mainVariantId\n    );\n    if (!mainVariant) {\n      throw new Error(`No main variant found for exercise ${exercise.id}`);\n    }\n    return mainVariant;\n  }\n\n  return selectedVariant;\n};\n\nexport const createVariantExercise = (\n  exercise: Exercise,\n  variant: ExerciseVariant\n): ExerciseVariant => {\n  return variant;\n};\n"],"names":[],"mappings":";;;;;;;AAEO,MAAM,qBAAqB,CAAC;IACjC,MAAM,SAAS;QACb,UAAU;QACV,cAAc;QACd,UAAU;QACV,SAAS;IACX;IACA,OAAO,MAAM,CAAC,WAAW,IAAI,OAAO,OAAO;AAC7C;AAEO,MAAM,+BAA+B,CAAC;IAC3C,OAAQ;QACN,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT;YACE,OAAO;IACX;AACF;AAEO,MAAM,mBAAmB,CAAC;IAC/B,MAAM,SAAS;QACb,UAAU;QACV,QAAQ;QACR,aAAa;QACb,SAAS;IACX;IACA,OAAO,MAAM,CAAC,SAAgC,IAAI,OAAO,QAAQ;AACnE;AAEO,MAAM,uBAAuB,CAClC,UACA;IAEA,IAAI,CAAC,iBAAiB;QACpB,oDAAoD;QACpD,MAAM,cAAc,SAAS,QAAQ,CAAC,IAAI,CACxC,CAAA,IAAK,EAAE,EAAE,KAAK,SAAS,aAAa;QAEtC,IAAI,CAAC,aAAa;YAChB,MAAM,IAAI,MAAM,AAAC,sCAAiD,OAAZ,SAAS,EAAE;QACnE;QACA,OAAO;IACT;IAEA,OAAO;AACT;AAEO,MAAM,wBAAwB,CACnC,UACA;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 1149, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/components/shared/CategoryBadge.tsx"],"sourcesContent":["import { getCategoryColor } from '../../utils/exerciseUtils';\n\nimport { Badge } from '@/components/ui/badge';\n\ninterface CategoryBadgeProps {\n  category: string;\n  variant?: 'default' | 'outline';\n  className?: string;\n}\n\nexport const CategoryBadge = ({\n  category,\n  variant = 'outline',\n  className = '',\n}: CategoryBadgeProps) => {\n  return (\n    <Badge\n      variant={variant}\n      className={`text-xs ${getCategoryColor(category)} ${className}`}\n    >\n      {category}\n    </Badge>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAQO,MAAM,gBAAgB;QAAC,EAC5B,QAAQ,EACR,UAAU,SAAS,EACnB,YAAY,EAAE,EACK;IACnB,qBACE,qYAAC,oIAAA,CAAA,QAAK;QACJ,SAAS;QACT,WAAW,AAAC,WAAwC,OAA9B,CAAA,GAAA,yJAAA,CAAA,mBAAgB,AAAD,EAAE,WAAU,KAAa,OAAV;kBAEnD;;;;;;AAGP;KAba","debugId":null}},
    {"offset": {"line": 1182, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/components/shared/DifficultyBadge.tsx"],"sourcesContent":["import { Zap, Award, Users, Info } from 'lucide-react';\n\nimport { Difficulty } from '../../types';\nimport { getDifficultyColorWithBorder } from '../../utils/exerciseUtils';\n\nimport { Badge } from '@/components/ui/badge';\n\ninterface DifficultyBadgeProps {\n  difficulty: Difficulty;\n  showIcon?: boolean;\n  className?: string;\n}\n\nexport const DifficultyBadge = ({\n  difficulty,\n  showIcon = true,\n  className = '',\n}: DifficultyBadgeProps) => {\n  const getDifficultyIcon = (difficulty: Difficulty) => {\n    switch (difficulty) {\n      case 'Beginner':\n        return <Zap className=\"w-3 h-3\" />;\n      case 'Intermediate':\n        return <Award className=\"w-3 h-3\" />;\n      case 'Advanced':\n        return <Users className=\"w-3 h-3\" />;\n      case 'Unknown':\n        return <Info className=\"w-3 h-3\" />;\n      default:\n        return <Info className=\"w-3 h-3\" />;\n    }\n  };\n\n  return (\n    <Badge\n      className={`${getDifficultyColorWithBorder(\n        difficulty\n      )} text-xs border ${className}`}\n    >\n      {showIcon && getDifficultyIcon(difficulty)}\n      <span className={showIcon ? 'ml-1' : ''}>{difficulty}</span>\n    </Badge>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;;;;;AAQO,MAAM,kBAAkB;QAAC,EAC9B,UAAU,EACV,WAAW,IAAI,EACf,YAAY,EAAE,EACO;IACrB,MAAM,oBAAoB,CAAC;QACzB,OAAQ;YACN,KAAK;gBACH,qBAAO,qYAAC,uRAAA,CAAA,MAAG;oBAAC,WAAU;;;;;;YACxB,KAAK;gBACH,qBAAO,qYAAC,2RAAA,CAAA,QAAK;oBAAC,WAAU;;;;;;YAC1B,KAAK;gBACH,qBAAO,qYAAC,2RAAA,CAAA,QAAK;oBAAC,WAAU;;;;;;YAC1B,KAAK;gBACH,qBAAO,qYAAC,yRAAA,CAAA,OAAI;oBAAC,WAAU;;;;;;YACzB;gBACE,qBAAO,qYAAC,yRAAA,CAAA,OAAI;oBAAC,WAAU;;;;;;QAC3B;IACF;IAEA,qBACE,qYAAC,oIAAA,CAAA,QAAK;QACJ,WAAW,AAAC,GAEQ,OAFN,CAAA,GAAA,yJAAA,CAAA,+BAA4B,AAAD,EACvC,aACA,oBAA4B,OAAV;;YAEnB,YAAY,kBAAkB;0BAC/B,qYAAC;gBAAK,WAAW,WAAW,SAAS;0BAAK;;;;;;;;;;;;AAGhD;KA9Ba","debugId":null}},
    {"offset": {"line": 1273, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/components/shared/ExerciseCard.tsx"],"sourcesContent":["import { Heart, Star, ChevronRight } from 'lucide-react';\nimport { useState } from 'react';\n\nimport { useFavoriteManagement } from '../../hooks/useExercises';\nimport { Exercise, DIFFICULTY } from '../../types';\n\nimport { CategoryBadge } from './CategoryBadge';\nimport { DifficultyBadge } from './DifficultyBadge';\n\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { useAuth } from '@/features/auth/context/AuthContext';\n\ninterface ExerciseCardProps {\n  exercise: Exercise;\n  onClick?: () => void;\n  onFavoriteToggle?: () => void;\n  showChevron?: boolean;\n  isSelected?: boolean;\n  className?: string;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nexport const ExerciseCard = ({\n  exercise,\n  onClick,\n  onFavoriteToggle,\n  showChevron = false,\n  isSelected = false,\n  className = '',\n  size = 'md',\n}: ExerciseCardProps) => {\n  const [isFavorite, setIsFavorite] = useState(exercise.isFavorite);\n  const [isUpdatingFavorite, setIsUpdatingFavorite] = useState(false);\n  const { addToFavorites, removeFromFavorites } = useFavoriteManagement();\n  const { userId } = useAuth();\n\n  // Helper function to get the main variant\n  const getMainVariant = () => {\n    return exercise.variants.find(v => v.id === exercise.mainVariantId);\n  };\n\n  const mainVariant = getMainVariant();\n\n  const handleFavoriteClick = async (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    if (!userId) {\n      // If no userId, just call the callback if provided\n      onFavoriteToggle?.();\n      return;\n    }\n\n    if (isUpdatingFavorite) return;\n\n    setIsUpdatingFavorite(true);\n    try {\n      if (isFavorite) {\n        await removeFromFavorites(userId, exercise.id);\n        setIsFavorite(false);\n      } else {\n        await addToFavorites(userId, exercise.id);\n        setIsFavorite(true);\n      }\n      onFavoriteToggle?.();\n    } catch {\n      // Revert the state on error\n      setIsFavorite(exercise.isFavorite);\n    } finally {\n      setIsUpdatingFavorite(false);\n    }\n  };\n\n  const imageHeights = {\n    sm: 'h-24',\n    md: 'h-32',\n    lg: 'h-40',\n  };\n\n  const iconSizes = {\n    sm: 'text-2xl',\n    md: 'text-3xl',\n    lg: 'text-4xl',\n  };\n\n  const paddingSizes = {\n    sm: 'p-3',\n    md: 'p-4',\n    lg: 'p-4',\n  };\n\n  const sizeClasses = {\n    sm: 'w-full max-w-xs',\n    md: 'w-full max-w-sm',\n    lg: 'w-full max-w-md',\n  };\n\n  return (\n    <Card\n      className={`cursor-pointer hover:shadow-md transition-shadow ${\n        sizeClasses[size]\n      } mx-auto ${\n        isSelected\n          ? 'border-primary shadow-lg ring-1 ring-primary/20'\n          : 'border-gray-200 hover:border-gray-300'\n      } ${className}`}\n      onClick={onClick}\n    >\n      {/* Exercise Image/Icon */}\n      <div className={`bg-gray-100 ${imageHeights[size]} relative`}>\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className={iconSizes[size]}>{exercise.icon}</div>\n        </div>\n\n        {/* Overlay Info */}\n        <div className=\"absolute bottom-3 left-3 right-3\">\n          <div className=\"flex items-center justify-between\">\n            <DifficultyBadge\n              difficulty={mainVariant?.difficulty || DIFFICULTY.UNKNOWN}\n            />\n            <div className=\"flex items-center gap-2\">\n              {exercise.isPopular && (\n                <div className=\"bg-white/90 backdrop-blur-sm rounded-full px-2 py-1 flex items-center gap-1\">\n                  <Star className=\"w-3 h-3 text-yellow-500 fill-yellow-500\" />\n                  <span className=\"text-xs text-gray-700\">Popular</span>\n                </div>\n              )}\n              {exercise.isNew && (\n                <div className=\"bg-green-500 rounded-full px-2 py-1\">\n                  <span className=\"text-xs text-white\">New</span>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {exercise.rating && size !== 'sm' && (\n          <div className=\"absolute top-3 right-3 flex items-center gap-1 bg-white px-2 py-1 rounded-full text-sm\">\n            <Star className=\"w-3 h-3 text-yellow-500 fill-yellow-500\" />\n            <span className=\"text-gray-600\">{exercise.rating}</span>\n          </div>\n        )}\n      </div>\n\n      {/* Exercise Info */}\n      <div className={paddingSizes[size]}>\n        <div className=\"flex items-start justify-between mb-2\">\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"font-semibold text-gray-800 mb-2 truncate\">\n              {exercise.name}\n            </h3>\n            <div className=\"flex items-center text-sm text-gray-600 mb-3\">\n              <span className=\"truncate\">\n                {mainVariant?.muscleGroups.join(', ') ||\n                  'Multiple muscle groups'}\n              </span>\n            </div>\n          </div>\n          {showChevron && (\n            <ChevronRight\n              className={`w-4 h-4 text-gray-400 group-hover:text-primary transition-all ${\n                isSelected ? 'rotate-90' : ''\n              }`}\n            />\n          )}\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n            <CategoryBadge category={exercise.category} />\n            {exercise.variants && exercise.variants.length > 0 && (\n              <span className=\"text-xs text-gray-500 whitespace-nowrap\">\n                {exercise.variants.length} variants\n              </span>\n            )}\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleFavoriteClick}\n            disabled={isUpdatingFavorite}\n            className=\"flex-shrink-0 ml-2\"\n          >\n            <Heart\n              className={`w-4 h-4 ${\n                isFavorite ? 'text-red-500 fill-red-500' : 'text-gray-400'\n              } ${isUpdatingFavorite ? 'animate-pulse' : ''}`}\n            />\n          </Button>\n        </div>\n      </div>\n    </Card>\n  );\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1616, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/components/ExerciseSelectionModal/SearchAndFilters.tsx"],"sourcesContent":["import { Filter, Search, X } from 'lucide-react';\nimport { useState } from 'react';\n\nimport { useExerciseFilters } from '../../hooks/useExerciseFilters';\nimport { exerciseCategories } from '../../types';\nimport { DIFFICULTY, EQUIPMENT, MUSCLE_GROUP } from '../../types/constants';\n\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { Separator } from '@/components/ui/separator';\n\ninterface SearchAndFiltersProps {\n  searchTerm: string;\n  onSearchChange: (value: string) => void;\n  selectedCategory: string;\n  onCategoryChange: (category: string) => void;\n}\n\nexport const SearchAndFilters = ({\n  searchTerm,\n  onSearchChange,\n  selectedCategory,\n  onCategoryChange,\n}: SearchAndFiltersProps) => {\n  const { filters, handleFilterChange, clearFilters, getActiveFilterCount } =\n    useExerciseFilters();\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\n\n  const activeFilterCount = getActiveFilterCount();\n\n  return (\n    <div className=\"p-6 bg-white border-b border-gray-100 flex-shrink-0\">\n      <div className=\"space-y-4\">\n        {/* Search Bar */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n          <Input\n            placeholder=\"Search exercises...\"\n            value={searchTerm}\n            onChange={e => onSearchChange(e.target.value)}\n            className=\"pl-10 h-11 bg-gray-50 border-gray-200 focus:bg-white transition-colors\"\n          />\n        </div>\n\n        {/* Category Filters */}\n        <div className=\"flex flex-wrap gap-2\">\n          {exerciseCategories.map(category => (\n            <Button\n              key={category}\n              variant={selectedCategory === category ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => onCategoryChange(category)}\n              className={`h-8 px-4 rounded-full transition-all ${\n                selectedCategory === category\n                  ? 'bg-primary text-white shadow-sm'\n                  : 'bg-white border-gray-200 text-gray-600 hover:bg-gray-50'\n              }`}\n            >\n              {category}\n            </Button>\n          ))}\n        </div>\n\n        {/* Advanced Filters */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Popover open={isFilterOpen} onOpenChange={setIsFilterOpen}>\n              <PopoverTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className={`h-8 px-3 gap-2 ${\n                    activeFilterCount > 0\n                      ? 'border-primary text-primary bg-primary/5'\n                      : 'border-gray-200 text-gray-600'\n                  }`}\n                >\n                  <Filter className=\"w-3 h-3\" />\n                  Filters\n                  {activeFilterCount > 0 && (\n                    <Badge\n                      variant=\"secondary\"\n                      className=\"ml-1 h-5 px-1.5 text-xs\"\n                    >\n                      {activeFilterCount}\n                    </Badge>\n                  )}\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-80 p-4\" align=\"start\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"font-semibold text-gray-900\">Filters</h4>\n                    {activeFilterCount > 0 && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={clearFilters}\n                        className=\"h-6 px-2 text-xs text-gray-500 hover:text-gray-700\"\n                      >\n                        Clear all\n                      </Button>\n                    )}\n                  </div>\n\n                  {/* Difficulty Filter */}\n                  <div>\n                    <Label className=\"font-medium text-sm text-gray-700 mb-2 block\">\n                      Difficulty\n                    </Label>\n                    <div className=\"space-y-2\">\n                      {Object.values(DIFFICULTY).map(difficulty => (\n                        <div\n                          key={difficulty}\n                          className=\"flex items-center space-x-2\"\n                        >\n                          <Checkbox\n                            id={`difficulty-${difficulty}`}\n                            checked={filters.difficulties.includes(difficulty)}\n                            onCheckedChange={() =>\n                              handleFilterChange('difficulties', difficulty)\n                            }\n                          />\n                          <Label\n                            htmlFor={`difficulty-${difficulty}`}\n                            className=\"text-sm text-gray-600\"\n                          >\n                            {difficulty}\n                          </Label>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  {/* Muscle Groups Filter */}\n                  <div>\n                    <Label className=\"font-medium text-sm text-gray-700 mb-2 block\">\n                      Muscle Groups\n                    </Label>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      {Object.values(MUSCLE_GROUP).map(muscle => (\n                        <div\n                          key={muscle}\n                          className=\"flex items-center space-x-2\"\n                        >\n                          <Checkbox\n                            id={`muscle-${muscle}`}\n                            checked={filters.muscleGroups.includes(muscle)}\n                            onCheckedChange={() =>\n                              handleFilterChange('muscleGroups', muscle)\n                            }\n                          />\n                          <Label\n                            htmlFor={`muscle-${muscle}`}\n                            className=\"text-sm text-gray-600\"\n                          >\n                            {muscle}\n                          </Label>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  {/* Equipment Filter */}\n                  <div>\n                    <Label className=\"font-medium text-sm text-gray-700 mb-2 block\">\n                      Equipment\n                    </Label>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      {Object.values(EQUIPMENT).map(equipment => (\n                        <div\n                          key={equipment}\n                          className=\"flex items-center space-x-2\"\n                        >\n                          <Checkbox\n                            id={`equipment-${equipment}`}\n                            checked={filters.equipment.includes(equipment)}\n                            onCheckedChange={() =>\n                              handleFilterChange('equipment', equipment)\n                            }\n                          />\n                          <Label\n                            htmlFor={`equipment-${equipment}`}\n                            className=\"text-sm text-gray-600\"\n                          >\n                            {equipment}\n                          </Label>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </PopoverContent>\n            </Popover>\n\n            {/* Active Filter Badges */}\n            {activeFilterCount > 0 && (\n              <div className=\"flex flex-wrap gap-1\">\n                {filters.difficulties.map(difficulty => (\n                  <Badge\n                    key={`difficulty-${difficulty}`}\n                    variant=\"secondary\"\n                    className=\"h-6 px-2 text-xs bg-blue-50 text-blue-700 border-blue-200\"\n                  >\n                    {difficulty}\n                    <button\n                      onClick={() =>\n                        handleFilterChange('difficulties', difficulty)\n                      }\n                      className=\"ml-1 hover:text-blue-900\"\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </button>\n                  </Badge>\n                ))}\n                {filters.muscleGroups.map(muscle => (\n                  <Badge\n                    key={`muscle-${muscle}`}\n                    variant=\"secondary\"\n                    className=\"h-6 px-2 text-xs bg-green-50 text-green-700 border-green-200\"\n                  >\n                    {muscle}\n                    <button\n                      onClick={() => handleFilterChange('muscleGroups', muscle)}\n                      className=\"ml-1 hover:text-green-900\"\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </button>\n                  </Badge>\n                ))}\n                {filters.equipment.map(equipment => (\n                  <Badge\n                    key={`equipment-${equipment}`}\n                    variant=\"secondary\"\n                    className=\"h-6 px-2 text-xs bg-purple-50 text-purple-700 border-purple-200\"\n                  >\n                    {equipment}\n                    <button\n                      onClick={() => handleFilterChange('equipment', equipment)}\n                      className=\"ml-1 hover:text-purple-900\"\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </button>\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2086, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/components/ExerciseSelectionModal/ExerciseLibrary.tsx"],"sourcesContent":["import { Info } from 'lucide-react';\n\nimport { useExerciseFilters } from '../../hooks/useExerciseFilters';\nimport { useExerciseSearch } from '../../hooks/useExercises';\nimport { Exercise, Category } from '../../types';\nimport { filterExercises } from '../../utils/filterUtils';\nimport { ExerciseCard } from '../shared/ExerciseCard';\n\nimport { SearchAndFilters } from './SearchAndFilters';\n\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface ExerciseLibraryProps {\n  exercises: Exercise[];\n  searchTerm: string;\n  selectedCategory: string;\n  selectedExercise: Exercise | null;\n  onExerciseSelect: (exercise: Exercise) => void;\n  onSearchChange: (value: string) => void;\n  onCategoryChange: (category: string) => void;\n}\n\nexport const ExerciseLibrary = ({\n  exercises,\n  searchTerm,\n  selectedCategory,\n  selectedExercise,\n  onExerciseSelect,\n  onSearchChange,\n  onCategoryChange,\n}: ExerciseLibraryProps) => {\n  const { filters } = useExerciseFilters();\n\n  // Use service-based search when there are search parameters\n  const hasSearchParams =\n    searchTerm ||\n    filters.difficulties.length > 0 ||\n    filters.muscleGroups.length > 0 ||\n    filters.equipment.length > 0;\n\n  const { exercises: searchResults, isLoading: isSearching } =\n    useExerciseSearch({\n      searchTerm: searchTerm || undefined,\n      category:\n        selectedCategory === 'All' ? undefined : (selectedCategory as Category),\n      difficulties: filters.difficulties,\n      equipment: filters.equipment,\n      muscleGroups: filters.muscleGroups,\n    });\n\n  // Use search results if we have search parameters, otherwise use the passed exercises\n  const displayExercises = hasSearchParams ? searchResults : exercises;\n\n  // Apply client-side filtering for category and additional filters\n  const filteredExercises = filterExercises(\n    displayExercises,\n    '', // Search term is already handled by service\n    selectedCategory,\n    hasSearchParams\n      ? { difficulties: [], muscleGroups: [], equipment: [] }\n      : filters // Don't double-filter\n  );\n\n  return (\n    <div className=\"w-2/3 border-r border-gray-100 flex flex-col bg-gray-50/50 overflow-hidden\">\n      {/* Search and Filters */}\n      <SearchAndFilters\n        searchTerm={searchTerm}\n        onSearchChange={onSearchChange}\n        selectedCategory={selectedCategory}\n        onCategoryChange={onCategoryChange}\n      />\n\n      {/* Exercise Grid - Scrollable */}\n      <div className=\"flex-1 overflow-hidden\">\n        <ScrollArea className=\"h-full w-full\">\n          <div className=\"p-6\">\n            {isSearching ? (\n              <div className=\"animate-pulse\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-4\">\n                  {Array.from({ length: 8 }).map((_, i) => (\n                    <div key={i} className=\"h-48 bg-gray-200 rounded\"></div>\n                  ))}\n                </div>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-4\">\n                {filteredExercises.map(exercise => (\n                  <ExerciseCard\n                    key={exercise.id}\n                    exercise={exercise}\n                    onClick={() => onExerciseSelect(exercise)}\n                    isSelected={selectedExercise?.id === exercise.id}\n                    showChevron={true}\n                  />\n                ))}\n              </div>\n            )}\n\n            {!isSearching && filteredExercises.length === 0 && (\n              <div className=\"text-center py-12\">\n                <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Info className=\"w-8 h-8 text-gray-400\" />\n                </div>\n                <h3 className=\"font-medium text-gray-900 mb-2\">\n                  No exercises found\n                </h3>\n                <p className=\"text-gray-500\">\n                  Try adjusting your search or category filter\n                </p>\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n      </div>\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;;;;;;;;;;AAYO,MAAM,kBAAkB;QAAC,EAC9B,SAAS,EACT,UAAU,EACV,gBAAgB,EAChB,gBAAgB,EAChB,gBAAgB,EAChB,cAAc,EACd,gBAAgB,EACK;;IACrB,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,8JAAA,CAAA,qBAAkB,AAAD;IAErC,4DAA4D;IAC5D,MAAM,kBACJ,cACA,QAAQ,YAAY,CAAC,MAAM,GAAG,KAC9B,QAAQ,YAAY,CAAC,MAAM,GAAG,KAC9B,QAAQ,SAAS,CAAC,MAAM,GAAG;IAE7B,MAAM,EAAE,WAAW,aAAa,EAAE,WAAW,WAAW,EAAE,GACxD,CAAA,GAAA,wJAAA,CAAA,oBAAiB,AAAD,EAAE;QAChB,YAAY,cAAc;QAC1B,UACE,qBAAqB,QAAQ,YAAa;QAC5C,cAAc,QAAQ,YAAY;QAClC,WAAW,QAAQ,SAAS;QAC5B,cAAc,QAAQ,YAAY;IACpC;IAEF,sFAAsF;IACtF,MAAM,mBAAmB,kBAAkB,gBAAgB;IAE3D,kEAAkE;IAClE,MAAM,oBAAoB,CAAA,GAAA,uJAAA,CAAA,kBAAe,AAAD,EACtC,kBACA,IACA,kBACA,kBACI;QAAE,cAAc,EAAE;QAAE,cAAc,EAAE;QAAE,WAAW,EAAE;IAAC,IACpD,QAAQ,sBAAsB;;IAGpC,qBACE,qYAAC;QAAI,WAAU;;0BAEb,qYAAC,4LAAA,CAAA,mBAAgB;gBACf,YAAY;gBACZ,gBAAgB;gBAChB,kBAAkB;gBAClB,kBAAkB;;;;;;0BAIpB,qYAAC;gBAAI,WAAU;0BACb,cAAA,qYAAC,6IAAA,CAAA,aAAU;oBAAC,WAAU;8BACpB,cAAA,qYAAC;wBAAI,WAAU;;4BACZ,4BACC,qYAAC;gCAAI,WAAU;0CACb,cAAA,qYAAC;oCAAI,WAAU;8CACZ,MAAM,IAAI,CAAC;wCAAE,QAAQ;oCAAE,GAAG,GAAG,CAAC,CAAC,GAAG,kBACjC,qYAAC;4CAAY,WAAU;2CAAb;;;;;;;;;;;;;;yFAKhB,qYAAC;gCAAI,WAAU;0CACZ,kBAAkB,GAAG,CAAC,CAAA,yBACrB,qYAAC,wKAAA,CAAA,eAAY;wCAEX,UAAU;wCACV,SAAS,IAAM,iBAAiB;wCAChC,YAAY,CAAA,6BAAA,uCAAA,iBAAkB,EAAE,MAAK,SAAS,EAAE;wCAChD,aAAa;uCAJR,SAAS,EAAE;;;;;;;;;;4BAUvB,CAAC,eAAe,kBAAkB,MAAM,KAAK,mBAC5C,qYAAC;gCAAI,WAAU;;kDACb,qYAAC;wCAAI,WAAU;kDACb,cAAA,qYAAC,yRAAA,CAAA,OAAI;4CAAC,WAAU;;;;;;;;;;;kDAElB,qYAAC;wCAAG,WAAU;kDAAiC;;;;;;kDAG/C,qYAAC;wCAAE,WAAU;kDAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAU7C;GA/Fa;;QASS,8JAAA,CAAA,qBAAkB;QAUpC,wJAAA,CAAA,oBAAiB;;;KAnBR","debugId":null}},
    {"offset": {"line": 2267, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/components/shared/EquipmentTags.tsx"],"sourcesContent":["import { Badge } from '@/components/ui/badge';\n\ninterface EquipmentTagsProps {\n  equipment: string[];\n  className?: string;\n}\n\nexport const EquipmentTags = ({\n  equipment,\n  className = '',\n}: EquipmentTagsProps) => {\n  if (!equipment || equipment.length === 0) return null;\n\n  return (\n    <div className={`flex flex-wrap gap-2 ${className}`}>\n      {equipment.map(item => (\n        <Badge key={item} variant=\"outline\" className=\"bg-gray-50\">\n          {item}\n        </Badge>\n      ))}\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;;;AAOO,MAAM,gBAAgB;QAAC,EAC5B,SAAS,EACT,YAAY,EAAE,EACK;IACnB,IAAI,CAAC,aAAa,UAAU,MAAM,KAAK,GAAG,OAAO;IAEjD,qBACE,qYAAC;QAAI,WAAW,AAAC,wBAAiC,OAAV;kBACrC,UAAU,GAAG,CAAC,CAAA,qBACb,qYAAC,oIAAA,CAAA,QAAK;gBAAY,SAAQ;gBAAU,WAAU;0BAC3C;eADS;;;;;;;;;;AAMpB;KAfa","debugId":null}},
    {"offset": {"line": 2306, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/components/ExerciseSelectionModal/VariantSelector.tsx"],"sourcesContent":["import { Exercise, ExerciseVariant } from '../../types';\n\nimport { Badge } from '@/components/ui/badge';\n\ninterface VariantSelectorProps {\n  exercise: Exercise;\n  selectedVariant: ExerciseVariant | null;\n  onVariantSelect: (variant: ExerciseVariant | null) => void;\n}\n\nexport const VariantSelector = ({\n  exercise,\n  selectedVariant,\n  onVariantSelect,\n}: VariantSelectorProps) => {\n  if (!exercise.variants || exercise.variants.length === 0) {\n    return null;\n  }\n\n  return (\n    <div>\n      <h4 className=\"font-medium text-gray-900 mb-3\">Variants</h4>\n      <div className=\"space-y-3\">\n        {exercise.variants.map(variant => (\n          <div\n            key={variant.id}\n            className={`p-3 border rounded-lg cursor-pointer transition-colors hover:bg-gray-50 ${\n              selectedVariant?.id === variant.id\n                ? 'border-primary bg-primary/5'\n                : 'border-gray-200'\n            }`}\n            onClick={() =>\n              onVariantSelect(\n                selectedVariant?.id === variant.id ? null : variant\n              )\n            }\n          >\n            <div className=\"flex items-start justify-between mb-1\">\n              <h5 className=\"font-medium text-gray-900 text-sm\">\n                {variant.name}\n              </h5>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {variant.focus}\n              </Badge>\n            </div>\n            <p className=\"text-xs text-gray-600\">{variant.description}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;AAEA;;;AAQO,MAAM,kBAAkB;QAAC,EAC9B,QAAQ,EACR,eAAe,EACf,eAAe,EACM;IACrB,IAAI,CAAC,SAAS,QAAQ,IAAI,SAAS,QAAQ,CAAC,MAAM,KAAK,GAAG;QACxD,OAAO;IACT;IAEA,qBACE,qYAAC;;0BACC,qYAAC;gBAAG,WAAU;0BAAiC;;;;;;0BAC/C,qYAAC;gBAAI,WAAU;0BACZ,SAAS,QAAQ,CAAC,GAAG,CAAC,CAAA,wBACrB,qYAAC;wBAEC,WAAW,AAAC,2EAIX,OAHC,CAAA,4BAAA,sCAAA,gBAAiB,EAAE,MAAK,QAAQ,EAAE,GAC9B,gCACA;wBAEN,SAAS,IACP,gBACE,CAAA,4BAAA,sCAAA,gBAAiB,EAAE,MAAK,QAAQ,EAAE,GAAG,OAAO;;0CAIhD,qYAAC;gCAAI,WAAU;;kDACb,qYAAC;wCAAG,WAAU;kDACX,QAAQ,IAAI;;;;;;kDAEf,qYAAC,oIAAA,CAAA,QAAK;wCAAC,SAAQ;wCAAU,WAAU;kDAChC,QAAQ,KAAK;;;;;;;;;;;;0CAGlB,qYAAC;gCAAE,WAAU;0CAAyB,QAAQ,WAAW;;;;;;;uBApBpD,QAAQ,EAAE;;;;;;;;;;;;;;;;AA0B3B;KAzCa","debugId":null}},
    {"offset": {"line": 2398, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/components/ExerciseSelectionModal/ExercisePreview.tsx"],"sourcesContent":["import { Star, Info, ExternalLink } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\n\nimport { Exercise, ExerciseVariant } from '../../types';\nimport { getEffectiveExercise } from '../../utils/exerciseUtils';\nimport { CategoryBadge } from '../shared/CategoryBadge';\nimport { DifficultyBadge } from '../shared/DifficultyBadge';\nimport { EquipmentTags } from '../shared/EquipmentTags';\n\nimport { VariantSelector } from './VariantSelector';\n\nimport { Button } from '@/components/ui/button';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface ExercisePreviewProps {\n  exercise: Exercise | null;\n  selectedVariant: ExerciseVariant | null;\n  onVariantSelect: (variant: ExerciseVariant | null) => void;\n  onSelectExercise: () => void;\n  onClose: () => void;\n}\n\nexport const ExercisePreview = ({\n  exercise,\n  selectedVariant,\n  onVariantSelect,\n  onSelectExercise,\n  onClose,\n}: ExercisePreviewProps) => {\n  const router = useRouter();\n\n  const handleViewDetails = () => {\n    if (exercise) {\n      router.push(`/exercises/${exercise.id}`);\n      onClose();\n    }\n  };\n  if (!exercise) {\n    return (\n      <div className=\"w-1/3 flex flex-col bg-white overflow-hidden\">\n        <div className=\"flex-1 flex items-center justify-center text-gray-500 p-6\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Info className=\"w-8 h-8 text-gray-400\" />\n            </div>\n            <h3 className=\"font-medium text-gray-900 mb-2\">\n              Select an Exercise\n            </h3>\n            <p className=\"text-sm text-gray-500 max-w-sm\">\n              Choose an exercise from the library to view detailed instructions\n              and add it to your workout\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const effectiveExercise = getEffectiveExercise(\n    exercise,\n    selectedVariant || undefined\n  );\n\n  return (\n    <div className=\"w-1/3 flex flex-col bg-white overflow-hidden\">\n      {/* Exercise Header */}\n      <div className=\"p-6 border-b border-gray-100 flex-shrink-0\">\n        <div className=\"flex items-start justify-between mb-4\">\n          <div className=\"flex-1\">\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\n              {effectiveExercise.name}\n            </h2>\n            <div className=\"flex items-center gap-3\">\n              <DifficultyBadge difficulty={effectiveExercise.difficulty} />\n              <CategoryBadge category={exercise.category} />\n              {exercise.rating && (\n                <div className=\"flex items-center gap-1\">\n                  <Star className=\"w-4 h-4 text-yellow-500 fill-yellow-500\" />\n                  <span className=\"text-sm text-gray-600\">\n                    {exercise.rating}\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        <p className=\"text-gray-600 leading-relaxed\">\n          {effectiveExercise.description ||\n            `A ${exercise.category.toLowerCase()} exercise targeting ${effectiveExercise.muscleGroups\n              .join(', ')\n              .toLowerCase()}.`}\n        </p>\n      </div>\n\n      {/* Exercise Details - Scrollable */}\n      <div className=\"flex-1 overflow-hidden\">\n        <ScrollArea className=\"h-full w-full\">\n          <div className=\"p-6\">\n            <div className=\"space-y-6\">\n              {/* Target Muscles */}\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-3\">\n                  Target Muscles\n                </h4>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {effectiveExercise.muscleGroups.map(muscle => (\n                    <div\n                      key={muscle}\n                      className=\"flex items-center justify-center px-3 py-2 bg-blue-50 text-blue-700 rounded-lg text-sm font-medium\"\n                    >\n                      {muscle}\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Equipment */}\n              {effectiveExercise.equipment && (\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-3\">Equipment</h4>\n                  <EquipmentTags equipment={effectiveExercise.equipment} />\n                </div>\n              )}\n\n              {/* Instructions */}\n              {effectiveExercise.instructions && (\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-3\">\n                    Instructions\n                  </h4>\n                  <ol className=\"space-y-3\">\n                    {effectiveExercise.instructions.map((step, index) => (\n                      <li key={index} className=\"flex gap-3\">\n                        <span className=\"flex-shrink-0 w-6 h-6 bg-primary text-white rounded-full flex items-center justify-center text-sm font-medium\">\n                          {index + 1}\n                        </span>\n                        <span className=\"text-gray-700 text-sm leading-relaxed\">\n                          {step}\n                        </span>\n                      </li>\n                    ))}\n                  </ol>\n                </div>\n              )}\n\n              {/* Variants */}\n              <VariantSelector\n                exercise={exercise}\n                selectedVariant={selectedVariant}\n                onVariantSelect={onVariantSelect}\n              />\n            </div>\n          </div>\n        </ScrollArea>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"p-6 border-t border-gray-100 bg-gray-50 flex-shrink-0\">\n        <div className=\"space-y-3\">\n          {selectedVariant && (\n            <div className=\"p-3 bg-primary/10 border border-primary/20 rounded-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-primary\">\n                    Selected Variant:\n                  </p>\n                  <p className=\"text-sm text-gray-700\">\n                    {selectedVariant.name}\n                  </p>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => onVariantSelect(null)}\n                  className=\"text-gray-500\"\n                >\n                  Clear\n                </Button>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex gap-3\">\n            <Button onClick={onClose} variant=\"outline\" className=\"flex-1\">\n              Cancel\n            </Button>\n            <Button\n              onClick={handleViewDetails}\n              variant=\"outline\"\n              className=\"flex-1\"\n            >\n              <ExternalLink className=\"w-4 h-4 mr-2\" />\n              View Details\n            </Button>\n            <Button\n              onClick={onSelectExercise}\n              className=\"flex-1 bg-primary hover:bg-primary/90\"\n            >\n              Add Exercise\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2860, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/hooks/useExerciseSelection.ts"],"sourcesContent":["import { useState } from 'react';\n\nimport { Exercise, ExerciseVariant } from '../types';\n\nexport function useExerciseSelection() {\n  const [selectedExercise, setSelectedExercise] = useState<Exercise | null>(\n    null\n  );\n  const [selectedVariant, setSelectedVariant] =\n    useState<ExerciseVariant | null>(null);\n\n  const selectExercise = (exercise: Exercise) => {\n    setSelectedExercise(exercise);\n    // Auto-select main variant if it exists\n    if (exercise.mainVariantId && exercise.variants) {\n      const mainVariant = exercise.variants.find(\n        v => v.id === exercise.mainVariantId\n      );\n      setSelectedVariant(mainVariant || null);\n    } else {\n      setSelectedVariant(null);\n    }\n  };\n\n  const selectVariant = (variant: ExerciseVariant | null) => {\n    setSelectedVariant(variant);\n  };\n\n  const clearSelection = () => {\n    setSelectedExercise(null);\n    setSelectedVariant(null);\n  };\n\n  return {\n    selectedExercise,\n    selectedVariant,\n    selectExercise,\n    selectVariant,\n    clearSelection,\n  };\n}\n"],"names":[],"mappings":";;;AAAA;;;AAIO,SAAS;;IACd,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qWAAA,CAAA,WAAQ,AAAD,EACrD;IAEF,MAAM,CAAC,iBAAiB,mBAAmB,GACzC,CAAA,GAAA,qWAAA,CAAA,WAAQ,AAAD,EAA0B;IAEnC,MAAM,iBAAiB,CAAC;QACtB,oBAAoB;QACpB,wCAAwC;QACxC,IAAI,SAAS,aAAa,IAAI,SAAS,QAAQ,EAAE;YAC/C,MAAM,cAAc,SAAS,QAAQ,CAAC,IAAI,CACxC,CAAA,IAAK,EAAE,EAAE,KAAK,SAAS,aAAa;YAEtC,mBAAmB,eAAe;QACpC,OAAO;YACL,mBAAmB;QACrB;IACF;IAEA,MAAM,gBAAgB,CAAC;QACrB,mBAAmB;IACrB;IAEA,MAAM,iBAAiB;QACrB,oBAAoB;QACpB,mBAAmB;IACrB;IAEA,OAAO;QACL;QACA;QACA;QACA;QACA;IACF;AACF;GApCgB","debugId":null}},
    {"offset": {"line": 2905, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/ExerciseSelectionModal.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\n\nimport { ExerciseLibrary } from './components/ExerciseSelectionModal/ExerciseLibrary';\nimport { ExercisePreview } from './components/ExerciseSelectionModal/ExercisePreview';\nimport { ExerciseProvider } from './context/ExerciseContext';\nimport { useExercises } from './hooks/useExercises';\nimport { useExerciseSelection } from './hooks/useExerciseSelection';\nimport { Exercise, ExerciseVariant } from './types';\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\n\ninterface ExerciseSelectionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSelectExercise: (exercise: Exercise, variant?: ExerciseVariant) => void;\n}\n\nconst ExerciseSelectionModalContent = ({\n  isOpen,\n  onClose,\n  onSelectExercise,\n}: ExerciseSelectionModalProps) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const {\n    selectedExercise,\n    selectedVariant,\n    selectExercise,\n    selectVariant,\n    clearSelection,\n  } = useExerciseSelection();\n  const [selectedCategory, setSelectedCategory] = useState('All');\n\n  const { exercises, isLoading, error } = useExercises();\n\n  const handleSearchChange = (value: string) => {\n    setSearchTerm(value);\n  };\n\n  const handleSelectExercise = (\n    exercise: Exercise,\n    variant?: ExerciseVariant\n  ) => {\n    // Always pass the original exercise with the selected variant\n    onSelectExercise(exercise, variant);\n    onClose();\n    clearSelection();\n  };\n\n  if (isLoading) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"!max-w-[95vw] !w-[95vw] h-[90vh] p-0 gap-0 overflow-hidden\">\n          <DialogHeader className=\"px-6 py-4 border-b border-gray-100 flex-shrink-0\">\n            <div>\n              <DialogTitle className=\"text-xl font-semibold text-gray-900\">\n                Add Exercise\n              </DialogTitle>\n              <DialogDescription className=\"text-sm text-gray-500 mt-1\">\n                Choose from our exercise library and find the perfect exercise\n                for your routine\n              </DialogDescription>\n            </div>\n          </DialogHeader>\n          <div className=\"flex h-full overflow-hidden\">\n            <div className=\"w-2/3 border-r border-gray-100 flex flex-col bg-gray-50/50 overflow-hidden\">\n              <div className=\"animate-pulse p-6\">\n                <div className=\"h-10 bg-gray-200 rounded mb-4\"></div>\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4\">\n                  {Array.from({ length: 6 }).map((_, i) => (\n                    <div key={i} className=\"h-48 bg-gray-200 rounded\"></div>\n                  ))}\n                </div>\n              </div>\n            </div>\n            <div className=\"w-1/3 flex flex-col bg-white overflow-hidden\">\n              <div className=\"animate-pulse p-6\">\n                <div className=\"h-8 bg-gray-200 rounded mb-4\"></div>\n                <div className=\"h-32 bg-gray-200 rounded mb-4\"></div>\n                <div className=\"h-24 bg-gray-200 rounded\"></div>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  if (error) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"!max-w-[95vw] !w-[95vw] h-[90vh] p-0 gap-0 overflow-hidden\">\n          <DialogHeader className=\"px-6 py-4 border-b border-gray-100 flex-shrink-0\">\n            <div>\n              <DialogTitle className=\"text-xl font-semibold text-gray-900\">\n                Add Exercise\n              </DialogTitle>\n              <DialogDescription className=\"text-sm text-gray-500 mt-1\">\n                Choose from our exercise library and find the perfect exercise\n                for your routine\n              </DialogDescription>\n            </div>\n          </DialogHeader>\n          <div className=\"flex h-full overflow-hidden\">\n            <div className=\"w-full flex items-center justify-center\">\n              <div className=\"text-center\">\n                <h3 className=\"font-medium text-gray-900 mb-2\">\n                  Failed to Load Exercises\n                </h3>\n                <p className=\"text-sm text-gray-500 mb-4\">\n                  There was an error loading the exercise library.\n                </p>\n                <button\n                  onClick={() => window.location.reload()}\n                  className=\"bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 text-sm\"\n                >\n                  Retry\n                </button>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"!max-w-[95vw] !w-[95vw] h-[90vh] p-0 gap-0 overflow-hidden\">\n        <DialogHeader className=\"px-6 py-4 border-b border-gray-100 flex-shrink-0\">\n          <div>\n            <DialogTitle className=\"text-xl font-semibold text-gray-900\">\n              Add Exercise\n            </DialogTitle>\n            <DialogDescription className=\"text-sm text-gray-500 mt-1\">\n              Choose from our exercise library and find the perfect exercise for\n              your routine\n            </DialogDescription>\n          </div>\n        </DialogHeader>\n\n        <div className=\"flex h-full overflow-hidden\">\n          {/* Exercise Library */}\n          <ExerciseLibrary\n            exercises={exercises}\n            searchTerm={searchTerm}\n            selectedCategory={selectedCategory}\n            selectedExercise={selectedExercise}\n            onExerciseSelect={selectExercise}\n            onSearchChange={handleSearchChange}\n            onCategoryChange={setSelectedCategory}\n          />\n\n          {/* Exercise Preview */}\n          <ExercisePreview\n            exercise={selectedExercise}\n            selectedVariant={selectedVariant}\n            onVariantSelect={selectVariant}\n            onSelectExercise={() =>\n              selectedExercise &&\n              handleSelectExercise(\n                selectedExercise,\n                selectedVariant || undefined\n              )\n            }\n            onClose={onClose}\n          />\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst ExerciseSelectionModal = (props: ExerciseSelectionModalProps) => {\n  return (\n    <ExerciseProvider>\n      <ExerciseSelectionModalContent {...props} />\n    </ExerciseProvider>\n  );\n};\n\nexport default ExerciseSelectionModal;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3293, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/routines/TrailRunningWorkout.tsx"],"sourcesContent":["import {\n  Mountain,\n  Clock,\n  Zap,\n  TrendingUp,\n  TrendingDown,\n  Navigation,\n  Repeat,\n  Play,\n  Pause,\n  Plus,\n  X,\n} from 'lucide-react';\nimport { useState, useEffect } from 'react';\n\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\n\ninterface TrailRunningWorkoutProps {\n  onSave: (workoutData: TrailRunningWorkoutData) => void;\n  onCancel: () => void;\n  initialData?: TrailRunningWorkoutData;\n  mode: 'create' | 'edit';\n}\n\nexport type IntervalType =\n  | 'run'\n  | 'uphill'\n  | 'downhill'\n  | 'sprint'\n  | 'recovery'\n  | 'rest'\n  | 'walk';\n\nexport interface TrailRunningInterval {\n  id: string;\n  name: string;\n  type: IntervalType;\n  distance?: number;\n  duration?: number;\n  intensityTarget?: IntensityTarget;\n  elevationChange?: number;\n}\n\nexport interface TrailRunningWorkoutData {\n  id: string;\n  name: string;\n  description: string;\n  type: 'trail-running';\n  difficulty: 'beginner' | 'intermediate' | 'advanced' | 'expert';\n  estimatedDuration: number; // calculated from sections\n  targetDistance: number; // calculated from sections\n  elevationGain: number; // calculated from sections\n  sections: TrailRunningSection[];\n}\n\nexport interface IntensityTarget {\n  type: 'heart-rate' | 'speed' | 'power' | 'cadence' | 'rpe';\n  value?: number; // For fixed values (cadence)\n  minValue?: number | string; // For ranges (heart rate, power zones) or pace strings (speed)\n  maxValue?: number | string; // For ranges (heart rate, power zones) or pace strings (speed)\n  zone?: string; // For power zones (Z1, Z2, etc.)\n  unit?: string; // Display unit (bpm, min/km, rpm, etc.)\n}\n\nexport interface TrailRunningSection {\n  id: string;\n  name: string;\n  type:\n    | 'warm-up'\n    | 'cool-down'\n    | 'run'\n    | 'walk'\n    | 'uphill-repeat'\n    | 'downhill-repeat'\n    | 'recovery'\n    | 'rest'\n    | 'caco'\n    | 'fartlek'\n    | 'series'\n    | 'w-series';\n  distance?: number; // in km\n  duration?: number; // in minutes\n  intensityTarget?: IntensityTarget; // Flexible intensity target configuration\n  elevationChange?: number; // in meters (positive for uphill)\n  isRepeated?: boolean;\n  repeatCount?: number;\n  repeatSections?: TrailRunningInterval[];\n}\n\nconst difficultyLevels = [\n  {\n    value: 'beginner',\n    label: 'Beginner',\n    color: 'bg-green-100 text-green-800',\n  },\n  {\n    value: 'intermediate',\n    label: 'Intermediate',\n    color: 'bg-yellow-100 text-yellow-800',\n  },\n  {\n    value: 'advanced',\n    label: 'Advanced',\n    color: 'bg-orange-100 text-orange-800',\n  },\n  { value: 'expert', label: 'Expert', color: 'bg-red-100 text-red-800' },\n];\n\n// Categorized section types for better organization\nconst sectionCategories = {\n  basic: [\n    {\n      value: 'warm-up',\n      label: 'Warm-up',\n      icon: Zap,\n      color: 'text-blue-600',\n      description: 'Easy preparation phase',\n      autoRepeat: false,\n    },\n    {\n      value: 'cool-down',\n      label: 'Cool-down',\n      icon: Zap,\n      color: 'text-blue-600',\n      description: 'Easy recovery phase',\n      autoRepeat: false,\n    },\n    {\n      value: 'run',\n      label: 'Run',\n      icon: TrendingUp,\n      color: 'text-green-600',\n      description: 'Steady running pace',\n      autoRepeat: false,\n    },\n    {\n      value: 'walk',\n      label: 'Walk',\n      icon: Play,\n      color: 'text-gray-500',\n      description: 'Walking pace section',\n      autoRepeat: false,\n    },\n  ],\n  rest: [\n    {\n      value: 'rest',\n      label: 'Rest',\n      icon: Pause,\n      color: 'text-gray-600',\n      description: 'Complete rest (intensity 0)',\n      autoRepeat: false,\n    },\n    {\n      value: 'recovery',\n      label: 'Recovery',\n      icon: Play,\n      color: 'text-green-400',\n      description: 'Active recovery (intensity 0-1)',\n      autoRepeat: false,\n    },\n  ],\n  structured: [\n    {\n      value: 'uphill-repeat',\n      label: 'Uphill Repeat',\n      icon: Mountain,\n      color: 'text-orange-600',\n      description: 'Uphill intervals',\n      autoRepeat: true,\n    },\n    {\n      value: 'downhill-repeat',\n      label: 'Downhill Repeat',\n      icon: TrendingDown,\n      color: 'text-purple-600',\n      description: 'Downhill intervals',\n      autoRepeat: true,\n    },\n    {\n      value: 'w-series',\n      label: 'W Series',\n      icon: Zap,\n      color: 'text-red-600',\n      description: 'Paired uphill/downhill intervals',\n      autoRepeat: true,\n    },\n    {\n      value: 'caco',\n      label: 'CACO (Run/Walk)',\n      icon: TrendingUp,\n      color: 'text-blue-600',\n      description: 'Alternating run/walk',\n      autoRepeat: true,\n    },\n    {\n      value: 'fartlek',\n      label: 'Fartlek',\n      icon: Navigation,\n      color: 'text-indigo-600',\n      description: 'Playful speed variations',\n      autoRepeat: true,\n    },\n    {\n      value: 'series',\n      label: 'Series',\n      icon: Repeat,\n      color: 'text-orange-500',\n      description: 'Structured interval series',\n      autoRepeat: true,\n    },\n  ],\n};\n\n// Basic interval types that can be used within sections\nconst intervalTypes = [\n  {\n    value: 'run',\n    label: 'Run',\n    icon: Zap,\n    color: 'text-green-600',\n    description: 'General running effort',\n  },\n  {\n    value: 'uphill',\n    label: 'Uphill',\n    icon: Mountain,\n    color: 'text-orange-600',\n    description: 'Uphill climbing effort',\n  },\n  {\n    value: 'downhill',\n    label: 'Downhill',\n    icon: TrendingDown,\n    color: 'text-purple-600',\n    description: 'Downhill running effort',\n  },\n  {\n    value: 'sprint',\n    label: 'Sprint',\n    icon: TrendingUp,\n    color: 'text-red-600',\n    description: 'High intensity burst',\n  },\n  {\n    value: 'recovery',\n    label: 'Recovery',\n    icon: Play,\n    color: 'text-green-400',\n    description: 'Active recovery',\n  },\n  {\n    value: 'rest',\n    label: 'Rest',\n    icon: Pause,\n    color: 'text-gray-600',\n    description: 'Complete rest',\n  },\n  {\n    value: 'walk',\n    label: 'Walk',\n    icon: Play,\n    color: 'text-gray-500',\n    description: 'Walking pace',\n  },\n];\n\n// Flat array for backward compatibility\nconst sectionTypes = [\n  ...sectionCategories.basic,\n  ...sectionCategories.rest,\n  ...sectionCategories.structured,\n];\n\n// Helper functions for intensity targets (moved here for global access)\nconst formatIntensityTargetDisplay = (target?: IntensityTarget) => {\n  if (!target) return 'Not set';\n\n  // Zone descriptions for heart rate and power zones (0-5)\n  const getZoneDisplayDescription = (zoneValue: number) => {\n    const descriptions = [\n      'Active Recovery',\n      'Endurance/Base',\n      'Aerobic',\n      'Tempo/Lactate Threshold',\n      'VO2 Max/Lactate',\n      'Anaerobic Capacity',\n    ];\n    return descriptions[zoneValue] || 'Unknown';\n  };\n\n  switch (target.type) {\n    case 'heart-rate':\n      return `HR Zone ${target.value} - ${getZoneDisplayDescription(\n        target.value || 3\n      )}`;\n    case 'speed':\n      if (target.minValue && target.maxValue) {\n        return `${target.minValue}-${target.maxValue} ${target.unit}`;\n      } else if (target.minValue) {\n        return `${target.minValue}+ ${target.unit}`;\n      } else if (target.maxValue) {\n        return `<${target.maxValue} ${target.unit}`;\n      }\n      return `${target.value || 'Not set'} ${target.unit}`;\n    case 'power':\n      return `Power Zone ${target.value} - ${getZoneDisplayDescription(\n        target.value || 3\n      )}`;\n    case 'cadence':\n      return `${target.value} ${target.unit}`;\n    case 'rpe':\n      return `RPE ${target.value}/10`;\n    default:\n      return 'Unknown';\n  }\n};\n\nconst getIntensityTargetColor = (target?: IntensityTarget) => {\n  if (!target) return 'bg-gray-200 text-gray-600';\n\n  switch (target.type) {\n    case 'heart-rate': {\n      // Color based on zone intensity (0-5)\n      const hrValue = target.value || 3;\n      if (hrValue === 0) return 'bg-gray-200 text-gray-600';\n      if (hrValue <= 1) return 'bg-green-200 text-green-800';\n      if (hrValue <= 2) return 'bg-blue-200 text-blue-800';\n      if (hrValue <= 3) return 'bg-yellow-200 text-yellow-800';\n      if (hrValue <= 4) return 'bg-orange-200 text-orange-800';\n      return 'bg-red-200 text-red-800';\n    }\n    case 'speed':\n      return 'bg-blue-200 text-blue-800';\n    case 'power': {\n      // Color based on zone intensity (0-5)\n      const powerValue = target.value || 3;\n      if (powerValue === 0) return 'bg-gray-200 text-gray-600';\n      if (powerValue <= 1) return 'bg-green-200 text-green-800';\n      if (powerValue <= 2) return 'bg-blue-200 text-blue-800';\n      if (powerValue <= 3) return 'bg-yellow-200 text-yellow-800';\n      if (powerValue <= 4) return 'bg-orange-200 text-orange-800';\n      return 'bg-red-200 text-red-800';\n    }\n    case 'cadence':\n      return 'bg-green-200 text-green-800';\n    case 'rpe': {\n      const value = target.value || 5;\n      if (value <= 2) return 'bg-gray-200 text-gray-600';\n      if (value <= 4) return 'bg-green-200 text-green-800';\n      if (value <= 6) return 'bg-yellow-200 text-yellow-800';\n      if (value <= 8) return 'bg-orange-200 text-orange-800';\n      return 'bg-red-200 text-red-800';\n    }\n    default:\n      return 'bg-gray-200 text-gray-600';\n  }\n};\n\nconst getDefaultIntensityTarget = (type: string): IntensityTarget => {\n  switch (type) {\n    // Section types\n    case 'warm-up':\n      return { type: 'heart-rate', value: 1, unit: 'zone' }; // Zone 1 - Endurance/Base\n    case 'cool-down':\n      return { type: 'heart-rate', value: 0, unit: 'zone' }; // Zone 0 - Active Recovery\n    case 'run':\n      return { type: 'heart-rate', value: 3, unit: 'zone' }; // Zone 3 - Tempo\n    case 'walk':\n      return { type: 'heart-rate', value: 1, unit: 'zone' }; // Zone 1 - Light walking effort\n    case 'uphill-repeat':\n      return { type: 'power', value: 4, unit: 'zone' }; // Zone 4 - VO2 Max/Lactate\n    case 'downhill-repeat':\n      return { type: 'heart-rate', value: 3, unit: 'zone' }; // Zone 3 - Controlled downhill effort\n    case 'w-series':\n      return { type: 'power', value: 4, unit: 'zone' }; // Zone 4 - VO2 Max/Lactate for matched uphill/downhill efforts\n    case 'fartlek':\n      return { type: 'heart-rate', value: 3, unit: 'zone' }; // Zone 3 - Tempo/Lactate Threshold\n    case 'series':\n      return { type: 'power', value: 5, unit: 'zone' }; // Zone 5 - Anaerobic Capacity\n    case 'caco':\n      return { type: 'rpe', value: 4, unit: 'RPE' }; // Moderate RPE for run/walk\n\n    // Interval types\n    case 'uphill':\n      return { type: 'power', value: 4, unit: 'zone' }; // Zone 4 - VO2 Max/Lactate\n    case 'downhill':\n      return { type: 'heart-rate', value: 3, unit: 'zone' }; // Zone 3 - Controlled effort\n    case 'sprint':\n      return { type: 'power', value: 5, unit: 'zone' }; // Zone 5 - Anaerobic Capacity\n    case 'recovery':\n      return { type: 'heart-rate', value: 1, unit: 'zone' }; // Zone 1 - Active Recovery\n    case 'rest':\n      return { type: 'rpe', value: 1, unit: 'RPE' }; // Very light effort\n    default:\n      return { type: 'rpe', value: 5, unit: 'RPE' };\n  }\n};\n\n// Intensity Target Configuration Component\nconst IntensityTargetConfiguration = ({\n  target,\n  onChange,\n}: {\n  target?: IntensityTarget;\n  onChange: (target: IntensityTarget) => void;\n}) => {\n  const intensityTargetTypes = [\n    {\n      value: 'heart-rate',\n      label: 'Heart Rate',\n      unit: 'bpm',\n      icon: '💓',\n      description: 'Target heart rate zone',\n    },\n    {\n      value: 'speed',\n      label: 'Speed',\n      unit: 'min/km',\n      icon: '🏃',\n      description: 'Target pace range',\n    },\n    {\n      value: 'power',\n      label: 'Power Zone',\n      unit: 'zone',\n      icon: '⚡',\n      description: 'Structured power zones',\n    },\n    {\n      value: 'cadence',\n      label: 'Cadence',\n      unit: 'rpm',\n      icon: '🔄',\n      description: 'Steps per minute',\n    },\n    {\n      value: 'rpe',\n      label: 'Perceived Exertion',\n      unit: 'RPE',\n      icon: '🎯',\n      description: 'Rate of perceived exertion (1-10)',\n    },\n  ];\n\n  const currentTarget = target || { type: 'rpe', value: 5, unit: 'RPE' };\n\n  const handleTargetTypeChange = (newType: string) => {\n    const targetType = intensityTargetTypes.find(t => t.value === newType);\n    if (!targetType) return;\n\n    const newTarget: IntensityTarget = {\n      type: newType as IntensityTarget['type'],\n      unit: targetType.unit,\n    };\n\n    // Set appropriate default values based on type\n    switch (newType) {\n      case 'heart-rate':\n        newTarget.value = 3; // Zone 3 (Tempo)\n        break;\n      case 'speed':\n        newTarget.minValue = '5:00'; // 5:00 min/km\n        newTarget.maxValue = '5:59'; // 5:59 min/km\n        break;\n      case 'power':\n        newTarget.value = 3; // Zone 3 (Tempo)\n        break;\n      case 'cadence':\n        newTarget.value = 180;\n        break;\n      case 'rpe':\n        newTarget.value = 5;\n        break;\n    }\n\n    onChange(newTarget);\n  };\n\n  // Zone descriptions for heart rate and power zones (0-5)\n  const getZoneDescription = (zone: number) => {\n    const descriptions = [\n      'Active Recovery',\n      'Endurance/Base',\n      'Aerobic',\n      'Tempo/Lactate Threshold',\n      'VO2 Max/Lactate',\n      'Anaerobic Capacity',\n    ];\n    return descriptions[zone] || 'Unknown';\n  };\n\n  // RPE descriptions for 1-10 scale\n  const getRPEDescription = (level: number) => {\n    const descriptions = [\n      '', // No level 0 for RPE\n      'Very Easy - Minimal effort',\n      'Easy - Light effort',\n      'Moderate - Some effort',\n      'Somewhat Hard - Noticeable effort',\n      'Hard - Strong effort',\n      'Harder - Very strong effort',\n      'Very Hard - Very strong effort',\n      'Very, Very Hard - Maximal effort',\n      'Near Maximal - Almost all-out',\n      'Maximal - All-out effort',\n    ];\n    return descriptions[level] || 'Unknown';\n  };\n\n  const renderTargetInputs = () => {\n    switch (currentTarget.type) {\n      case 'heart-rate':\n        return (\n          <Select\n            value={currentTarget.value?.toString() || '3'}\n            onValueChange={value =>\n              onChange({ ...currentTarget, value: parseInt(value) })\n            }\n          >\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {[0, 1, 2, 3, 4, 5].map(zone => (\n                <SelectItem key={zone} value={zone.toString()}>\n                  <div className=\"flex flex-col\">\n                    <span>Heart Rate Zone {zone}</span>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {getZoneDescription(zone)}\n                    </span>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        );\n      case 'power':\n        return (\n          <Select\n            value={currentTarget.value?.toString() || '3'}\n            onValueChange={value =>\n              onChange({ ...currentTarget, value: parseInt(value) })\n            }\n          >\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {[0, 1, 2, 3, 4, 5].map(zone => (\n                <SelectItem key={zone} value={zone.toString()}>\n                  <div className=\"flex flex-col\">\n                    <span>Power Zone {zone}</span>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {getZoneDescription(zone)}\n                    </span>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        );\n      case 'speed':\n        return (\n          <div className=\"space-y-3\">\n            <div className=\"grid grid-cols-2 gap-2\">\n              <div className=\"space-y-1\">\n                <Label className=\"text-xs\">Min Pace</Label>\n                <div className=\"relative\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"5:00\"\n                    value={currentTarget.minValue || ''}\n                    onChange={e => {\n                      const value = e.target.value;\n                      // Allow partial input while typing: digits, digits with colon, or complete MM:SS\n                      if (\n                        value === '' ||\n                        /^(\\d{1,2}(:[0-5]?\\d?)?)?$/.test(value)\n                      ) {\n                        onChange({\n                          ...currentTarget,\n                          minValue: value || undefined,\n                        });\n                      }\n                    }}\n                    onBlur={e => {\n                      const value = e.target.value;\n                      // On blur, validate complete MM:SS format and auto-format if needed\n                      if (value && !/^\\d{1,2}:[0-5]\\d$/.test(value)) {\n                        // Try to auto-format common inputs\n                        if (/^\\d{1,2}$/.test(value)) {\n                          // Just minutes entered, add :00\n                          const formattedValue = `${value}:00`;\n                          onChange({\n                            ...currentTarget,\n                            minValue: formattedValue,\n                          });\n                        } else if (/^\\d{1,2}:\\d$/.test(value)) {\n                          // Single digit seconds, pad with 0\n                          const formattedValue = value.replace(\n                            /(\\d{1,2}):(\\d)$/,\n                            '$1:0$2'\n                          );\n                          onChange({\n                            ...currentTarget,\n                            minValue: formattedValue,\n                          });\n                        }\n                      }\n                    }}\n                    className=\"pr-16\"\n                    maxLength={5}\n                  />\n                  <span className=\"absolute right-2 top-1/2 -translate-y-1/2 text-xs text-muted-foreground pointer-events-none\">\n                    min/km\n                  </span>\n                </div>\n              </div>\n              <div className=\"space-y-1\">\n                <Label className=\"text-xs\">Max Pace</Label>\n                <div className=\"relative\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"5:59\"\n                    value={currentTarget.maxValue || ''}\n                    onChange={e => {\n                      const value = e.target.value;\n                      // Allow partial input while typing: digits, digits with colon, or complete MM:SS\n                      if (\n                        value === '' ||\n                        /^(\\d{1,2}(:[0-5]?\\d?)?)?$/.test(value)\n                      ) {\n                        onChange({\n                          ...currentTarget,\n                          maxValue: value || undefined,\n                        });\n                      }\n                    }}\n                    onBlur={e => {\n                      const value = e.target.value;\n                      // On blur, validate complete MM:SS format and auto-format if needed\n                      if (value && !/^\\d{1,2}:[0-5]\\d$/.test(value)) {\n                        // Try to auto-format common inputs\n                        if (/^\\d{1,2}$/.test(value)) {\n                          // Just minutes entered, add :00\n                          const formattedValue = `${value}:00`;\n                          onChange({\n                            ...currentTarget,\n                            maxValue: formattedValue,\n                          });\n                        } else if (/^\\d{1,2}:\\d$/.test(value)) {\n                          // Single digit seconds, pad with 0\n                          const formattedValue = value.replace(\n                            /(\\d{1,2}):(\\d)$/,\n                            '$1:0$2'\n                          );\n                          onChange({\n                            ...currentTarget,\n                            maxValue: formattedValue,\n                          });\n                        }\n                      }\n                    }}\n                    className=\"pr-16\"\n                    maxLength={5}\n                  />\n                  <span className=\"absolute right-2 top-1/2 -translate-y-1/2 text-xs text-muted-foreground pointer-events-none\">\n                    min/km\n                  </span>\n                </div>\n              </div>\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Set pace range for this interval (e.g., 5:00-5:59 min/km)\n            </p>\n          </div>\n        );\n      case 'cadence':\n        return (\n          <Input\n            type=\"number\"\n            placeholder=\"Cadence (RPM)\"\n            value={currentTarget.value || ''}\n            onChange={e =>\n              onChange({\n                ...currentTarget,\n                value: parseInt(e.target.value) || undefined,\n              })\n            }\n          />\n        );\n      case 'rpe':\n        return (\n          <Select\n            value={currentTarget.value?.toString() || '5'}\n            onValueChange={value =>\n              onChange({ ...currentTarget, value: parseInt(value) })\n            }\n          >\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(level => (\n                <SelectItem key={level} value={level.toString()}>\n                  <div className=\"flex flex-col\">\n                    <span>RPE {level}/10</span>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {getRPEDescription(level)}\n                    </span>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      <Label>Intensity Target</Label>\n\n      <Select value={currentTarget.type} onValueChange={handleTargetTypeChange}>\n        <SelectTrigger>\n          <SelectValue />\n        </SelectTrigger>\n        <SelectContent>\n          {intensityTargetTypes.map(type => (\n            <SelectItem key={type.value} value={type.value}>\n              <div className=\"flex items-center space-x-2\">\n                <span>{type.icon}</span>\n                <div>\n                  <div>{type.label}</div>\n                  <div className=\"text-xs text-gray-500\">\n                    {type.description}\n                  </div>\n                </div>\n              </div>\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n\n      {renderTargetInputs()}\n    </div>\n  );\n};\n\nexport default function TrailRunningWorkout({\n  onSave,\n  onCancel,\n  initialData,\n  mode,\n}: TrailRunningWorkoutProps) {\n  const [workoutData, setWorkoutData] = useState<TrailRunningWorkoutData>(\n    initialData || {\n      id: Date.now().toString(),\n      name: '',\n      description: '',\n      type: 'trail-running',\n      difficulty: 'intermediate',\n      estimatedDuration: 0, // calculated\n      targetDistance: 0, // calculated\n      elevationGain: 0, // calculated\n      sections: [],\n    }\n  );\n\n  const [currentSection, setCurrentSection] = useState<\n    Partial<TrailRunningSection>\n  >({\n    type: 'warm-up',\n    intensityTarget: { type: 'rpe', value: 3, unit: 'RPE' },\n    isRepeated: false,\n    repeatCount: 1,\n  });\n\n  const [repeatIntervals, setRepeatIntervals] = useState<\n    Partial<TrailRunningInterval>[]\n  >([]);\n  const [editingSection, setEditingSection] =\n    useState<TrailRunningSection | null>(null);\n  const [skipLastRest, setSkipLastRest] = useState(false);\n\n  // Get smart defaults for section types\n  const getSmartDefaults = (type: string) => {\n    const defaults = {\n      'uphill-repeat': {\n        repeatCount: 6,\n        intervals: [\n          {\n            name: 'Hill Climb',\n            type: 'uphill',\n            distance: 0.2,\n            intensityTarget: { type: 'power', value: 4, unit: 'zone' },\n            elevationChange: 30,\n          },\n          {\n            name: 'Recovery Jog',\n            type: 'recovery',\n            distance: 0.2,\n            intensityTarget: { type: 'heart-rate', value: 1, unit: 'zone' },\n            elevationChange: -30,\n          },\n        ],\n      },\n      'downhill-repeat': {\n        repeatCount: 6,\n        intervals: [\n          {\n            name: 'Downhill Run',\n            type: 'downhill',\n            distance: 0.3,\n            intensityTarget: { type: 'heart-rate', value: 3, unit: 'zone' },\n            elevationChange: -40,\n          },\n          {\n            name: 'Easy Recovery',\n            type: 'recovery',\n            distance: 0.2,\n            intensityTarget: { type: 'heart-rate', value: 1, unit: 'zone' },\n            elevationChange: 20,\n          },\n        ],\n      },\n      'w-series': {\n        repeatCount: 6,\n        intervals: [\n          {\n            name: 'Uphill Segment',\n            type: 'uphill',\n            distance: 0.4,\n            intensityTarget: { type: 'power', value: 4, unit: 'zone' },\n            elevationChange: 40,\n          },\n          {\n            name: 'Downhill Segment',\n            type: 'downhill',\n            distance: 0.4,\n            intensityTarget: { type: 'power', value: 4, unit: 'zone' },\n            elevationChange: -40,\n          },\n        ],\n      },\n      caco: {\n        repeatCount: 8,\n        intervals: [\n          {\n            name: 'Run Segment',\n            type: 'run',\n            distance: 0.4,\n            duration: 2,\n            intensityTarget: { type: 'heart-rate', value: 2, unit: 'zone' },\n          },\n          {\n            name: 'Walk Break',\n            type: 'walk',\n            distance: 0.4,\n            duration: 2,\n            intensityTarget: { type: 'heart-rate', value: 1, unit: 'zone' },\n          },\n        ],\n      },\n      fartlek: {\n        repeatCount: 5,\n        intervals: [\n          {\n            name: 'Fast Surge',\n            type: 'sprint',\n            distance: 0.3,\n            intensityTarget: { type: 'heart-rate', value: 4, unit: 'zone' },\n          },\n          {\n            name: 'Easy Recovery',\n            type: 'recovery',\n            distance: 0.5,\n            intensityTarget: { type: 'heart-rate', value: 1, unit: 'zone' },\n          },\n        ],\n      },\n      series: {\n        repeatCount: 4,\n        intervals: [\n          {\n            name: 'Work Interval',\n            type: 'run',\n            distance: 0.8,\n            intensityTarget: { type: 'power', value: 5, unit: 'zone' },\n          },\n          { name: 'Rest Break', type: 'rest', duration: 3 },\n        ],\n      },\n    };\n\n    return defaults[type as keyof typeof defaults];\n  };\n\n  // Calculate totals from sections\n  const calculateTotals = (sections: TrailRunningSection[]) => {\n    let totalDistance = 0;\n    let totalDuration = 0;\n    let totalElevation = 0;\n\n    const processSection = (\n      section: TrailRunningSection | TrailRunningInterval,\n      multiplier: number = 1\n    ) => {\n      if (section.distance) totalDistance += section.distance * multiplier;\n      if (section.duration) totalDuration += section.duration * multiplier;\n      if (section.elevationChange)\n        totalElevation += Math.max(0, section.elevationChange) * multiplier;\n    };\n\n    sections.forEach(section => {\n      if (section.isRepeated && section.repeatSections && section.repeatCount) {\n        section.repeatSections.forEach(repeatSection => {\n          processSection(repeatSection, section.repeatCount!);\n        });\n      } else {\n        processSection(section);\n      }\n    });\n\n    return {\n      distance: Math.round(totalDistance * 10) / 10,\n      duration: Math.round(totalDuration),\n      elevation: Math.round(totalElevation),\n    };\n  };\n\n  // Update calculated values whenever sections change\n  useEffect(() => {\n    const totals = calculateTotals(workoutData.sections);\n    setWorkoutData(prev => ({\n      ...prev,\n      targetDistance: totals.distance,\n      estimatedDuration: totals.duration,\n      elevationGain: totals.elevation,\n    }));\n  }, [workoutData.sections]);\n\n  // Helper function to check if a section is rest/recovery type\n  const isRestOrRecovery = (\n    section: Partial<TrailRunningSection | TrailRunningInterval>\n  ) => {\n    return section.type === 'rest' || section.type === 'recovery';\n  };\n\n  // Process repeat sections with skip last rest logic\n  const processRepeatSections = (\n    sections: Partial<TrailRunningInterval>[],\n    skipLast: boolean\n  ) => {\n    if (!skipLast || sections.length === 0) {\n      return sections;\n    }\n\n    // Check if the last section is rest or recovery\n    const lastSection = sections[sections.length - 1];\n    if (isRestOrRecovery(lastSection)) {\n      // Remove the last section if it's rest/recovery\n      return sections.slice(0, -1);\n    }\n\n    return sections;\n  };\n\n  const addSection = () => {\n    if (!currentSection.name) return;\n\n    if (editingSection) {\n      // Update existing section\n      const processedRepeatIntervals = currentSection.isRepeated\n        ? processRepeatSections(repeatIntervals, skipLastRest)\n        : undefined;\n\n      const updatedSection: TrailRunningSection = {\n        ...editingSection,\n        type: currentSection.type || 'warm-up',\n        name: currentSection.name,\n        distance: currentSection.distance,\n        duration: currentSection.duration,\n        elevationChange: currentSection.elevationChange,\n        intensityTarget: currentSection.intensityTarget || {\n          type: 'rpe',\n          value: 5,\n          unit: 'RPE',\n        },\n        isRepeated: currentSection.isRepeated || false,\n        repeatCount: currentSection.isRepeated\n          ? currentSection.repeatCount\n          : undefined,\n        repeatSections: processedRepeatIntervals\n          ? processedRepeatIntervals.map(\n              rs =>\n                ({\n                  ...rs,\n                  id: rs.id || Date.now().toString() + Math.random(),\n                  name: rs.name || 'Unnamed Interval',\n                  type: rs.type || 'run',\n                  intensityTarget:\n                    rs.intensityTarget ||\n                    getDefaultIntensityTarget(rs.type || 'run'),\n                }) as TrailRunningInterval\n            )\n          : undefined,\n      };\n\n      // Store the skipLastRest setting in a custom property for editing later\n      if (currentSection.isRepeated) {\n        (\n          updatedSection as TrailRunningSection & { skipLastRest?: boolean }\n        ).skipLastRest = skipLastRest;\n      }\n\n      setWorkoutData(prev => ({\n        ...prev,\n        sections: prev.sections.map(section =>\n          section.id === editingSection.id ? updatedSection : section\n        ),\n      }));\n\n      setEditingSection(null);\n    } else {\n      // Add new section\n      const processedRepeatIntervals = currentSection.isRepeated\n        ? processRepeatSections(repeatIntervals, skipLastRest)\n        : undefined;\n\n      const section: TrailRunningSection = {\n        id: Date.now().toString(),\n        type: currentSection.type || 'warm-up',\n        name: currentSection.name,\n        distance: currentSection.distance,\n        duration: currentSection.duration,\n        elevationChange: currentSection.elevationChange,\n        intensityTarget: currentSection.intensityTarget || {\n          type: 'rpe',\n          value: 5,\n          unit: 'RPE',\n        },\n        isRepeated: currentSection.isRepeated || false,\n        repeatCount: currentSection.isRepeated\n          ? currentSection.repeatCount\n          : undefined,\n        repeatSections: processedRepeatIntervals\n          ? processedRepeatIntervals.map(\n              rs =>\n                ({\n                  ...rs,\n                  id: rs.id || Date.now().toString() + Math.random(),\n                  name: rs.name || 'Unnamed Interval',\n                  type: rs.type || 'run',\n                  intensityTarget:\n                    rs.intensityTarget ||\n                    getDefaultIntensityTarget(rs.type || 'run'),\n                }) as TrailRunningInterval\n            )\n          : undefined,\n      };\n\n      // Store the skipLastRest setting in a custom property for editing later\n      if (currentSection.isRepeated) {\n        (\n          section as TrailRunningSection & { skipLastRest?: boolean }\n        ).skipLastRest = skipLastRest;\n      }\n\n      setWorkoutData(prev => ({\n        ...prev,\n        sections: [...prev.sections, section],\n      }));\n    }\n\n    // Reset form with smart defaults\n    const nextType = 'warm-up';\n    const nextTypeInfo = sectionTypes.find(t => t.value === nextType);\n    const shouldAutoRepeat = nextTypeInfo?.autoRepeat || false;\n    const smartDefaults = shouldAutoRepeat ? getSmartDefaults(nextType) : null;\n\n    setCurrentSection({\n      type: nextType,\n      intensityTarget: { type: 'rpe', value: 5, unit: 'RPE' },\n      isRepeated: shouldAutoRepeat,\n      repeatCount: smartDefaults?.repeatCount || 1,\n      name: getDefaultName(nextType),\n    });\n\n    if (shouldAutoRepeat && smartDefaults?.intervals) {\n      setRepeatIntervals(\n        smartDefaults.intervals.map((interval, index) => {\n          const mappedInterval: Partial<TrailRunningInterval> = {\n            ...interval,\n            id: `${Date.now()}-${index}`,\n            type: (interval.type as IntervalType) || 'run',\n            intensityTarget: interval.intensityTarget\n              ? {\n                  ...interval.intensityTarget,\n                  type: interval.intensityTarget.type as\n                    | 'heart-rate'\n                    | 'speed'\n                    | 'power'\n                    | 'cadence'\n                    | 'rpe',\n                }\n              : undefined,\n          };\n\n          if (mappedInterval.type === 'rest') {\n            delete mappedInterval.intensityTarget;\n          }\n\n          return mappedInterval;\n        }) as Partial<TrailRunningInterval>[]\n      );\n    } else {\n      setRepeatIntervals([]);\n    }\n    setSkipLastRest(false);\n  };\n\n  const removeSection = (id: string) => {\n    setWorkoutData(prev => ({\n      ...prev,\n      sections: prev.sections.filter(section => section.id !== id),\n    }));\n  };\n\n  const addRepeatInterval = () => {\n    setRepeatIntervals(prev => {\n      // Determine appropriate default type based on current section type and position\n      const getDefaultIntervalType = (currentLength: number) => {\n        switch (currentSection.type) {\n          case 'uphill-repeat':\n            return currentLength % 2 === 0 ? 'uphill' : 'recovery';\n          case 'downhill-repeat':\n            return currentLength % 2 === 0 ? 'downhill' : 'recovery';\n          case 'w-series':\n            // W-pattern: uphill, downhill alternating\n            return currentLength % 2 === 0 ? 'uphill' : 'downhill';\n          case 'fartlek':\n            return currentLength % 2 === 0 ? 'sprint' : 'recovery';\n          case 'series':\n            return currentLength % 2 === 0 ? 'run' : 'rest';\n          case 'caco':\n            return currentLength % 2 === 0 ? 'run' : 'walk';\n          default:\n            return 'run';\n        }\n      };\n\n      const intervalType = getDefaultIntervalType(prev.length);\n      const newInterval: Partial<TrailRunningInterval> = {\n        type: intervalType,\n        name: `Interval ${prev.length + 1}`,\n      };\n\n      // Only add intensity target if not a rest interval\n      if (intervalType !== 'rest') {\n        newInterval.intensityTarget = getDefaultIntensityTarget(intervalType);\n      }\n\n      return [...prev, newInterval];\n    });\n  };\n\n  const updateRepeatInterval = (\n    index: number,\n    field: string,\n    value: string | number | boolean | IntensityTarget\n  ) => {\n    setRepeatIntervals(prev =>\n      prev.map((interval, i) => {\n        if (i === index) {\n          const updatedInterval = { ...interval, [field]: value };\n\n          // If changing type to 'rest', clear distance, elevation, and intensity target\n          if (field === 'type' && value === 'rest') {\n            updatedInterval.distance = undefined;\n            updatedInterval.elevationChange = undefined;\n            updatedInterval.intensityTarget = undefined;\n          }\n\n          return updatedInterval;\n        }\n        return interval;\n      })\n    );\n  };\n\n  const removeRepeatInterval = (index: number) => {\n    setRepeatIntervals(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const editSection = (section: TrailRunningSection) => {\n    setEditingSection(section);\n    setCurrentSection({\n      type: section.type,\n      name: section.name,\n      distance: section.distance,\n      duration: section.duration,\n      elevationChange: section.elevationChange,\n      intensityTarget: section.intensityTarget,\n      isRepeated: section.isRepeated,\n      repeatCount: section.repeatCount,\n    });\n\n    if (section.isRepeated && section.repeatSections) {\n      setRepeatIntervals(\n        section.repeatSections.map(rs => ({\n          ...rs,\n        }))\n      );\n      // Check if skip last rest was enabled for this section (stored in a custom property)\n      setSkipLastRest(\n        (section as TrailRunningSection & { skipLastRest?: boolean })\n          .skipLastRest || false\n      );\n    } else {\n      setRepeatIntervals([]);\n      setSkipLastRest(false);\n    }\n  };\n\n  const cancelEdit = () => {\n    setEditingSection(null);\n    // Reset form\n    const nextType = 'warm-up';\n    const nextTypeInfo = sectionTypes.find(t => t.value === nextType);\n    const shouldAutoRepeat = nextTypeInfo?.autoRepeat || false;\n    const smartDefaults = shouldAutoRepeat ? getSmartDefaults(nextType) : null;\n\n    setCurrentSection({\n      type: nextType,\n      intensityTarget: { type: 'rpe', value: 5, unit: 'RPE' },\n      isRepeated: shouldAutoRepeat,\n      repeatCount: smartDefaults?.repeatCount || 1,\n      name: getDefaultName(nextType),\n    });\n\n    if (shouldAutoRepeat && smartDefaults?.intervals) {\n      setRepeatIntervals(\n        smartDefaults.intervals.map((interval, index) => {\n          const mappedInterval: Partial<TrailRunningInterval> = {\n            ...interval,\n            id: `${Date.now()}-${index}`,\n            type: (interval.type as IntervalType) || 'run',\n            intensityTarget: interval.intensityTarget\n              ? {\n                  ...interval.intensityTarget,\n                  type: interval.intensityTarget.type as\n                    | 'heart-rate'\n                    | 'speed'\n                    | 'power'\n                    | 'cadence'\n                    | 'rpe',\n                }\n              : undefined,\n          };\n\n          if (mappedInterval.type === 'rest') {\n            delete mappedInterval.intensityTarget;\n          }\n\n          return mappedInterval;\n        }) as Partial<TrailRunningInterval>[]\n      );\n    } else {\n      setRepeatIntervals([]);\n    }\n    setSkipLastRest(false);\n  };\n\n  const getDefaultName = (type: string) => {\n    const names = {\n      'warm-up': 'Warm-up Phase',\n      'cool-down': 'Cool-down Phase',\n      run: 'Running Section',\n      walk: 'Walking Section',\n      'uphill-repeat': 'Uphill Repeats',\n      'downhill-repeat': 'Downhill Repeats',\n      'w-series': 'W Series',\n      recovery: 'Recovery Run',\n      rest: 'Rest Break',\n      caco: 'CACO Run/Walk',\n      fartlek: 'Fartlek Play',\n      series: 'Section Series',\n    };\n    return names[type as keyof typeof names] || 'Training Section';\n  };\n\n  const canSave = workoutData.name.trim() && workoutData.sections.length > 0;\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 rounded-xl bg-gradient-to-br from-orange-500 to-red-600 flex items-center justify-center\">\n            <Mountain className=\"w-5 h-5 text-white\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              {mode === 'create'\n                ? 'Create Trail Running Workout'\n                : 'Edit Trail Running Workout'}\n            </h3>\n            <p className=\"text-sm text-gray-600\">\n              Design your trail running adventure\n            </p>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-3\">\n          <Button variant=\"outline\" onClick={onCancel}>\n            Cancel\n          </Button>\n          <Button\n            onClick={() => onSave(workoutData)}\n            disabled={!canSave}\n            className=\"bg-gradient-to-r from-orange-500 to-red-600 hover:from-orange-600 hover:to-red-700\"\n          >\n            {mode === 'create' ? 'Add Workout' : 'Save Changes'}\n          </Button>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div>\n        {/* Calculated Stats */}\n        <div className=\"grid grid-cols-3 gap-4 mb-6\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">\n                {workoutData.targetDistance}km\n              </div>\n              <div className=\"text-sm text-gray-600\">Total Distance</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {workoutData.estimatedDuration}min\n              </div>\n              <div className=\"text-sm text-gray-600\">Total Duration</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-red-600\">\n                +{workoutData.elevationGain}m\n              </div>\n              <div className=\"text-sm text-gray-600\">Elevation Gain</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Workout Overview */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>Workout Overview</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Workout Name</Label>\n                <Input\n                  id=\"name\"\n                  placeholder=\"e.g., Mountain Peak Challenge\"\n                  value={workoutData.name}\n                  onChange={e =>\n                    setWorkoutData(prev => ({\n                      ...prev,\n                      name: e.target.value,\n                    }))\n                  }\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"difficulty\">Difficulty Level</Label>\n                <Select\n                  value={workoutData.difficulty}\n                  onValueChange={(\n                    value: TrailRunningWorkoutData['difficulty']\n                  ) => setWorkoutData(prev => ({ ...prev, difficulty: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {difficultyLevels.map(level => (\n                      <SelectItem key={level.value} value={level.value}>\n                        <div className=\"flex items-center space-x-2\">\n                          <span\n                            className={`inline-block w-2 h-2 rounded-full ${\n                              level.color.split(' ')[0]\n                            }`}\n                          />\n                          <span>{level.label}</span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <textarea\n                id=\"description\"\n                className=\"w-full min-h-[100px] px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-orange-500 focus:border-transparent\"\n                placeholder=\"Describe your trail running workout, terrain challenges, and what makes it special...\"\n                value={workoutData.description}\n                onChange={e =>\n                  setWorkoutData(prev => ({\n                    ...prev,\n                    description: e.target.value,\n                  }))\n                }\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Training Sections */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Add Section Form */}\n          <Card className=\"h-[600px] flex flex-col\">\n            <CardHeader className=\"flex-shrink-0\">\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>\n                  {editingSection\n                    ? 'Edit Training Section'\n                    : 'Add Training Section'}\n                </span>\n                {editingSection && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={cancelEdit}\n                    className=\"text-gray-600 hover:text-gray-700\"\n                  >\n                    Cancel Edit\n                  </Button>\n                )}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"flex-1 overflow-y-auto space-y-4 pr-2\">\n              <div className=\"space-y-3\">\n                <Label className=\"text-sm font-medium\">Section Type</Label>\n                <div className=\"space-y-2\">\n                  <Select\n                    value={currentSection.type}\n                    onValueChange={(value: TrailRunningSection['type']) => {\n                      const newType = value;\n                      const selectedType = sectionTypes.find(\n                        t => t.value === newType\n                      );\n                      const defaultTarget = getDefaultIntensityTarget(newType);\n\n                      // Auto-enable repeat for certain types and apply smart defaults\n                      const shouldAutoRepeat =\n                        selectedType?.autoRepeat || false;\n                      const smartDefaults = shouldAutoRepeat\n                        ? getSmartDefaults(newType)\n                        : null;\n\n                      setCurrentSection(prev => ({\n                        ...prev,\n                        type: newType,\n                        intensityTarget: defaultTarget,\n                        isRepeated: shouldAutoRepeat,\n                        repeatCount: smartDefaults?.repeatCount || 1,\n                        name: prev.name || getDefaultName(newType),\n                      }));\n\n                      // Set smart intervals if available\n                      if (shouldAutoRepeat && smartDefaults?.intervals) {\n                        setRepeatIntervals(\n                          smartDefaults.intervals.map((interval, index) => {\n                            const mappedInterval: Partial<TrailRunningInterval> =\n                              {\n                                ...interval,\n                                id: `${Date.now()}-${index}`,\n                                type: (interval.type as IntervalType) || 'run',\n                                intensityTarget: interval.intensityTarget\n                                  ? {\n                                      ...interval.intensityTarget,\n                                      type: interval.intensityTarget.type as\n                                        | 'heart-rate'\n                                        | 'speed'\n                                        | 'power'\n                                        | 'cadence'\n                                        | 'rpe',\n                                    }\n                                  : undefined,\n                              };\n\n                            if (mappedInterval.type === 'rest') {\n                              delete mappedInterval.intensityTarget;\n                            }\n\n                            return mappedInterval;\n                          })\n                        );\n                      } else if (!shouldAutoRepeat) {\n                        setRepeatIntervals([]);\n                      }\n                    }}\n                  >\n                    <SelectTrigger className=\"h-12\">\n                      <SelectValue>\n                        {currentSection.type &&\n                          (() => {\n                            const selectedType = sectionTypes.find(\n                              t => t.value === currentSection.type\n                            );\n                            if (selectedType) {\n                              const Icon = selectedType.icon;\n                              return (\n                                <div className=\"flex items-center justify-between w-full\">\n                                  <div className=\"flex items-center space-x-3\">\n                                    <Icon\n                                      className={`w-5 h-5 ${selectedType.color}`}\n                                    />\n                                    <div className=\"flex flex-col items-start\">\n                                      <span className=\"font-medium\">\n                                        {selectedType.label}\n                                      </span>\n                                      <span className=\"text-xs text-muted-foreground\">\n                                        {selectedType.description}\n                                      </span>\n                                    </div>\n                                  </div>\n                                </div>\n                              );\n                            }\n                            return null;\n                          })()}\n                      </SelectValue>\n                    </SelectTrigger>\n                    <SelectContent className=\"w-full\">\n                      {/* Basic Types */}\n                      <div className=\"px-3 py-2 text-xs font-medium text-muted-foreground bg-muted/30\">\n                        Basic Types\n                      </div>\n                      {sectionCategories.basic.map(type => {\n                        const Icon = type.icon;\n                        return (\n                          <SelectItem\n                            key={type.value}\n                            value={type.value}\n                            className=\"p-3\"\n                          >\n                            <div className=\"flex items-center space-x-3 w-full\">\n                              <Icon\n                                className={`w-4 h-4 ${type.color} flex-shrink-0`}\n                              />\n                              <div className=\"flex-1 min-w-0\">\n                                <div className=\"flex items-center space-x-2 mb-1\">\n                                  <span className=\"font-medium\">\n                                    {type.label}\n                                  </span>\n                                </div>\n                                <div className=\"text-xs text-muted-foreground\">\n                                  {type.description}\n                                </div>\n                              </div>\n                            </div>\n                          </SelectItem>\n                        );\n                      })}\n\n                      {/* Rest & Recovery */}\n                      <div className=\"px-3 py-2 text-xs font-medium text-muted-foreground bg-muted/30 mt-1\">\n                        Rest & Recovery\n                      </div>\n                      {sectionCategories.rest.map(type => {\n                        const Icon = type.icon;\n                        return (\n                          <SelectItem\n                            key={type.value}\n                            value={type.value}\n                            className=\"p-3\"\n                          >\n                            <div className=\"flex items-center space-x-3 w-full\">\n                              <Icon\n                                className={`w-4 h-4 ${type.color} flex-shrink-0`}\n                              />\n                              <div className=\"flex-1 min-w-0\">\n                                <div className=\"flex items-center space-x-2 mb-1\">\n                                  <span className=\"font-medium\">\n                                    {type.label}\n                                  </span>\n                                </div>\n                                <div className=\"text-xs text-muted-foreground\">\n                                  {type.description}\n                                </div>\n                              </div>\n                            </div>\n                          </SelectItem>\n                        );\n                      })}\n\n                      {/* Structured Types */}\n                      <div className=\"px-3 py-2 text-xs font-medium text-muted-foreground bg-muted/30 mt-1\">\n                        Structured Types\n                      </div>\n                      {sectionCategories.structured.map(type => {\n                        const Icon = type.icon;\n                        return (\n                          <SelectItem\n                            key={type.value}\n                            value={type.value}\n                            className=\"p-3\"\n                          >\n                            <div className=\"flex items-center space-x-3 w-full\">\n                              <Icon\n                                className={`w-4 h-4 ${type.color} flex-shrink-0`}\n                              />\n                              <div className=\"flex-1 min-w-0\">\n                                <div className=\"flex items-center space-x-2 mb-1\">\n                                  <span className=\"font-medium\">\n                                    {type.label}\n                                  </span>\n                                </div>\n                                <div className=\"text-xs text-muted-foreground\">\n                                  {type.description}\n                                </div>\n                              </div>\n                            </div>\n                          </SelectItem>\n                        );\n                      })}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Section Name</Label>\n                <Input\n                  placeholder=\"e.g., Steep Ascent to Summit\"\n                  value={currentSection.name || ''}\n                  onChange={e =>\n                    setCurrentSection(prev => ({\n                      ...prev,\n                      name: e.target.value,\n                    }))\n                  }\n                  className=\"h-10\"\n                />\n              </div>\n\n              {/* Repeat Option */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Switch\n                      checked={currentSection.isRepeated || false}\n                      onCheckedChange={checked => {\n                        setCurrentSection(prev => ({\n                          ...prev,\n                          isRepeated: checked,\n                        }));\n                        if (!checked) {\n                          setRepeatIntervals([]);\n                        } else {\n                          // Auto-populate smart defaults when manually enabling\n                          const smartDefaults = getSmartDefaults(\n                            currentSection.type || 'warm-up'\n                          );\n                          if (smartDefaults) {\n                            setCurrentSection(prev => ({\n                              ...prev,\n                              repeatCount: smartDefaults.repeatCount,\n                            }));\n                            setRepeatIntervals(\n                              smartDefaults.intervals.map((interval, index) => {\n                                const mappedInterval: Partial<TrailRunningInterval> =\n                                  {\n                                    ...interval,\n                                    id: `${Date.now()}-${index}`,\n                                    type:\n                                      (interval.type as IntervalType) || 'run',\n                                    intensityTarget: interval.intensityTarget\n                                      ? {\n                                          ...interval.intensityTarget,\n                                          type: interval.intensityTarget\n                                            .type as\n                                            | 'heart-rate'\n                                            | 'speed'\n                                            | 'power'\n                                            | 'cadence'\n                                            | 'rpe',\n                                        }\n                                      : undefined,\n                                  };\n\n                                if (mappedInterval.type === 'rest') {\n                                  delete mappedInterval.intensityTarget;\n                                }\n\n                                return mappedInterval;\n                              })\n                            );\n                          }\n                        }\n                      }}\n                    />\n                    <Label className=\"text-sm font-medium\">\n                      Create Repeated Section Block\n                    </Label>\n                  </div>\n                </div>\n\n                {sectionTypes.find(t => t.value === currentSection.type)\n                  ?.autoRepeat && (\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-6 h-6 rounded-full bg-blue-600 flex items-center justify-center flex-shrink-0 mt-0.5\">\n                        <span className=\"text-sm text-white\">💡</span>\n                      </div>\n                      <div className=\"space-y-2 flex-1\">\n                        <p className=\"text-sm font-medium text-blue-800\">\n                          Template Applied\n                        </p>\n                        <p className=\"text-xs text-blue-700 leading-relaxed\">\n                          We&apos;ve automatically configured this{' '}\n                          {sectionTypes\n                            .find(t => t.value === currentSection.type)\n                            ?.label.toLowerCase()}{' '}\n                          with{' '}\n                          {\n                            getSmartDefaults(currentSection.type || 'warm-up')\n                              ?.repeatCount\n                          }{' '}\n                          repetitions and suggested intervals. You can customize\n                          them below.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {currentSection.isRepeated && (\n                  <div className=\"space-y-4 p-4 bg-gray-50 rounded-lg border border-gray-200\">\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-sm font-medium\">\n                        Number of Repetitions\n                      </Label>\n                      <Input\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"20\"\n                        value={currentSection.repeatCount || 1}\n                        onChange={e =>\n                          setCurrentSection(prev => ({\n                            ...prev,\n                            repeatCount: parseInt(e.target.value) || 1,\n                          }))\n                        }\n                        className=\"h-10\"\n                      />\n                    </div>\n\n                    {/* Skip Last Rest Option */}\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Switch\n                            checked={skipLastRest}\n                            onCheckedChange={setSkipLastRest}\n                          />\n                          <Label className=\"text-sm\">\n                            Skip last rest/recovery interval\n                          </Label>\n                        </div>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground leading-relaxed\">\n                        When enabled, the last interval will be removed if\n                        it&apos;s a rest or recovery type\n                      </p>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <Label className=\"text-sm font-medium\">Intervals</Label>\n                        <div className=\"flex items-center space-x-2\">\n                          {getSmartDefaults(currentSection.type || 'warm-up') &&\n                            repeatIntervals.length === 0 && (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => {\n                                  const smartDefaults = getSmartDefaults(\n                                    currentSection.type || 'warm-up'\n                                  );\n                                  if (smartDefaults) {\n                                    setRepeatIntervals(\n                                      smartDefaults.intervals.map(\n                                        (interval, index) => {\n                                          const mappedInterval: Partial<TrailRunningInterval> =\n                                            {\n                                              ...interval,\n                                              id: `${Date.now()}-${index}`,\n                                              type:\n                                                (interval.type as IntervalType) ||\n                                                'run',\n                                              intensityTarget:\n                                                interval.intensityTarget\n                                                  ? {\n                                                      ...interval.intensityTarget,\n                                                      type: interval\n                                                        .intensityTarget\n                                                        .type as\n                                                        | 'heart-rate'\n                                                        | 'speed'\n                                                        | 'power'\n                                                        | 'cadence'\n                                                        | 'rpe',\n                                                    }\n                                                  : undefined,\n                                            };\n\n                                          if (mappedInterval.type === 'rest') {\n                                            delete mappedInterval.intensityTarget;\n                                          }\n\n                                          return mappedInterval;\n                                        }\n                                      )\n                                    );\n                                  }\n                                }}\n                                className=\"text-blue-600 border-blue-300 hover:bg-blue-50 h-8\"\n                              >\n                                Use Template\n                              </Button>\n                            )}\n                          <Button\n                            size=\"sm\"\n                            onClick={addRepeatInterval}\n                            className=\"bg-orange-600 hover:bg-orange-700 h-8\"\n                          >\n                            <Plus className=\"w-4 h-4 mr-1\" />\n                            Add Interval\n                          </Button>\n                        </div>\n                      </div>\n\n                      {repeatIntervals.map((interval, index) => (\n                        <div\n                          key={index}\n                          className=\"border border-gray-200 rounded p-3 space-y-3\"\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <Input\n                              placeholder=\"Interval name\"\n                              value={interval.name || ''}\n                              onChange={e =>\n                                updateRepeatInterval(\n                                  index,\n                                  'name',\n                                  e.target.value\n                                )\n                              }\n                              className=\"flex-1 mr-2\"\n                            />\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => removeRepeatInterval(index)}\n                              className=\"text-red-600\"\n                            >\n                              <X className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n\n                          {/* Interval Type Selection */}\n                          <div className=\"space-y-2\">\n                            <Label className=\"text-xs\">Type</Label>\n                            <Select\n                              value={interval.type || 'run'}\n                              onValueChange={(value: IntervalType) =>\n                                updateRepeatInterval(index, 'type', value)\n                              }\n                            >\n                              <SelectTrigger className=\"text-xs\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {intervalTypes.map(type => {\n                                  const Icon = type.icon;\n                                  return (\n                                    <SelectItem\n                                      key={type.value}\n                                      value={type.value}\n                                    >\n                                      <div className=\"flex items-center space-x-2\">\n                                        <Icon\n                                          className={`w-3 h-3 ${type.color}`}\n                                        />\n                                        <span className=\"text-xs\">\n                                          {type.label}\n                                        </span>\n                                      </div>\n                                    </SelectItem>\n                                  );\n                                })}\n                              </SelectContent>\n                            </Select>\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            {interval.type === 'rest' ? (\n                              // Rest intervals only show duration\n                              <>\n                                <div className=\"text-xs text-muted-foreground\">\n                                  <span>Duration (min)</span>\n                                </div>\n                                <Input\n                                  type=\"number\"\n                                  placeholder=\"2\"\n                                  value={interval.duration || ''}\n                                  onChange={e =>\n                                    updateRepeatInterval(\n                                      index,\n                                      'duration',\n                                      parseInt(e.target.value) || 0\n                                    )\n                                  }\n                                />\n                              </>\n                            ) : (\n                              // All other intervals show distance, duration, and elevation\n                              <>\n                                <div className=\"grid grid-cols-3 gap-2 text-xs text-muted-foreground\">\n                                  <span>Distance (km)</span>\n                                  <span>Duration (min)</span>\n                                  <span>Elevation (m)</span>\n                                </div>\n                                <div className=\"grid grid-cols-3 gap-2\">\n                                  <Input\n                                    type=\"number\"\n                                    step=\"0.1\"\n                                    placeholder=\"0.5\"\n                                    value={interval.distance || ''}\n                                    onChange={e =>\n                                      updateRepeatInterval(\n                                        index,\n                                        'distance',\n                                        parseFloat(e.target.value) || 0\n                                      )\n                                    }\n                                  />\n                                  <Input\n                                    type=\"number\"\n                                    placeholder=\"5\"\n                                    value={interval.duration || ''}\n                                    onChange={e =>\n                                      updateRepeatInterval(\n                                        index,\n                                        'duration',\n                                        parseInt(e.target.value) || 0\n                                      )\n                                    }\n                                  />\n                                  <Input\n                                    type=\"number\"\n                                    placeholder=\"30\"\n                                    value={interval.elevationChange || ''}\n                                    onChange={e =>\n                                      updateRepeatInterval(\n                                        index,\n                                        'elevationChange',\n                                        parseInt(e.target.value) || 0\n                                      )\n                                    }\n                                  />\n                                </div>\n                              </>\n                            )}\n                          </div>\n\n                          {interval.type !== 'rest' && (\n                            <IntensityTargetConfiguration\n                              target={interval.intensityTarget}\n                              onChange={newTarget =>\n                                updateRepeatInterval(\n                                  index,\n                                  'intensityTarget',\n                                  newTarget\n                                )\n                              }\n                            />\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {!currentSection.isRepeated && (\n                <>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label>Distance (km)</Label>\n                      <Input\n                        type=\"number\"\n                        step=\"0.1\"\n                        placeholder=\"2.5\"\n                        value={currentSection.distance || ''}\n                        onChange={e =>\n                          setCurrentSection(prev => ({\n                            ...prev,\n                            distance: parseFloat(e.target.value) || undefined,\n                          }))\n                        }\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label>Duration (min)</Label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"15\"\n                        value={currentSection.duration || ''}\n                        onChange={e =>\n                          setCurrentSection(prev => ({\n                            ...prev,\n                            duration: parseInt(e.target.value) || undefined,\n                          }))\n                        }\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label>Elevation Change (m)</Label>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"e.g., 200 (positive for uphill)\"\n                      value={currentSection.elevationChange || ''}\n                      onChange={e =>\n                        setCurrentSection(prev => ({\n                          ...prev,\n                          elevationChange:\n                            parseInt(e.target.value) || undefined,\n                        }))\n                      }\n                    />\n                  </div>\n                </>\n              )}\n\n              {!currentSection.isRepeated && currentSection.type !== 'rest' && (\n                <IntensityTargetConfiguration\n                  target={currentSection.intensityTarget}\n                  onChange={newTarget =>\n                    setCurrentSection(prev => ({\n                      ...prev,\n                      intensityTarget: newTarget,\n                    }))\n                  }\n                />\n              )}\n\n              <Button\n                onClick={addSection}\n                disabled={!currentSection.name}\n                className=\"w-full bg-orange-600 hover:bg-orange-700\"\n              >\n                {editingSection ? 'Update Section' : 'Add Section'}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Sections List */}\n          <Card className=\"h-[600px] flex flex-col\">\n            <CardHeader className=\"flex-shrink-0\">\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>Training Sections ({workoutData.sections.length})</span>\n                <div className=\"text-sm text-gray-600\">\n                  {workoutData.targetDistance}km •{' '}\n                  {workoutData.estimatedDuration}min\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"flex-1 overflow-y-auto pr-2\">\n              {workoutData.sections.length === 0 ? (\n                <p className=\"text-gray-500 text-center py-8\">\n                  No sections added yet\n                </p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {workoutData.sections.map(section => {\n                    const SectionIcon =\n                      sectionTypes.find(t => t.value === section.type)?.icon ||\n                      Clock;\n                    const sectionColor =\n                      sectionTypes.find(t => t.value === section.type)?.color ||\n                      'text-gray-600';\n\n                    return (\n                      <div\n                        key={section.id}\n                        className=\"border border-gray-200 rounded-lg p-4 hover:border-gray-300 transition-colors\"\n                      >\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"flex items-center space-x-2\">\n                            <SectionIcon\n                              className={`w-4 h-4 ${sectionColor}`}\n                            />\n                            <span className=\"font-medium\">{section.name}</span>\n                            {section.isRepeated && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                <Repeat className=\"w-3 h-3 mr-1\" />\n                                {section.repeatCount}x\n                              </Badge>\n                            )}\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => editSection(section)}\n                              className=\"text-blue-600 hover:text-blue-700\"\n                            >\n                              Edit\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => removeSection(section.id)}\n                              className=\"text-red-600 hover:text-red-700\"\n                            >\n                              Remove\n                            </Button>\n                          </div>\n                        </div>\n\n                        {section.isRepeated && section.repeatSections ? (\n                          <div className=\"space-y-3\">\n                            {/* Overall section info */}\n                            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <span className=\"text-sm font-medium text-blue-800\">\n                                  Block Overview\n                                </span>\n                                <div className=\"flex items-center space-x-2\">\n                                  <span className=\"text-xs text-blue-600\">\n                                    {section.repeatCount} repetitions\n                                  </span>\n                                  {(\n                                    section as TrailRunningSection & {\n                                      skipLastRest?: boolean;\n                                    }\n                                  ).skipLastRest && (\n                                    <Badge\n                                      variant=\"outline\"\n                                      className=\"text-xs bg-orange-50 text-orange-600 border-orange-200\"\n                                    >\n                                      Skip last rest\n                                    </Badge>\n                                  )}\n                                </div>\n                              </div>\n                              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                                <div>\n                                  <span className=\"text-xs text-blue-600 block\">\n                                    Total Distance\n                                  </span>\n                                  <span className=\"font-medium text-blue-900\">\n                                    {Number(\n                                      (\n                                        section.repeatSections.reduce(\n                                          (sum, sub) =>\n                                            sum + (sub.distance || 0),\n                                          0\n                                        ) * (section.repeatCount || 1)\n                                      ).toFixed(2)\n                                    )}\n                                    km\n                                  </span>\n                                </div>\n                                <div>\n                                  <span className=\"text-xs text-blue-600 block\">\n                                    Total Duration\n                                  </span>\n                                  <span className=\"font-medium text-blue-900\">\n                                    {section.repeatSections.reduce(\n                                      (sum, sub) => sum + (sub.duration || 0),\n                                      0\n                                    ) * (section.repeatCount || 1)}\n                                    min\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n\n                            {/* Intervals */}\n                            <div>\n                              <p className=\"text-sm font-medium text-gray-700 mb-2\">\n                                Per Repetition:\n                              </p>\n                              <div className=\"space-y-2\">\n                                {section.repeatSections.map(\n                                  (interval, intervalIndex) => (\n                                    <div\n                                      key={intervalIndex}\n                                      className=\"ml-4 p-3 bg-gray-50 rounded-lg\"\n                                    >\n                                      <div className=\"flex items-center justify-between mb-2\">\n                                        <span className=\"font-medium text-sm\">\n                                          {interval.name}\n                                        </span>\n                                        {interval.type !== 'rest' && (\n                                          <span\n                                            className={`px-2 py-1 rounded-full text-xs font-medium ${getIntensityTargetColor(\n                                              interval.intensityTarget\n                                            )}`}\n                                          >\n                                            {formatIntensityTargetDisplay(\n                                              interval.intensityTarget\n                                            )}\n                                          </span>\n                                        )}\n                                      </div>\n                                      {interval.type === 'rest' ? (\n                                        // Rest intervals only show duration\n                                        <div className=\"text-sm text-gray-600\">\n                                          <div>\n                                            <span className=\"text-xs text-gray-500 block\">\n                                              Duration\n                                            </span>\n                                            <span className=\"font-medium\">\n                                              {interval.duration\n                                                ? `${interval.duration}min`\n                                                : 'Not set'}\n                                            </span>\n                                          </div>\n                                        </div>\n                                      ) : (\n                                        // All other intervals show distance, duration, and elevation\n                                        <div className=\"grid grid-cols-3 gap-4 text-sm text-gray-600\">\n                                          <div>\n                                            <span className=\"text-xs text-gray-500 block\">\n                                              Distance\n                                            </span>\n                                            <span>\n                                              {interval.distance\n                                                ? `${interval.distance}km`\n                                                : 'Not set'}\n                                            </span>\n                                          </div>\n                                          <div>\n                                            <span className=\"text-xs text-gray-500 block\">\n                                              Duration\n                                            </span>\n                                            <span>\n                                              {interval.duration\n                                                ? `${interval.duration}min`\n                                                : 'Not set'}\n                                            </span>\n                                          </div>\n                                          <div>\n                                            <span className=\"text-xs text-gray-500 block\">\n                                              Elevation\n                                            </span>\n                                            <span>\n                                              {interval.elevationChange\n                                                ? `${\n                                                    interval.elevationChange > 0\n                                                      ? '+'\n                                                      : ''\n                                                  }${interval.elevationChange}m`\n                                                : '0m'}\n                                            </span>\n                                          </div>\n                                        </div>\n                                      )}\n                                    </div>\n                                  )\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        ) : (\n                          <div className=\"space-y-3\">\n                            {/* Intensity target for non-repeated sections */}\n                            {section.type !== 'rest' && (\n                              <div className=\"flex items-center space-x-2\">\n                                <span className=\"text-sm text-gray-600\">\n                                  Intensity:\n                                </span>\n                                <span\n                                  className={`px-2 py-1 rounded-full text-xs font-medium ${getIntensityTargetColor(\n                                    section.intensityTarget\n                                  )}`}\n                                >\n                                  {formatIntensityTargetDisplay(\n                                    section.intensityTarget\n                                  )}\n                                </span>\n                              </div>\n                            )}\n\n                            {/* Section details */}\n                            <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                              <div>\n                                <span className=\"text-xs text-gray-500 block\">\n                                  Distance\n                                </span>\n                                <span className=\"font-medium\">\n                                  {section.distance\n                                    ? `${section.distance}km`\n                                    : 'Not set'}\n                                </span>\n                              </div>\n                              <div>\n                                <span className=\"text-xs text-gray-500 block\">\n                                  Duration\n                                </span>\n                                <span className=\"font-medium\">\n                                  {section.duration\n                                    ? `${section.duration}min`\n                                    : 'Not set'}\n                                </span>\n                              </div>\n                              <div>\n                                <span className=\"text-xs text-gray-500 block\">\n                                  Elevation\n                                </span>\n                                <span className=\"font-medium\">\n                                  {section.elevationChange\n                                    ? `${\n                                        section.elevationChange > 0 ? '+' : ''\n                                      }${section.elevationChange}m`\n                                    : '0m'}\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6909, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/workout/SetManagement.tsx"],"sourcesContent":["import { Plus, Target, Flame, X as Failure, Zap } from 'lucide-react';\nimport { useState, useEffect } from 'react';\n\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\n\nexport type SetType = 'warmup' | 'normal' | 'failure' | 'dropset';\nexport type RepType = 'fixed' | 'range';\nexport type ProgressionMethod =\n  | 'linear'\n  | 'dual'\n  | 'inverse-pyramid'\n  | 'myo-reps'\n  | 'widowmaker'\n  | 'amrap';\n\nexport interface WorkoutSet {\n  id: string;\n  setNumber: number;\n  setType: SetType;\n  repType: RepType;\n  reps: number | null;\n  repsMin?: number;\n  repsMax?: number;\n  weight: number | null;\n  rpe: number | null;\n  notes: string;\n}\n\ninterface SetManagementProps {\n  sets: WorkoutSet[];\n  onSetsChange: (sets: WorkoutSet[]) => void;\n  onNotesClick: (setId: string) => void;\n  progressionMethod?: ProgressionMethod;\n}\n\n// Configuration for each progression method\nconst getProgressionConfig = (method: ProgressionMethod | undefined) => {\n  if (!method) return null;\n\n  const configs = {\n    linear: {\n      allowRepTypeChange: true,\n      allowSetTypeChange: true,\n      allowAddRemoveSets: true,\n      allowRepsChange: true,\n      allowRpeChange: true,\n      lockMessage: 'Linear progression uses fixed reps and structure',\n      description: 'Fixed 3x5 structure',\n    },\n    dual: {\n      allowRepTypeChange: true,\n      allowSetTypeChange: true,\n      allowAddRemoveSets: true,\n      allowRepsChange: true,\n      allowRpeChange: true,\n      lockMessage: 'Dual progression uses rep ranges',\n      description: 'Rep ranges with progression',\n    },\n    'inverse-pyramid': {\n      allowRepTypeChange: true,\n      allowSetTypeChange: true,\n      allowAddRemoveSets: true,\n      allowRepsChange: true,\n      allowRpeChange: true,\n      lockMessage: 'Inverse pyramid structure is predefined',\n      description: 'Decreasing weight, increasing reps',\n    },\n    'myo-reps': {\n      allowRepTypeChange: true,\n      allowSetTypeChange: true,\n      allowAddRemoveSets: true,\n      allowRepsChange: true,\n      allowRpeChange: true,\n      lockMessage: 'Myo-reps structure is predefined',\n      description: 'Activation set + mini-sets',\n    },\n    widowmaker: {\n      allowRepTypeChange: true,\n      allowSetTypeChange: true,\n      allowAddRemoveSets: true,\n      allowRepsChange: true,\n      allowRpeChange: true,\n      lockMessage: 'Widowmaker is a single failure set',\n      description: 'Single high-rep failure set',\n    },\n    amrap: {\n      allowRepTypeChange: true,\n      allowSetTypeChange: true,\n      allowAddRemoveSets: true,\n      allowRepsChange: true,\n      allowRpeChange: true,\n      lockMessage: 'AMRAP structure is predefined',\n      description: 'Regular sets + final AMRAP',\n    },\n  };\n\n  return configs[method];\n};\n\nexport default function SetManagement({\n  sets,\n  onSetsChange,\n  onNotesClick,\n  progressionMethod,\n}: SetManagementProps) {\n  const [openPopoverId, setOpenPopoverId] = useState<string | null>(null);\n  const [initialized, setInitialized] = useState(false);\n\n  const config = getProgressionConfig(progressionMethod);\n\n  // Initialize repType for any sets that don't have it defined\n  useEffect(() => {\n    if (!initialized) {\n      const setsNeedingInitialization = sets.filter(set => !set.repType);\n      if (setsNeedingInitialization.length > 0) {\n        const updatedSets = sets.map(set => ({\n          ...set,\n          repType: set.repType || ('fixed' as RepType),\n        }));\n        onSetsChange(updatedSets);\n      }\n      setInitialized(true);\n    }\n  }, [sets, onSetsChange, initialized]);\n\n  const addSet = () => {\n    const newSet: WorkoutSet = {\n      id: Date.now().toString(),\n      setNumber: sets.length + 1,\n      setType: 'normal',\n      repType: 'fixed',\n      reps: null,\n      repsMin: undefined,\n      repsMax: undefined,\n      weight: null,\n      rpe: null,\n      notes: '',\n    };\n    onSetsChange([...sets, newSet]);\n  };\n\n  const removeSet = (setId: string) => {\n    const updatedSets = sets\n      .filter(set => set.id !== setId)\n      .map((set, index) => ({ ...set, setNumber: index + 1 }));\n    onSetsChange(updatedSets);\n  };\n\n  const updateSet = (setId: string, updates: Partial<WorkoutSet>) => {\n    const updatedSets = sets.map(set => {\n      if (set.id === setId) {\n        const updatedSet = { ...set, ...updates };\n\n        // Handle set type changes\n        if (updates.setType === 'failure') {\n          // For failure sets, force fixed reps and clear rep values\n          updatedSet.repType = 'fixed';\n          updatedSet.reps = null;\n          updatedSet.repsMin = undefined;\n          updatedSet.repsMax = undefined;\n        }\n\n        // Clean up data when switching rep types (only for non-failure sets)\n        if (updates.repType && updatedSet.setType !== 'failure') {\n          if (updates.repType === 'fixed') {\n            updatedSet.repsMin = undefined;\n            updatedSet.repsMax = undefined;\n          } else if (updates.repType === 'range') {\n            updatedSet.reps = null;\n          }\n        }\n\n        return updatedSet;\n      }\n      return set;\n    });\n    onSetsChange(updatedSets);\n  };\n\n  // Calculate the display number/letter for each set\n  const getSetDisplay = (set: WorkoutSet, index: number) => {\n    if (set.setType === 'normal') {\n      // Count how many normal sets come before this one\n      const normalSetsBefore = sets\n        .slice(0, index)\n        .filter(s => s.setType === 'normal').length;\n      return (normalSetsBefore + 1).toString();\n    } else {\n      // Return letter for special sets\n      switch (set.setType) {\n        case 'warmup':\n          return 'W';\n        case 'failure':\n          return 'F';\n        case 'dropset':\n          return 'D';\n        default:\n          return (index + 1).toString();\n      }\n    }\n  };\n\n  const getSetTypeColor = (type: SetType) => {\n    switch (type) {\n      case 'warmup':\n        return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'failure':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'dropset':\n        return 'bg-purple-100 text-purple-800 border-purple-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const setTypeOptions = [\n    { value: 'normal', label: 'Normal Set', icon: null },\n    {\n      value: 'warmup',\n      label: 'Warm-up Set',\n      icon: <Target className=\"w-4 h-4\" />,\n    },\n    {\n      value: 'failure',\n      label: 'Failure Set',\n      icon: <Flame className=\"w-4 h-4\" />,\n    },\n    { value: 'dropset', label: 'Drop Set', icon: <Zap className=\"w-4 h-4\" /> },\n  ];\n\n  const handleSetTypeChange = (setId: string, newType: SetType) => {\n    updateSet(setId, { setType: newType });\n    setOpenPopoverId(null);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Add Set Button */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          {progressionMethod && config && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {config.description}\n            </Badge>\n          )}\n        </div>\n        <Button onClick={addSet} size=\"sm\" variant=\"outline\">\n          <Plus className=\"w-4 h-4 mr-1\" />\n          Add Set\n        </Button>\n      </div>\n\n      {/* Sets Header */}\n      <div className=\"grid grid-cols-8 gap-2 text-sm font-medium text-gray-600 border-b border-gray-200 pb-2\">\n        <div className=\"col-span-1\">SET</div>\n        <div className=\"col-span-1\">REPS</div>\n        <div className=\"col-span-2\">REP VALUES</div>\n        <div className=\"col-span-1\">WEIGHT (KG)</div>\n        <div className=\"col-span-1\">RPE</div>\n        <div className=\"col-span-1\">NOTES</div>\n        <div className=\"col-span-1\" />\n      </div>\n\n      {/* Sets List */}\n      <div className=\"space-y-2\">\n        {sets.map((set, index) => (\n          <div\n            key={set.id}\n            className=\"grid grid-cols-8 gap-2 items-center py-2\"\n          >\n            {/* Set Number/Type Selector */}\n            <div className=\"col-span-1\">\n              <Popover\n                open={openPopoverId === set.id}\n                onOpenChange={open => setOpenPopoverId(open ? set.id : null)}\n              >\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className={`w-10 h-8 p-0 relative flex items-center justify-center rounded text-sm font-medium hover:opacity-80 ${\n                      set.setType !== 'normal'\n                        ? getSetTypeColor(set.setType)\n                        : 'bg-gray-100 text-gray-800'\n                    }`}\n                  >\n                    <span>{getSetDisplay(set, index)}</span>\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-48 p-2\" align=\"start\">\n                  <div className=\"space-y-1\">\n                    <div className=\"text-xs font-medium text-gray-700 mb-2\">\n                      Set Type\n                    </div>\n                    {setTypeOptions.map(option => (\n                      <Button\n                        key={option.value}\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() =>\n                          handleSetTypeChange(set.id, option.value as SetType)\n                        }\n                        className={`w-full justify-start h-8 ${\n                          set.setType === option.value\n                            ? 'bg-primary/10 text-primary'\n                            : ''\n                        }`}\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          {option.icon}\n                          <span className=\"text-xs\">{option.label}</span>\n                        </div>\n                      </Button>\n                    ))}\n                  </div>\n                </PopoverContent>\n              </Popover>\n            </div>\n\n            {/* Rep Type Selector */}\n            <div className=\"col-span-1\">\n              <Select\n                value={set.repType || 'fixed'}\n                onValueChange={(value: RepType) =>\n                  updateSet(set.id, { repType: value })\n                }\n                disabled={set.setType === 'failure'}\n              >\n                <SelectTrigger\n                  className={`w-full h-8 ${\n                    set.setType === 'failure'\n                      ? 'opacity-50 cursor-not-allowed'\n                      : ''\n                  }`}\n                >\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"fixed\">Fixed</SelectItem>\n                  <SelectItem value=\"range\">Range</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Reps Input */}\n            <div className=\"col-span-2\">\n              {set.setType === 'failure' ? (\n                <div className=\"flex items-center justify-center h-8 text-xs text-red-600 font-medium bg-red-50 border border-red-200 rounded\">\n                  To failure\n                </div>\n              ) : set.repType === 'range' ? (\n                <div className=\"flex items-center gap-1\">\n                  <Input\n                    type=\"number\"\n                    placeholder=\"Min\"\n                    value={set.repsMin || ''}\n                    onChange={e =>\n                      updateSet(set.id, {\n                        repsMin: e.target.value\n                          ? parseInt(e.target.value)\n                          : undefined,\n                      })\n                    }\n                    className=\"h-8 text-center\"\n                    min=\"0\"\n                  />\n                  <span className=\"text-gray-400 text-xs\">-</span>\n                  <Input\n                    type=\"number\"\n                    placeholder=\"Max\"\n                    value={set.repsMax || ''}\n                    onChange={e =>\n                      updateSet(set.id, {\n                        repsMax: e.target.value\n                          ? parseInt(e.target.value)\n                          : undefined,\n                      })\n                    }\n                    className=\"h-8 text-center\"\n                    min=\"0\"\n                  />\n                </div>\n              ) : (\n                <Input\n                  type=\"number\"\n                  placeholder=\"10\"\n                  value={set.reps || ''}\n                  onChange={e =>\n                    updateSet(set.id, {\n                      reps: e.target.value ? parseInt(e.target.value) : null,\n                    })\n                  }\n                  className=\"h-8 text-center\"\n                  min=\"0\"\n                />\n              )}\n            </div>\n\n            {/* Weight Input */}\n            <div className=\"col-span-1\">\n              <Input\n                type=\"number\"\n                placeholder=\"0\"\n                value={set.weight || ''}\n                onChange={e =>\n                  updateSet(set.id, {\n                    weight: e.target.value ? parseFloat(e.target.value) : null,\n                  })\n                }\n                className=\"h-8 text-center\"\n                min=\"0\"\n                step=\"0.5\"\n              />\n            </div>\n\n            {/* RPE Input */}\n            <div className=\"col-span-1\">\n              <Input\n                type=\"number\"\n                placeholder=\"8\"\n                value={set.rpe || ''}\n                onChange={e =>\n                  updateSet(set.id, {\n                    rpe: e.target.value ? parseInt(e.target.value) : null,\n                  })\n                }\n                className=\"h-8 text-center\"\n                min=\"1\"\n                max=\"10\"\n              />\n            </div>\n\n            {/* Notes */}\n            <div className=\"col-span-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onNotesClick(set.id)}\n                className={`h-8 w-8 p-0 flex items-center justify-center ${\n                  set.notes ? 'text-blue-600' : 'text-gray-400'\n                }`}\n                title={set.notes ? 'Edit notes' : 'Add notes'}\n              >\n                📝\n              </Button>\n            </div>\n\n            {/* Delete Action */}\n            <div className=\"col-span-1 flex justify-end\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => removeSet(set.id)}\n                className=\"h-8 w-8 p-0 text-gray-400 hover:text-red-600\"\n                title=\"Delete set\"\n              >\n                <Failure className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {sets.length === 0 && (\n        <div className=\"text-center py-8 text-gray-500\">\n          <div className=\"mb-4\">\n            <Target className=\"w-12 h-12 mx-auto text-gray-300\" />\n          </div>\n          <p>No sets added yet</p>\n          <p className=\"text-sm\">Click &quot;Add Set&quot; to get started</p>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 7651, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/routines/RoutineCreation.tsx"],"sourcesContent":["'use client';\n\nimport {\n  ArrowLeft,\n  Save,\n  Plus,\n  X,\n  Target,\n  Dumbbell,\n  Leaf,\n  ChevronDown,\n  ChevronUp,\n  Trash2,\n  FileText,\n  Timer,\n  MapPin,\n  ArrowUp,\n  ArrowDown,\n  Activity,\n  Waves,\n  Bike,\n  TrendingUp,\n} from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { useState, useEffect } from 'react';\n\nimport NotesModal from '@/components/shared/NotesModal';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip';\nimport ExerciseSelectionModal from '@/features/exercises/ExerciseSelectionModal';\nimport TrailRunningWorkout, {\n  TrailRunningWorkoutData,\n} from '@/features/routines/TrailRunningWorkout';\nimport SetManagement, { WorkoutSet } from '@/features/workout/SetManagement';\n\nexport type WorkoutType =\n  | 'strength'\n  | 'running'\n  | 'trail-running'\n  | 'swimming'\n  | 'cycling';\n\nexport type ProgressionMethod =\n  | 'linear'\n  | 'dual'\n  | 'inverse-pyramid'\n  | 'myo-reps'\n  | 'widowmaker'\n  | 'amrap';\n\ninterface RoutineCreationProps {\n  editRoutineId?: string;\n  mode?: 'create' | 'edit';\n}\n\ninterface Exercise {\n  id: string;\n  name: string;\n  category?: string;\n  muscleGroups?: string[];\n  sets: WorkoutSet[];\n  restTimer: string; // rest between sets\n  restAfter: string; // rest after this exercise\n  notes: string;\n  progressionMethod?: ProgressionMethod; // progression method for strength exercises\n  hasApproachSets?: boolean; // track if approach sets have been added\n  // EMOM specific properties\n  emomReps?: number; // target reps per minute\n  // TABATA specific properties (uses time intervals instead of sets)\n}\n\ninterface WorkoutSection {\n  id: string;\n  name: string;\n  type: 'warmup' | 'basic' | 'cooldown' | 'emom' | 'tabata';\n  exercises: Exercise[];\n  restAfter: string; // rest after this section\n  // EMOM specific properties\n  emomDuration?: number; // duration in minutes\n  // TABATA specific properties (always 4 minutes, 8 rounds)\n}\n\ninterface StrengthWorkout {\n  id: string;\n  name: string;\n  type: 'strength';\n  objective: string;\n  schedule: {\n    weeks: string;\n    day: string;\n    time: string;\n  };\n  sections: WorkoutSection[];\n}\n\ninterface RunningWorkout {\n  id: string;\n  name: string;\n  type: 'running' | 'trail-running' | 'swimming' | 'cycling';\n  objective: string;\n  schedule: {\n    weeks: string;\n    day: string;\n    time: string;\n  };\n  sections: WorkoutSection[];\n  trailRunningData?: TrailRunningWorkoutData; // For trail running specific data\n}\n\nexport default function RoutineCreation({\n  editRoutineId,\n  mode = 'create',\n}: RoutineCreationProps) {\n  const router = useRouter();\n  const [routineName, setRoutineName] = useState('');\n  const [duration, setDuration] = useState('4');\n  const [difficulty, setDifficulty] = useState('Beginner');\n  const [description, setDescription] = useState('');\n  const [objectives, setObjectives] = useState('');\n\n  // Modal states\n  const [exerciseModalOpen, setExerciseModalOpen] = useState(false);\n  const [notesModalOpen, setNotesModalOpen] = useState(false);\n\n  // Running workout inline creation state\n  const [creatingRunning, setCreatingRunning] = useState(false);\n  const [editingRunning, setEditingRunning] = useState<{\n    workoutId: string;\n    data: TrailRunningWorkoutData;\n  } | null>(null);\n\n  const [currentNotesContext, setCurrentNotesContext] = useState<{\n    type: 'exercise' | 'set';\n    workoutId: string;\n    sectionId: string;\n    exerciseId: string;\n    setId?: string;\n    currentNotes: string;\n  } | null>(null);\n  const [currentAddExerciseContext, setCurrentAddExerciseContext] = useState<{\n    workoutId: string;\n    sectionId: string;\n  } | null>(null);\n\n  // Collapsed workouts state\n  const [collapsedStrengthWorkouts, setCollapsedStrengthWorkouts] = useState<\n    Set<string>\n  >(new Set());\n  const [collapsedRunningWorkouts, setCollapsedRunningWorkouts] = useState<\n    Set<string>\n  >(new Set());\n\n  // Separate workout arrays\n  const [strengthWorkouts, setStrengthWorkouts] = useState<StrengthWorkout[]>(\n    []\n  );\n\n  const [runningWorkouts, setRunningWorkouts] = useState<RunningWorkout[]>([]);\n\n  // Load existing routine data when in edit mode\n  useEffect(() => {\n    if (mode === 'edit' && editRoutineId) {\n      // Mock data for editing - in a real app, this would come from an API\n      const existingRoutine = {\n        name: 'Full Body Split',\n        duration: '8',\n        difficulty: 'Intermediate',\n        description:\n          'A comprehensive full-body workout targeting all major muscle groups with compound movements.',\n        objectives:\n          'Build strength, increase muscle mass, and improve overall fitness through progressive overload',\n        strengthWorkouts: [\n          {\n            id: '1',\n            name: 'Full Body Strength A',\n            type: 'strength' as const,\n            objective:\n              'Build foundational strength across all major muscle groups with compound movements',\n            schedule: {\n              weeks: 'Week 1, 3, 5',\n              day: 'Monday',\n              time: '9:00 AM',\n            },\n            sections: [\n              {\n                id: '1',\n                name: 'Warm-up',\n                type: 'warmup' as const,\n                restAfter: '02:00',\n                exercises: [\n                  {\n                    id: '1',\n                    name: 'Dynamic Stretching',\n                    sets: [\n                      {\n                        id: '1',\n                        setNumber: 1,\n                        setType: 'normal' as const,\n                        repType: 'fixed' as const,\n                        reps: null,\n                        weight: null,\n                        rpe: null,\n                        notes: '',\n                      },\n                    ],\n                    restTimer: '00:15',\n                    restAfter: '01:00',\n                    notes: '',\n                    progressionMethod: 'linear' as const,\n                  },\n                ],\n              },\n              {\n                id: '2',\n                name: 'Basic Workout',\n                type: 'basic' as const,\n                restAfter: '03:00',\n                exercises: [\n                  {\n                    id: '2',\n                    name: 'Barbell Squat',\n                    sets: [\n                      {\n                        id: '1',\n                        setNumber: 1,\n                        setType: 'warmup' as const,\n                        repType: 'fixed' as const,\n                        reps: 10,\n                        weight: 60,\n                        rpe: 6,\n                        notes: '',\n                      },\n                      {\n                        id: '2',\n                        setNumber: 2,\n                        setType: 'normal' as const,\n                        repType: 'range' as const,\n                        reps: null,\n                        repsMin: 8,\n                        repsMax: 12,\n                        weight: 80,\n                        rpe: 8,\n                        notes: '',\n                      },\n                      {\n                        id: '3',\n                        setNumber: 3,\n                        setType: 'normal' as const,\n                        repType: 'range' as const,\n                        reps: null,\n                        repsMin: 8,\n                        repsMax: 12,\n                        weight: 80,\n                        rpe: 8,\n                        notes: '',\n                      },\n                      {\n                        id: '4',\n                        setNumber: 4,\n                        setType: 'failure' as const,\n                        repType: 'fixed' as const,\n                        reps: null,\n                        weight: 70,\n                        rpe: 10,\n                        notes: '',\n                      },\n                    ],\n                    restTimer: '02:00',\n                    restAfter: '02:30',\n                    notes: 'Focus on depth and controlled movement',\n                    progressionMethod: 'dual' as const,\n                  },\n                ],\n              },\n              {\n                id: '3',\n                name: 'Cool-down',\n                type: 'cooldown' as const,\n                restAfter: '00:00',\n                exercises: [\n                  {\n                    id: '3',\n                    name: 'Static Stretching',\n                    sets: [],\n                    restTimer: '00:00',\n                    restAfter: '00:00',\n                    notes: '',\n                    progressionMethod: 'linear' as const,\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n        runningWorkouts: runningWorkouts,\n      };\n\n      setRoutineName(existingRoutine.name);\n      setDuration(existingRoutine.duration);\n      setDifficulty(existingRoutine.difficulty);\n      setDescription(existingRoutine.description);\n      setObjectives(existingRoutine.objectives);\n      setStrengthWorkouts(existingRoutine.strengthWorkouts);\n      setRunningWorkouts(existingRoutine.runningWorkouts);\n    }\n  }, [mode, editRoutineId]);\n\n  // Progression method options with descriptions\n  const progressionMethods = [\n    {\n      value: 'linear',\n      label: 'Linear Progression',\n      description: 'Increase weight consistently each session',\n    },\n    {\n      value: 'dual',\n      label: 'Dual Progression',\n      description: 'Progress reps first, then weight',\n    },\n    {\n      value: 'inverse-pyramid',\n      label: 'Inverse Pyramid',\n      description: 'Start heavy, decrease weight and increase reps',\n    },\n    {\n      value: 'myo-reps',\n      label: 'Myo-Reps',\n      description: 'Activation set followed by mini-sets to failure',\n    },\n    {\n      value: 'widowmaker',\n      label: 'Widowmaker',\n      description: 'Single high-rep set with moderate weight',\n    },\n    {\n      value: 'amrap',\n      label: 'AMRAP',\n      description: 'As Many Reps As Possible on final set',\n    },\n  ];\n\n  const getProgressionMethodLabel = (method: ProgressionMethod) => {\n    return progressionMethods.find(pm => pm.value === method)?.label || method;\n  };\n\n  const getProgressionMethodColor = (method: ProgressionMethod) => {\n    const colors = {\n      linear: 'bg-green-100 text-green-800 border-green-200',\n      dual: 'bg-blue-100 text-blue-800 border-blue-200',\n      'inverse-pyramid': 'bg-purple-100 text-purple-800 border-purple-200',\n      'myo-reps': 'bg-orange-100 text-orange-800 border-orange-200',\n      widowmaker: 'bg-red-100 text-red-800 border-red-200',\n      amrap: 'bg-yellow-100 text-yellow-800 border-yellow-200',\n    };\n    return colors[method] || 'bg-gray-100 text-gray-800 border-gray-200';\n  };\n\n  const handleAddStrengthWorkout = () => {\n    const workoutName = `Strength Workout ${strengthWorkouts.length + 1}`;\n    const defaultObjective = '';\n\n    const newStrengthWorkout: StrengthWorkout = {\n      id: Date.now().toString(),\n      name: workoutName,\n      type: 'strength',\n      objective: defaultObjective,\n      schedule: {\n        weeks: '',\n        day: 'Monday',\n        time: '',\n      },\n      sections: [],\n    };\n\n    setStrengthWorkouts([...strengthWorkouts, newStrengthWorkout]);\n  };\n\n  const handleAddRunningWorkout = () => {\n    setCreatingRunning(true);\n  };\n\n  const handleRunningSave = (runningData: TrailRunningWorkoutData) => {\n    if (editingRunning) {\n      // Edit existing workout\n      setRunningWorkouts(\n        runningWorkouts.map(workout => {\n          if (workout.id === editingRunning.workoutId) {\n            return {\n              ...workout,\n              name: runningData.name,\n              objective: runningData.description,\n              trailRunningData: runningData,\n            };\n          }\n          return workout;\n        })\n      );\n      setEditingRunning(null);\n    } else {\n      // Create new workout\n      const newWorkout: RunningWorkout = {\n        id: Date.now().toString(),\n        name: runningData.name,\n        type: 'running',\n        objective: runningData.description,\n        schedule: {\n          weeks: 'Week 1, 2, 3',\n          day: 'Tuesday',\n          time: '10:00 AM',\n        },\n        sections: [], // Running uses its own data structure\n        trailRunningData: runningData,\n      };\n\n      setRunningWorkouts([...runningWorkouts, newWorkout]);\n      setCreatingRunning(false);\n    }\n  };\n\n  const handleRunningCancel = () => {\n    setCreatingRunning(false);\n    setEditingRunning(null);\n  };\n\n  const handleEditRunning = (workoutId: string) => {\n    const workout = runningWorkouts.find(w => w.id === workoutId);\n    if (workout?.trailRunningData) {\n      setEditingRunning({ workoutId, data: workout.trailRunningData });\n    }\n  };\n\n  const removeStrengthWorkout = (workoutId: string) => {\n    setStrengthWorkouts(\n      strengthWorkouts.filter(workout => workout.id !== workoutId)\n    );\n  };\n\n  const removeRunningWorkout = (workoutId: string) => {\n    setRunningWorkouts(\n      runningWorkouts.filter(workout => workout.id !== workoutId)\n    );\n  };\n\n  const moveStrengthWorkout = (workoutId: string, direction: 'up' | 'down') => {\n    const currentIndex = strengthWorkouts.findIndex(w => w.id === workoutId);\n    if (currentIndex === -1) return;\n\n    const newIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;\n    if (newIndex < 0 || newIndex >= strengthWorkouts.length) return;\n\n    const newWorkouts = [...strengthWorkouts];\n    const [movedWorkout] = newWorkouts.splice(currentIndex, 1);\n    newWorkouts.splice(newIndex, 0, movedWorkout);\n    setStrengthWorkouts(newWorkouts);\n  };\n\n  const moveRunningWorkout = (workoutId: string, direction: 'up' | 'down') => {\n    const currentIndex = runningWorkouts.findIndex(w => w.id === workoutId);\n    if (currentIndex === -1) return;\n\n    const newIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;\n    if (newIndex < 0 || newIndex >= runningWorkouts.length) return;\n\n    const newWorkouts = [...runningWorkouts];\n    const [movedWorkout] = newWorkouts.splice(currentIndex, 1);\n    newWorkouts.splice(newIndex, 0, movedWorkout);\n    setRunningWorkouts(newWorkouts);\n  };\n\n  const updateStrengthWorkoutName = (workoutId: string, name: string) => {\n    setStrengthWorkouts(\n      strengthWorkouts.map(workout =>\n        workout.id === workoutId ? { ...workout, name } : workout\n      )\n    );\n  };\n\n  const updateRunningWorkoutName = (workoutId: string, name: string) => {\n    setRunningWorkouts(\n      runningWorkouts.map(workout =>\n        workout.id === workoutId ? { ...workout, name } : workout\n      )\n    );\n  };\n\n  const updateStrengthWorkoutObjective = (\n    workoutId: string,\n    objective: string\n  ) => {\n    setStrengthWorkouts(\n      strengthWorkouts.map(workout =>\n        workout.id === workoutId ? { ...workout, objective } : workout\n      )\n    );\n  };\n\n  const updateRunningWorkoutObjective = (\n    workoutId: string,\n    objective: string\n  ) => {\n    setRunningWorkouts(\n      runningWorkouts.map(workout =>\n        workout.id === workoutId ? { ...workout, objective } : workout\n      )\n    );\n  };\n\n  const updateStrengthWorkoutSchedule = (\n    workoutId: string,\n    field: keyof StrengthWorkout['schedule'],\n    value: string\n  ) => {\n    setStrengthWorkouts(\n      strengthWorkouts.map(workout =>\n        workout.id === workoutId\n          ? { ...workout, schedule: { ...workout.schedule, [field]: value } }\n          : workout\n      )\n    );\n  };\n\n  const updateRunningWorkoutSchedule = (\n    workoutId: string,\n    field: keyof RunningWorkout['schedule'],\n    value: string\n  ) => {\n    setRunningWorkouts(\n      runningWorkouts.map(workout =>\n        workout.id === workoutId\n          ? { ...workout, schedule: { ...workout.schedule, [field]: value } }\n          : workout\n      )\n    );\n  };\n\n  // Wrapper functions for renderWorkoutCard compatibility\n  const updateStrengthWorkoutScheduleWrapper = (\n    workoutId: string,\n    field: string,\n    value: string\n  ) => {\n    updateStrengthWorkoutSchedule(\n      workoutId,\n      field as keyof StrengthWorkout['schedule'],\n      value\n    );\n  };\n\n  const updateRunningWorkoutScheduleWrapper = (\n    workoutId: string,\n    field: string,\n    value: string\n  ) => {\n    updateRunningWorkoutSchedule(\n      workoutId,\n      field as keyof RunningWorkout['schedule'],\n      value\n    );\n  };\n\n  // Calculate estimated duration based on workout content\n  const calculateWorkoutDuration = (\n    workout: StrengthWorkout | RunningWorkout\n  ): string => {\n    // For running workouts with trail running data, use the actual estimated duration\n    if (\n      workout.type === 'running' &&\n      'trailRunningData' in workout &&\n      workout.trailRunningData\n    ) {\n      const duration = workout.trailRunningData.estimatedDuration;\n      if (duration < 60) return `${duration} min`;\n      const hours = Math.floor(duration / 60);\n      const mins = duration % 60;\n      return mins > 0 ? `${hours}h ${mins}min` : `${hours}h`;\n    }\n\n    // For other non-strength workouts, show placeholder or basic estimates\n    if (workout.type !== 'strength') {\n      const baseEstimates = {\n        running: '45 min',\n        swimming: '45 min',\n        cycling: '60 min',\n        'trail-running': '45 min',\n      };\n      return baseEstimates[workout.type] || '45 min';\n    }\n\n    let totalMinutes = 0;\n\n    workout.sections.forEach((section, sectionIndex) => {\n      if (section.type === 'emom' && section.emomDuration) {\n        // EMOM duration is fixed\n        totalMinutes += section.emomDuration;\n      } else if (section.type === 'tabata') {\n        // TABATA is always 4 minutes\n        totalMinutes += 4;\n      } else {\n        // Standard section calculation\n        section.exercises.forEach((exercise, exerciseIndex) => {\n          // Calculate time for each set (estimate 45 seconds per set)\n          exercise.sets.forEach(() => {\n            totalMinutes += 0.75;\n          });\n\n          // Add rest time between sets\n          if (exercise.sets.length > 1) {\n            const restTime = exercise.restTimer;\n            const [minutes, seconds] = restTime.split(':').map(Number);\n            const restMinutes = minutes + seconds / 60;\n            totalMinutes += restMinutes * (exercise.sets.length - 1);\n          }\n\n          // Add rest time after exercise (except for the last exercise in section)\n          if (exerciseIndex < section.exercises.length - 1) {\n            const restAfter = exercise.restAfter;\n            const [minutes, seconds] = restAfter.split(':').map(Number);\n            totalMinutes += minutes + seconds / 60;\n          }\n        });\n      }\n\n      // Add rest time after section (except for the last section)\n      if (sectionIndex < workout.sections.length - 1) {\n        const sectionRest = section.restAfter;\n        const [minutes, seconds] = sectionRest.split(':').map(Number);\n        totalMinutes += minutes + seconds / 60;\n      }\n    });\n\n    // Round to nearest 5 minutes and format\n    const roundedMinutes = Math.round(totalMinutes / 5) * 5;\n\n    if (roundedMinutes === 0) return '—';\n    if (roundedMinutes < 60) return `${roundedMinutes} min`;\n\n    const hours = Math.floor(roundedMinutes / 60);\n    const mins = roundedMinutes % 60;\n    return mins > 0 ? `${hours}h ${mins}min` : `${hours}h`;\n  };\n\n  const addStrengthSection = (workoutId: string) => {\n    const newSection: WorkoutSection = {\n      id: Date.now().toString(),\n      name: 'Basic Section',\n      type: 'basic',\n      restAfter: '02:00',\n      exercises: [],\n    };\n\n    setStrengthWorkouts(\n      strengthWorkouts.map(workout =>\n        workout.id === workoutId\n          ? { ...workout, sections: [...workout.sections, newSection] }\n          : workout\n      )\n    );\n  };\n\n  const addRunningSection = (workoutId: string) => {\n    const newSection: WorkoutSection = {\n      id: Date.now().toString(),\n      name: 'Basic Section',\n      type: 'basic',\n      restAfter: '02:00',\n      exercises: [],\n    };\n\n    setRunningWorkouts(\n      runningWorkouts.map(workout =>\n        workout.id === workoutId\n          ? { ...workout, sections: [...workout.sections, newSection] }\n          : workout\n      )\n    );\n  };\n\n  const removeStrengthSection = (workoutId: string, sectionId: string) => {\n    setStrengthWorkouts(\n      strengthWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.filter(\n                section => section.id !== sectionId\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const removeRunningSection = (workoutId: string, sectionId: string) => {\n    setRunningWorkouts(\n      runningWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.filter(\n                section => section.id !== sectionId\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const updateStrengthSectionName = (\n    workoutId: string,\n    sectionId: string,\n    name: string\n  ) => {\n    setStrengthWorkouts(\n      strengthWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId ? { ...section, name } : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const updateRunningSectionName = (\n    workoutId: string,\n    sectionId: string,\n    name: string\n  ) => {\n    setRunningWorkouts(\n      runningWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId ? { ...section, name } : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const updateStrengthSectionType = (\n    workoutId: string,\n    sectionId: string,\n    type: WorkoutSection['type']\n  ) => {\n    setStrengthWorkouts(\n      strengthWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? {\n                      ...section,\n                      type,\n                      // Set default values for EMOM and TABATA\n                      emomDuration: type === 'emom' ? 10 : section.emomDuration,\n                      // Clear exercises if switching to TABATA since they need different configuration\n                      exercises:\n                        type === 'tabata' || type === 'emom'\n                          ? []\n                          : section.exercises,\n                    }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const updateRunningSectionType = (\n    workoutId: string,\n    sectionId: string,\n    type: WorkoutSection['type']\n  ) => {\n    setRunningWorkouts(\n      runningWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? {\n                      ...section,\n                      type,\n                      // Set default values for EMOM and TABATA\n                      emomDuration: type === 'emom' ? 10 : section.emomDuration,\n                      // Clear exercises if switching to TABATA since they need different configuration\n                      exercises:\n                        type === 'tabata' || type === 'emom'\n                          ? []\n                          : section.exercises,\n                    }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const updateStrengthSectionRestAfter = (\n    workoutId: string,\n    sectionId: string,\n    restAfter: string\n  ) => {\n    setStrengthWorkouts(\n      strengthWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId ? { ...section, restAfter } : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const updateRunningSectionRestAfter = (\n    workoutId: string,\n    sectionId: string,\n    restAfter: string\n  ) => {\n    setRunningWorkouts(\n      runningWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId ? { ...section, restAfter } : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const updateStrengthSectionEmomDuration = (\n    workoutId: string,\n    sectionId: string,\n    duration: number\n  ) => {\n    setStrengthWorkouts(\n      strengthWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? { ...section, emomDuration: duration }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const updateRunningSectionEmomDuration = (\n    workoutId: string,\n    sectionId: string,\n    duration: number\n  ) => {\n    setRunningWorkouts(\n      runningWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? { ...section, emomDuration: duration }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const updateStrengthExerciseEmomReps = (\n    workoutId: string,\n    sectionId: string,\n    exerciseId: string,\n    reps: number\n  ) => {\n    setStrengthWorkouts(\n      strengthWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? {\n                      ...section,\n                      exercises: section.exercises.map(exercise =>\n                        exercise.id === exerciseId\n                          ? { ...exercise, emomReps: reps }\n                          : exercise\n                      ),\n                    }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const updateRunningExerciseEmomReps = (\n    workoutId: string,\n    sectionId: string,\n    exerciseId: string,\n    reps: number\n  ) => {\n    setRunningWorkouts(\n      runningWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? {\n                      ...section,\n                      exercises: section.exercises.map(exercise =>\n                        exercise.id === exerciseId\n                          ? { ...exercise, emomReps: reps }\n                          : exercise\n                      ),\n                    }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  // Function to generate sets based on progression method\n  const generateSetsForProgression = (\n    progressionMethod: ProgressionMethod\n  ): WorkoutSet[] => {\n    const sets: WorkoutSet[] = [];\n    let setNumber = 1;\n\n    switch (progressionMethod) {\n      case 'linear':\n        // 3 sets of 5 fixed reps\n        for (let i = 0; i < 3; i++) {\n          sets.push({\n            id: `${Date.now()}_${i}_linear`,\n            setNumber: setNumber++,\n            setType: 'normal',\n            repType: 'fixed',\n            reps: 5,\n            weight: null,\n            rpe: null,\n            notes: '',\n          });\n        }\n        break;\n\n      case 'dual':\n        // 3 sets of 8-12 rep ranges\n        for (let i = 0; i < 3; i++) {\n          sets.push({\n            id: `${Date.now()}_${i}_dual`,\n            setNumber: setNumber++,\n            setType: 'normal',\n            repType: 'range',\n            reps: null,\n            repsMin: 8,\n            repsMax: 12,\n            weight: null,\n            rpe: null,\n            notes: '',\n          });\n        }\n        break;\n\n      case 'inverse-pyramid': {\n        // 4 sets with decreasing weight/increasing reps\n        const pyramidSets = [\n          { reps: 6, note: 'Start with heaviest weight' },\n          { reps: 8, note: '~90% of first set' },\n          { reps: 10, note: '~80% of first set' },\n          { reps: 12, note: '~70% of first set' },\n        ];\n\n        pyramidSets.forEach((pyramid, i) => {\n          sets.push({\n            id: `${Date.now()}_${i}_pyramid`,\n            setNumber: setNumber++,\n            setType: 'normal',\n            repType: 'fixed',\n            reps: pyramid.reps,\n            weight: null,\n            rpe: null,\n            notes: pyramid.note,\n          });\n        });\n        break;\n      }\n\n      case 'myo-reps':\n        // Activation set + 4 mini-sets\n        sets.push({\n          id: `${Date.now()}_activation`,\n          setNumber: setNumber++,\n          setType: 'normal',\n          repType: 'fixed',\n          reps: 12,\n          weight: null,\n          rpe: null,\n          notes: 'Activation set - 2-3 reps in reserve',\n        });\n\n        for (let i = 0; i < 4; i++) {\n          sets.push({\n            id: `${Date.now()}_mini_${i}`,\n            setNumber: setNumber++,\n            setType: 'failure',\n            repType: 'fixed',\n            reps: 3,\n            weight: null,\n            rpe: null,\n            notes: `Mini-set ${i + 1} - to failure`,\n          });\n        }\n        break;\n\n      case 'widowmaker':\n        // Single high-rep failure set\n        sets.push({\n          id: `${Date.now()}_widowmaker`,\n          setNumber: 1,\n          setType: 'failure',\n          repType: 'fixed',\n          reps: 20,\n          weight: null,\n          rpe: null,\n          notes: 'Single high-rep set to failure',\n        });\n        break;\n\n      case 'amrap':\n        // 2 regular sets + 1 AMRAP set\n        for (let i = 0; i < 2; i++) {\n          sets.push({\n            id: `${Date.now()}_regular_${i}`,\n            setNumber: setNumber++,\n            setType: 'normal',\n            repType: 'fixed',\n            reps: 8,\n            weight: null,\n            rpe: null,\n            notes: '',\n          });\n        }\n\n        sets.push({\n          id: `${Date.now()}_amrap`,\n          setNumber: setNumber,\n          setType: 'failure',\n          repType: 'fixed',\n          reps: null,\n          weight: null,\n          rpe: null,\n          notes: 'AMRAP - As many reps as possible',\n        });\n        break;\n\n      default:\n        // Default: single set with fixed 5 reps for linear (default)\n        sets.push({\n          id: `${Date.now()}_default`,\n          setNumber: 1,\n          setType: 'normal',\n          repType: 'fixed',\n          reps: 5,\n          weight: null,\n          rpe: null,\n          notes: '',\n        });\n    }\n\n    return sets;\n  };\n\n  const updateStrengthExerciseProgressionMethod = (\n    workoutId: string,\n    sectionId: string,\n    exerciseId: string,\n    progressionMethod: ProgressionMethod\n  ) => {\n    setStrengthWorkouts(\n      strengthWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? {\n                      ...section,\n                      exercises: section.exercises.map(exercise =>\n                        exercise.id === exerciseId\n                          ? {\n                              ...exercise,\n                              progressionMethod,\n                              sets: generateSetsForProgression(\n                                progressionMethod\n                              ), // Auto-generate sets\n                            }\n                          : exercise\n                      ),\n                    }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const addApproachSets = (\n    workoutId: string,\n    sectionId: string,\n    exerciseId: string\n  ) => {\n    setStrengthWorkouts(\n      strengthWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? {\n                      ...section,\n                      exercises: section.exercises.map(exercise => {\n                        if (exercise.id === exerciseId) {\n                          // Create 2-3 approach sets with lower weight and similar reps\n                          const mainSets = exercise.sets.filter(\n                            set => set.setType === 'normal'\n                          );\n                          const firstMainSet =\n                            mainSets.length > 0 ? mainSets[0] : null;\n\n                          // Generate approach sets if we have a main set to base them on\n                          const approachSets: WorkoutSet[] = [];\n                          if (firstMainSet) {\n                            // Create 3 approach sets with progressive weight increases\n                            const baseWeight = firstMainSet.weight || 60; // Default to 60kg if no weight\n                            const targetReps =\n                              firstMainSet.reps || firstMainSet.repsMin || 8; // Use reps or min reps\n\n                            for (let i = 1; i <= 3; i++) {\n                              const approachWeight = Math.round(\n                                baseWeight * (0.4 + i * 0.15)\n                              ); // 55%, 70%, 85% progression\n                              approachSets.push({\n                                id: `approach-${Date.now()}-${i}`,\n                                setNumber: i,\n                                setType: 'warmup',\n                                repType: 'fixed',\n                                reps: Math.max(3, Math.round(targetReps * 0.6)), // Fewer reps for approach\n                                weight: approachWeight,\n                                rpe: Math.min(6, i + 3), // RPE 4-6 for approach sets\n                                notes: '',\n                              });\n                            }\n                          }\n\n                          // Insert approach sets at the beginning, then renumber all sets\n                          const allSets = [...approachSets, ...exercise.sets];\n                          const renumberedSets = allSets.map((set, index) => ({\n                            ...set,\n                            setNumber: index + 1,\n                          }));\n\n                          return {\n                            ...exercise,\n                            sets: renumberedSets,\n                            hasApproachSets: true,\n                          };\n                        }\n                        return exercise;\n                      }),\n                    }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const handleAddExerciseClick = (workoutId: string, sectionId: string) => {\n    setCurrentAddExerciseContext({ workoutId, sectionId });\n    setExerciseModalOpen(true);\n  };\n\n  const handleExerciseSelect = (selectedExercise: {\n    name: string;\n    category?: string;\n    muscleGroups?: string[];\n  }) => {\n    if (!currentAddExerciseContext) return;\n\n    // Find the section to determine exercise configuration\n    const strengthWorkout = strengthWorkouts.find(\n      w => w.id === currentAddExerciseContext.workoutId\n    );\n    const runningWorkout = runningWorkouts.find(\n      w => w.id === currentAddExerciseContext.workoutId\n    );\n    const workout = strengthWorkout || runningWorkout;\n\n    if (!workout) return;\n\n    const section = workout.sections.find(\n      s => s.id === currentAddExerciseContext.sectionId\n    );\n\n    const newExercise: Exercise = {\n      id: Date.now().toString(),\n      name: selectedExercise.name,\n      category: selectedExercise.category,\n      muscleGroups: selectedExercise.muscleGroups,\n      sets:\n        section?.type === 'tabata'\n          ? []\n          : strengthWorkout\n            ? generateSetsForProgression('linear')\n            : [], // Auto-generate sets for strength exercises\n      restTimer: section?.type === 'emom' ? '00:00' : '01:30', // EMOM doesn't need rest between sets\n      restAfter: section?.type === 'tabata' ? '00:00' : '02:00', // TABATA rest is built into the protocol\n      notes: '',\n      progressionMethod: strengthWorkout ? 'linear' : undefined, // Only add progression method for strength exercises\n      // Initialize EMOM properties\n      emomReps: section?.type === 'emom' ? 10 : undefined,\n    };\n\n    if (strengthWorkout) {\n      setStrengthWorkouts(\n        strengthWorkouts.map(workout =>\n          workout.id === currentAddExerciseContext!.workoutId\n            ? {\n                ...workout,\n                sections: workout.sections.map(section =>\n                  section.id === currentAddExerciseContext!.sectionId\n                    ? {\n                        ...section,\n                        exercises: [...section.exercises, newExercise],\n                      }\n                    : section\n                ),\n              }\n            : workout\n        )\n      );\n    } else if (runningWorkout) {\n      setRunningWorkouts(\n        runningWorkouts.map(workout =>\n          workout.id === currentAddExerciseContext!.workoutId\n            ? {\n                ...workout,\n                sections: workout.sections.map(section =>\n                  section.id === currentAddExerciseContext!.sectionId\n                    ? {\n                        ...section,\n                        exercises: [...section.exercises, newExercise],\n                      }\n                    : section\n                ),\n              }\n            : workout\n        )\n      );\n    }\n\n    setCurrentAddExerciseContext(null);\n    setExerciseModalOpen(false);\n  };\n\n  const handleNotesClick = (\n    type: 'exercise' | 'set',\n    workoutId: string,\n    sectionId: string,\n    exerciseId: string,\n    setId?: string\n  ) => {\n    const strengthWorkout = strengthWorkouts.find(w => w.id === workoutId);\n    const runningWorkout = runningWorkouts.find(w => w.id === workoutId);\n    const workout = strengthWorkout || runningWorkout;\n\n    if (!workout) return;\n\n    const section = workout.sections.find(s => s.id === sectionId);\n    const exercise = section?.exercises.find(e => e.id === exerciseId);\n\n    let currentNotes = '';\n    if (type === 'exercise') {\n      currentNotes = exercise?.notes || '';\n    } else if (type === 'set' && setId) {\n      const set = exercise?.sets.find(s => s.id === setId);\n      currentNotes = set?.notes || '';\n    }\n\n    setCurrentNotesContext({\n      type,\n      workoutId,\n      sectionId,\n      exerciseId,\n      setId,\n      currentNotes,\n    });\n    setNotesModalOpen(true);\n  };\n\n  const handleNotesSave = (notes: string) => {\n    if (!currentNotesContext) return;\n\n    const { type, workoutId, sectionId, exerciseId, setId } =\n      currentNotesContext;\n\n    // Update in strength workouts\n    setStrengthWorkouts(\n      strengthWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? {\n                      ...section,\n                      exercises: section.exercises.map(exercise =>\n                        exercise.id === exerciseId\n                          ? type === 'exercise'\n                            ? { ...exercise, notes }\n                            : {\n                                ...exercise,\n                                sets: exercise.sets.map(set =>\n                                  set.id === setId ? { ...set, notes } : set\n                                ),\n                              }\n                          : exercise\n                      ),\n                    }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n\n    // Update in running workouts\n    setRunningWorkouts(\n      runningWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? {\n                      ...section,\n                      exercises: section.exercises.map(exercise =>\n                        exercise.id === exerciseId\n                          ? type === 'exercise'\n                            ? { ...exercise, notes }\n                            : {\n                                ...exercise,\n                                sets: exercise.sets.map(set =>\n                                  set.id === setId ? { ...set, notes } : set\n                                ),\n                              }\n                          : exercise\n                      ),\n                    }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n\n    setCurrentNotesContext(null);\n  };\n\n  const updateStrengthExerciseSets = (\n    workoutId: string,\n    sectionId: string,\n    exerciseId: string,\n    sets: WorkoutSet[]\n  ) => {\n    setStrengthWorkouts(\n      strengthWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? {\n                      ...section,\n                      exercises: section.exercises.map(exercise =>\n                        exercise.id === exerciseId\n                          ? { ...exercise, sets }\n                          : exercise\n                      ),\n                    }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const updateRunningExerciseSets = (\n    workoutId: string,\n    sectionId: string,\n    exerciseId: string,\n    sets: WorkoutSet[]\n  ) => {\n    setRunningWorkouts(\n      runningWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? {\n                      ...section,\n                      exercises: section.exercises.map(exercise =>\n                        exercise.id === exerciseId\n                          ? { ...exercise, sets }\n                          : exercise\n                      ),\n                    }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const updateStrengthExerciseName = (\n    workoutId: string,\n    sectionId: string,\n    exerciseId: string,\n    name: string\n  ) => {\n    setStrengthWorkouts(\n      strengthWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? {\n                      ...section,\n                      exercises: section.exercises.map(exercise =>\n                        exercise.id === exerciseId\n                          ? { ...exercise, name }\n                          : exercise\n                      ),\n                    }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const updateRunningExerciseName = (\n    workoutId: string,\n    sectionId: string,\n    exerciseId: string,\n    name: string\n  ) => {\n    setRunningWorkouts(\n      runningWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? {\n                      ...section,\n                      exercises: section.exercises.map(exercise =>\n                        exercise.id === exerciseId\n                          ? { ...exercise, name }\n                          : exercise\n                      ),\n                    }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const updateStrengthRestTimer = (\n    workoutId: string,\n    sectionId: string,\n    exerciseId: string,\n    restTimer: string\n  ) => {\n    setStrengthWorkouts(\n      strengthWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? {\n                      ...section,\n                      exercises: section.exercises.map(exercise =>\n                        exercise.id === exerciseId\n                          ? { ...exercise, restTimer }\n                          : exercise\n                      ),\n                    }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const updateRunningRestTimer = (\n    workoutId: string,\n    sectionId: string,\n    exerciseId: string,\n    restTimer: string\n  ) => {\n    setRunningWorkouts(\n      runningWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? {\n                      ...section,\n                      exercises: section.exercises.map(exercise =>\n                        exercise.id === exerciseId\n                          ? { ...exercise, restTimer }\n                          : exercise\n                      ),\n                    }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const updateStrengthExerciseRestAfter = (\n    workoutId: string,\n    sectionId: string,\n    exerciseId: string,\n    restAfter: string\n  ) => {\n    setStrengthWorkouts(\n      strengthWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? {\n                      ...section,\n                      exercises: section.exercises.map(exercise =>\n                        exercise.id === exerciseId\n                          ? { ...exercise, restAfter }\n                          : exercise\n                      ),\n                    }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const updateRunningExerciseRestAfter = (\n    workoutId: string,\n    sectionId: string,\n    exerciseId: string,\n    restAfter: string\n  ) => {\n    setRunningWorkouts(\n      runningWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? {\n                      ...section,\n                      exercises: section.exercises.map(exercise =>\n                        exercise.id === exerciseId\n                          ? { ...exercise, restAfter }\n                          : exercise\n                      ),\n                    }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const toggleStrengthWorkoutCollapse = (workoutId: string) => {\n    setCollapsedStrengthWorkouts(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(workoutId)) {\n        newSet.delete(workoutId);\n      } else {\n        newSet.add(workoutId);\n      }\n      return newSet;\n    });\n  };\n\n  const toggleRunningWorkoutCollapse = (workoutId: string) => {\n    setCollapsedRunningWorkouts(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(workoutId)) {\n        newSet.delete(workoutId);\n      } else {\n        newSet.add(workoutId);\n      }\n      return newSet;\n    });\n  };\n\n  const getSectionColors = (type: string) => {\n    const colors = {\n      warmup: {\n        bg: 'bg-orange-50/50',\n        border: 'border-orange-200',\n        headerBg: 'bg-orange-100',\n        headerText: 'text-orange-800',\n        headerBorder: 'border-orange-200',\n        icon: 'text-orange-600',\n      },\n      basic: {\n        bg: 'bg-indigo-50/50',\n        border: 'border-indigo-200',\n        headerBg: 'bg-indigo-100',\n        headerText: 'text-indigo-800',\n        headerBorder: 'border-indigo-200',\n        icon: 'text-indigo-600',\n      },\n      cooldown: {\n        bg: 'bg-blue-50/50',\n        border: 'border-blue-200',\n        headerBg: 'bg-blue-100',\n        headerText: 'text-blue-800',\n        headerBorder: 'border-blue-200',\n        icon: 'text-blue-600',\n      },\n      emom: {\n        bg: 'bg-purple-50/50',\n        border: 'border-purple-200',\n        headerBg: 'bg-purple-100',\n        headerText: 'text-purple-800',\n        headerBorder: 'border-purple-200',\n        icon: 'text-purple-600',\n      },\n      tabata: {\n        bg: 'bg-red-50/50',\n        border: 'border-red-200',\n        headerBg: 'bg-red-100',\n        headerText: 'text-red-800',\n        headerBorder: 'border-red-200',\n        icon: 'text-red-600',\n      },\n    };\n    return colors[type as keyof typeof colors] || colors.basic;\n  };\n\n  const getSectionIcon = (type: string) => {\n    const icons = {\n      warmup: Leaf,\n      basic: Dumbbell,\n      cooldown: Leaf,\n      emom: Timer,\n      tabata: Target,\n    };\n    return icons[type as keyof typeof icons] || Dumbbell;\n  };\n\n  const removeStrengthExercise = (\n    workoutId: string,\n    sectionId: string,\n    exerciseId: string\n  ) => {\n    setStrengthWorkouts(\n      strengthWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? {\n                      ...section,\n                      exercises: section.exercises.filter(\n                        exercise => exercise.id !== exerciseId\n                      ),\n                    }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const removeRunningExercise = (\n    workoutId: string,\n    sectionId: string,\n    exerciseId: string\n  ) => {\n    setRunningWorkouts(\n      runningWorkouts.map(workout =>\n        workout.id === workoutId\n          ? {\n              ...workout,\n              sections: workout.sections.map(section =>\n                section.id === sectionId\n                  ? {\n                      ...section,\n                      exercises: section.exercises.filter(\n                        exercise => exercise.id !== exerciseId\n                      ),\n                    }\n                  : section\n              ),\n            }\n          : workout\n      )\n    );\n  };\n\n  const canSave =\n    routineName.trim() &&\n    (strengthWorkouts.length > 0 || runningWorkouts.length > 0);\n\n  const renderWorkoutCard = (\n    workout: StrengthWorkout | RunningWorkout,\n    index: number,\n    isStrength: boolean,\n    collapsedSet: Set<string>,\n    toggleCollapse: (id: string) => void,\n    moveWorkout: (id: string, direction: 'up' | 'down') => void,\n    removeWorkout: (id: string) => void,\n    updateWorkoutName: (id: string, name: string) => void,\n    updateWorkoutObjective: (id: string, objective: string) => void,\n    updateWorkoutSchedule: (id: string, field: string, value: string) => void,\n    addSection: (id: string) => void,\n    removeSection: (workoutId: string, sectionId: string) => void,\n    updateSectionName: (\n      workoutId: string,\n      sectionId: string,\n      name: string\n    ) => void,\n    updateSectionType: (\n      workoutId: string,\n      sectionId: string,\n      type: WorkoutSection['type']\n    ) => void,\n    updateSectionRestAfter: (\n      workoutId: string,\n      sectionId: string,\n      restAfter: string\n    ) => void,\n    updateSectionEmomDuration: (\n      workoutId: string,\n      sectionId: string,\n      duration: number\n    ) => void,\n    updateExerciseEmomReps: (\n      workoutId: string,\n      sectionId: string,\n      exerciseId: string,\n      reps: number\n    ) => void,\n    updateExerciseSets: (\n      workoutId: string,\n      sectionId: string,\n      exerciseId: string,\n      sets: WorkoutSet[]\n    ) => void,\n    updateExerciseName: (\n      workoutId: string,\n      sectionId: string,\n      exerciseId: string,\n      name: string\n    ) => void,\n    updateRestTimer: (\n      workoutId: string,\n      sectionId: string,\n      exerciseId: string,\n      restTimer: string\n    ) => void,\n    updateExerciseRestAfter: (\n      workoutId: string,\n      sectionId: string,\n      exerciseId: string,\n      restAfter: string\n    ) => void,\n    removeExercise: (\n      workoutId: string,\n      sectionId: string,\n      exerciseId: string\n    ) => void,\n    totalCount: number\n  ) => (\n    <Card key={workout.id} className=\"overflow-hidden\">\n      {/* Workout Header */}\n      <div className=\"bg-gray-50 border-b border-gray-200 p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            {/* Workout Order Controls */}\n            <div className=\"flex flex-col space-y-1\">\n              <TooltipProvider>\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => moveWorkout(workout.id, 'up')}\n                      disabled={index === 0}\n                      className=\"p-1 h-6 w-6\"\n                    >\n                      <ArrowUp className=\"h-3 w-3\" />\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>Move up</TooltipContent>\n                </Tooltip>\n              </TooltipProvider>\n\n              <TooltipProvider>\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => moveWorkout(workout.id, 'down')}\n                      disabled={index === totalCount - 1}\n                      className=\"p-1 h-6 w-6\"\n                    >\n                      <ArrowDown className=\"h-3 w-3\" />\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>Move down</TooltipContent>\n                </Tooltip>\n              </TooltipProvider>\n            </div>\n\n            {/* Workout Order Number */}\n            <div className=\"flex items-center justify-center w-8 h-8 rounded-full bg-gray-200 text-gray-700 text-sm font-medium\">\n              {index + 1}\n            </div>\n\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => toggleCollapse(workout.id)}\n              className=\"p-1\"\n            >\n              {collapsedSet.has(workout.id) ? (\n                <ChevronDown className=\"h-4 w-4\" />\n              ) : (\n                <ChevronUp className=\"h-4 w-4\" />\n              )}\n            </Button>\n\n            <div className=\"flex items-center space-x-3\">\n              {workout.type === 'strength' && (\n                <Dumbbell className=\"h-5 w-5 text-indigo-600\" />\n              )}\n              {workout.type === 'running' && (\n                <Activity className=\"h-5 w-5 text-green-600\" />\n              )}\n              {workout.type === 'trail-running' && (\n                <MapPin className=\"h-5 w-5 text-orange-600\" />\n              )}\n              {workout.type === 'swimming' && (\n                <Waves className=\"h-5 w-5 text-blue-600\" />\n              )}\n              {workout.type === 'cycling' && (\n                <Bike className=\"h-5 w-5 text-purple-600\" />\n              )}\n\n              <div>\n                <Input\n                  value={workout.name}\n                  onChange={e => updateWorkoutName(workout.id, e.target.value)}\n                  className=\"font-medium border-none p-0 h-auto bg-transparent focus:bg-white focus:border-gray-300\"\n                />\n                <div className=\"flex items-center space-x-4 mt-1\">\n                  <span className=\"text-sm text-gray-500\">\n                    {calculateWorkoutDuration(workout)}\n                  </span>\n                  <span className=\"text-sm text-gray-400\">•</span>\n                  <span className=\"text-sm text-gray-500 capitalize\">\n                    {workout.type.replace('-', ' ')}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            {workout.type === 'running' && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => handleEditRunning(workout.id)}\n                className=\"text-green-600 hover:text-green-700\"\n              >\n                Edit\n              </Button>\n            )}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => removeWorkout(workout.id)}\n              className=\"text-red-600 hover:text-red-700\"\n            >\n              <Trash2 className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Workout Content */}\n      {!collapsedSet.has(workout.id) && (\n        <div className=\"p-4 space-y-4\">\n          {/* Objective */}\n          <div>\n            <Label>Objective</Label>\n            <Textarea\n              value={workout.objective}\n              onChange={e => updateWorkoutObjective(workout.id, e.target.value)}\n              placeholder=\"What is the primary goal of this workout?\"\n              rows={2}\n            />\n          </div>\n\n          {/* Schedule */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label>Weeks</Label>\n              <Input\n                value={workout.schedule.weeks}\n                onChange={e =>\n                  updateWorkoutSchedule(workout.id, 'weeks', e.target.value)\n                }\n                placeholder=\"e.g., Week 1, 3, 5\"\n              />\n            </div>\n            <div>\n              <Label>Day</Label>\n              <Select\n                value={workout.schedule.day}\n                onValueChange={value =>\n                  updateWorkoutSchedule(workout.id, 'day', value)\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Monday\">Monday</SelectItem>\n                  <SelectItem value=\"Tuesday\">Tuesday</SelectItem>\n                  <SelectItem value=\"Wednesday\">Wednesday</SelectItem>\n                  <SelectItem value=\"Thursday\">Thursday</SelectItem>\n                  <SelectItem value=\"Friday\">Friday</SelectItem>\n                  <SelectItem value=\"Saturday\">Saturday</SelectItem>\n                  <SelectItem value=\"Sunday\">Sunday</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label>Time</Label>\n              <Input\n                value={workout.schedule.time}\n                onChange={e =>\n                  updateWorkoutSchedule(workout.id, 'time', e.target.value)\n                }\n                placeholder=\"e.g., 9:00 AM\"\n              />\n            </div>\n          </div>\n\n          {/* Running Workout Details */}\n          {workout.type === 'running' &&\n            'trailRunningData' in workout &&\n            workout.trailRunningData && (\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"font-medium text-green-900\">\n                    Running Configuration\n                  </h4>\n                  <div className=\"flex items-center space-x-4 text-sm text-green-700\">\n                    <span>{workout.trailRunningData.targetDistance}km</span>\n                    <span>•</span>\n                    <span>{workout.trailRunningData.estimatedDuration}min</span>\n                    <span>•</span>\n                    <span>+{workout.trailRunningData.elevationGain}m</span>\n                  </div>\n                </div>\n                <p className=\"text-sm text-green-700\">\n                  {workout.trailRunningData.sections.length} training sections\n                  configured\n                </p>\n              </div>\n            )}\n\n          {/* Sections for other workout types */}\n          {workout.type !== 'running' && (\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"font-medium text-gray-900\">Sections</h4>\n                <Button\n                  size=\"sm\"\n                  onClick={() => addSection(workout.id)}\n                  className=\"text-sm\"\n                >\n                  <Plus className=\"h-4 w-4 mr-1\" />\n                  Add Section\n                </Button>\n              </div>\n\n              {workout.sections.map((section, sectionIndex) => {\n                const colors = getSectionColors(section.type);\n                const SectionIcon = getSectionIcon(section.type);\n\n                return (\n                  <div\n                    key={section.id}\n                    className={`border rounded-lg ${colors.border} ${colors.bg}`}\n                  >\n                    {/* Section Header */}\n                    <div\n                      className={`flex items-center justify-between p-3 border-b ${colors.headerBorder} ${colors.headerBg}`}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <SectionIcon className={`h-4 w-4 ${colors.icon}`} />\n                        <Input\n                          value={section.name}\n                          onChange={e =>\n                            updateSectionName(\n                              workout.id,\n                              section.id,\n                              e.target.value\n                            )\n                          }\n                          className=\"border-none p-0 h-auto bg-transparent font-medium\"\n                        />\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Select\n                          value={section.type}\n                          onValueChange={(value: WorkoutSection['type']) =>\n                            updateSectionType(workout.id, section.id, value)\n                          }\n                        >\n                          <SelectTrigger className=\"w-32 text-sm\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"warmup\">Warm-up</SelectItem>\n                            <SelectItem value=\"basic\">Basic</SelectItem>\n                            <SelectItem value=\"cooldown\">Cool-down</SelectItem>\n                            <SelectItem value=\"emom\">EMOM</SelectItem>\n                            <SelectItem value=\"tabata\">TABATA</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeSection(workout.id, section.id)}\n                          className=\"text-red-600 hover:text-red-700 p-1\"\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n\n                    {/* Section Content */}\n                    <div className=\"p-3 space-y-3\">\n                      {/* EMOM Duration */}\n                      {section.type === 'emom' && (\n                        <div className=\"flex items-center space-x-4\">\n                          <Label className=\"text-sm font-medium\">\n                            Duration (minutes):\n                          </Label>\n                          <Input\n                            type=\"number\"\n                            value={section.emomDuration || 10}\n                            onChange={e =>\n                              updateSectionEmomDuration(\n                                workout.id,\n                                section.id,\n                                parseInt(e.target.value) || 10\n                              )\n                            }\n                            className=\"w-20\"\n                            min=\"1\"\n                            max=\"60\"\n                          />\n                        </div>\n                      )}\n\n                      {/* TABATA Info */}\n                      {section.type === 'tabata' && (\n                        <div className=\"bg-red-100 border border-red-200 rounded p-3\">\n                          <p className=\"text-sm text-red-800\">\n                            TABATA Protocol: 4 minutes total (8 rounds of 20\n                            seconds work, 10 seconds rest)\n                          </p>\n                        </div>\n                      )}\n\n                      {/* Exercises */}\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <Label className=\"text-sm font-medium\">\n                            Exercises\n                          </Label>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() =>\n                              handleAddExerciseClick(workout.id, section.id)\n                            }\n                            className=\"text-sm\"\n                          >\n                            <Plus className=\"h-4 w-4 mr-1\" />\n                            Add Exercise\n                          </Button>\n                        </div>\n\n                        {section.exercises.length === 0 ? (\n                          <p className=\"text-sm text-gray-500 py-4 text-center\">\n                            No exercises added yet\n                          </p>\n                        ) : (\n                          section.exercises.map((exercise, exerciseIndex) => (\n                            <div\n                              key={exercise.id}\n                              className=\"bg-white rounded border p-3 space-y-3\"\n                            >\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center space-x-3 flex-1\">\n                                  <Input\n                                    value={exercise.name}\n                                    onChange={e =>\n                                      updateExerciseName(\n                                        workout.id,\n                                        section.id,\n                                        exercise.id,\n                                        e.target.value\n                                      )\n                                    }\n                                    className=\"font-medium border-none p-0 h-auto bg-transparent flex-1\"\n                                  />\n                                  {/* Progression Method Badge for Strength Exercises */}\n                                  {isStrength && exercise.progressionMethod && (\n                                    <TooltipProvider>\n                                      <Tooltip>\n                                        <TooltipTrigger asChild>\n                                          <div>\n                                            <Badge\n                                              variant=\"outline\"\n                                              className={`text-xs ${getProgressionMethodColor(\n                                                exercise.progressionMethod\n                                              )}`}\n                                            >\n                                              <TrendingUp className=\"h-3 w-3 mr-1\" />\n                                              {getProgressionMethodLabel(\n                                                exercise.progressionMethod\n                                              )}\n                                            </Badge>\n                                          </div>\n                                        </TooltipTrigger>\n                                        <TooltipContent>\n                                          {\n                                            progressionMethods.find(\n                                              pm =>\n                                                pm.value ===\n                                                exercise.progressionMethod\n                                            )?.description\n                                          }\n                                        </TooltipContent>\n                                      </Tooltip>\n                                    </TooltipProvider>\n                                  )}\n                                </div>\n                                <div className=\"flex items-center space-x-2\">\n                                  <TooltipProvider>\n                                    <Tooltip>\n                                      <TooltipTrigger asChild>\n                                        <Button\n                                          variant=\"ghost\"\n                                          size=\"sm\"\n                                          onClick={() =>\n                                            handleNotesClick(\n                                              'exercise',\n                                              workout.id,\n                                              section.id,\n                                              exercise.id\n                                            )\n                                          }\n                                          className={\n                                            exercise.notes\n                                              ? 'text-blue-600'\n                                              : 'text-gray-400'\n                                          }\n                                        >\n                                          <FileText className=\"h-4 w-4\" />\n                                        </Button>\n                                      </TooltipTrigger>\n                                      <TooltipContent>\n                                        {exercise.notes\n                                          ? 'Edit notes'\n                                          : 'Add notes'}\n                                      </TooltipContent>\n                                    </Tooltip>\n                                  </TooltipProvider>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() =>\n                                      removeExercise(\n                                        workout.id,\n                                        section.id,\n                                        exercise.id\n                                      )\n                                    }\n                                    className=\"text-red-600 hover:text-red-700 p-1\"\n                                  >\n                                    <X className=\"h-4 w-4\" />\n                                  </Button>\n                                </div>\n                              </div>\n\n                              {/* Progression Method Selection for Strength Exercises */}\n                              {isStrength &&\n                                section.type !== 'tabata' &&\n                                section.type !== 'emom' && (\n                                  <div>\n                                    <Label className=\"text-sm\">\n                                      Progression Method\n                                    </Label>\n                                    <Select\n                                      value={\n                                        exercise.progressionMethod || 'linear'\n                                      }\n                                      onValueChange={(\n                                        value: ProgressionMethod\n                                      ) =>\n                                        updateStrengthExerciseProgressionMethod(\n                                          workout.id,\n                                          section.id,\n                                          exercise.id,\n                                          value\n                                        )\n                                      }\n                                    >\n                                      <SelectTrigger className=\"text-sm\">\n                                        <SelectValue />\n                                      </SelectTrigger>\n                                      <SelectContent>\n                                        {progressionMethods.map(method => (\n                                          <SelectItem\n                                            key={method.value}\n                                            value={method.value}\n                                          >\n                                            <div className=\"flex flex-col\">\n                                              <span>{method.label}</span>\n                                              <span className=\"text-xs text-gray-500\">\n                                                {method.description}\n                                              </span>\n                                            </div>\n                                          </SelectItem>\n                                        ))}\n                                      </SelectContent>\n                                    </Select>\n                                  </div>\n                                )}\n\n                              {/* EMOM Reps */}\n                              {section.type === 'emom' && (\n                                <div className=\"flex items-center space-x-4\">\n                                  <Label className=\"text-sm\">\n                                    Target reps per minute:\n                                  </Label>\n                                  <Input\n                                    type=\"number\"\n                                    value={exercise.emomReps || 10}\n                                    onChange={e =>\n                                      updateExerciseEmomReps(\n                                        workout.id,\n                                        section.id,\n                                        exercise.id,\n                                        parseInt(e.target.value) || 10\n                                      )\n                                    }\n                                    className=\"w-20\"\n                                    min=\"1\"\n                                    max=\"50\"\n                                  />\n                                </div>\n                              )}\n\n                              {/* Sets Management for non-TABATA/EMOM */}\n                              {section.type !== 'tabata' &&\n                                section.type !== 'emom' && (\n                                  <div className=\"space-y-3\">\n                                    <SetManagement\n                                      sets={exercise.sets}\n                                      onSetsChange={sets =>\n                                        updateExerciseSets(\n                                          workout.id,\n                                          section.id,\n                                          exercise.id,\n                                          sets\n                                        )\n                                      }\n                                      onNotesClick={setId =>\n                                        handleNotesClick(\n                                          'set',\n                                          workout.id,\n                                          section.id,\n                                          exercise.id,\n                                          setId\n                                        )\n                                      }\n                                      progressionMethod={\n                                        isStrength\n                                          ? exercise.progressionMethod\n                                          : undefined\n                                      }\n                                    />\n\n                                    {/* Add Approach Sets Button - only show for strength exercises with existing sets that have weight and haven't had approach sets added */}\n                                    {isStrength &&\n                                      exercise.sets.length > 0 &&\n                                      !exercise.hasApproachSets &&\n                                      exercise.sets[0]?.weight && (\n                                        <div className=\"flex justify-center\">\n                                          <Button\n                                            variant=\"outline\"\n                                            size=\"sm\"\n                                            onClick={() =>\n                                              addApproachSets(\n                                                workout.id,\n                                                section.id,\n                                                exercise.id\n                                              )\n                                            }\n                                            className=\"text-sm text-gray-600 hover:text-gray-800\"\n                                          >\n                                            <Plus className=\"h-4 w-4 mr-1\" />\n                                            Add Approach Sets\n                                          </Button>\n                                        </div>\n                                      )}\n                                  </div>\n                                )}\n\n                              {/* Rest Timers for non-TABATA */}\n                              {section.type !== 'tabata' && (\n                                <div className=\"space-y-3\">\n                                  {section.type === 'emom' ? (\n                                    <>\n                                      {/* EMOM Rest Explanation */}\n                                      <div className=\"bg-purple-50 border border-purple-200 rounded p-3\">\n                                        <p className=\"text-sm text-purple-800\">\n                                          <strong>EMOM Rest:</strong> Rest is\n                                          automatic - the remaining time after\n                                          completing your reps becomes your rest\n                                          period before the next minute starts.\n                                        </p>\n                                      </div>\n                                      {/* Only Rest after exercise for EMOM - only show if NOT the last exercise */}\n                                      {exerciseIndex <\n                                        section.exercises.length - 1 && (\n                                        <div>\n                                          <Label className=\"text-sm\">\n                                            Rest after exercise\n                                          </Label>\n                                          <Input\n                                            value={exercise.restAfter}\n                                            onChange={e =>\n                                              updateExerciseRestAfter(\n                                                workout.id,\n                                                section.id,\n                                                exercise.id,\n                                                e.target.value\n                                              )\n                                            }\n                                            placeholder=\"02:30\"\n                                            className=\"text-sm\"\n                                          />\n                                        </div>\n                                      )}\n                                    </>\n                                  ) : (\n                                    /* Standard Rest Timers for non-EMOM */\n                                    <div\n                                      className={`grid gap-4 ${\n                                        exerciseIndex <\n                                        section.exercises.length - 1\n                                          ? 'grid-cols-2'\n                                          : 'grid-cols-1'\n                                      }`}\n                                    >\n                                      <div>\n                                        <Label className=\"text-sm\">\n                                          Rest between sets\n                                        </Label>\n                                        <Input\n                                          value={exercise.restTimer}\n                                          onChange={e =>\n                                            updateRestTimer(\n                                              workout.id,\n                                              section.id,\n                                              exercise.id,\n                                              e.target.value\n                                            )\n                                          }\n                                          placeholder=\"02:00\"\n                                          className=\"text-sm\"\n                                        />\n                                      </div>\n                                      {/* Only show rest after exercise if NOT the last exercise */}\n                                      {exerciseIndex <\n                                        section.exercises.length - 1 && (\n                                        <div>\n                                          <Label className=\"text-sm\">\n                                            Rest after exercise\n                                          </Label>\n                                          <Input\n                                            value={exercise.restAfter}\n                                            onChange={e =>\n                                              updateExerciseRestAfter(\n                                                workout.id,\n                                                section.id,\n                                                exercise.id,\n                                                e.target.value\n                                              )\n                                            }\n                                            placeholder=\"02:30\"\n                                            className=\"text-sm\"\n                                          />\n                                        </div>\n                                      )}\n                                    </div>\n                                  )}\n                                </div>\n                              )}\n                            </div>\n                          ))\n                        )}\n                      </div>\n\n                      {/* Section Rest - only show if NOT the last section */}\n                      {sectionIndex < workout.sections.length - 1 && (\n                        <div>\n                          <Label className=\"text-sm\">Rest after section</Label>\n                          <Input\n                            value={section.restAfter}\n                            onChange={e =>\n                              updateSectionRestAfter(\n                                workout.id,\n                                section.id,\n                                e.target.value\n                              )\n                            }\n                            placeholder=\"03:00\"\n                            className=\"text-sm w-32\"\n                          />\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      )}\n    </Card>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => router.push('/routines')}\n              className=\"flex items-center space-x-2\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span>Back to Routines</span>\n            </Button>\n            <div className=\"h-6 w-px bg-gray-300\" />\n            <h1 className=\"text-xl font-semibold text-gray-900\">\n              {mode === 'create' ? 'Create Routine' : 'Edit Routine'}\n            </h1>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button variant=\"outline\" onClick={() => router.push('/routines')}>\n              Cancel\n            </Button>\n            <Button\n              onClick={() => router.push('/routines')}\n              disabled={!canSave}\n              className=\"flex items-center space-x-2\"\n            >\n              <Save className=\"h-4 w-4\" />\n              <span>\n                {mode === 'create' ? 'Create Routine' : 'Save Changes'}\n              </span>\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n        {/* Routine Details */}\n        <Card className=\"p-6\">\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"name\">Routine Name</Label>\n                <Input\n                  id=\"name\"\n                  value={routineName}\n                  onChange={e => setRoutineName(e.target.value)}\n                  placeholder=\"e.g., Full Body Split\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"duration\">Duration (weeks)</Label>\n                <Select value={duration} onValueChange={setDuration}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"4\">4 weeks</SelectItem>\n                    <SelectItem value=\"6\">6 weeks</SelectItem>\n                    <SelectItem value=\"8\">8 weeks</SelectItem>\n                    <SelectItem value=\"12\">12 weeks</SelectItem>\n                    <SelectItem value=\"16\">16 weeks</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"difficulty\">Difficulty</Label>\n                <Select value={difficulty} onValueChange={setDifficulty}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Beginner\">Beginner</SelectItem>\n                    <SelectItem value=\"Intermediate\">Intermediate</SelectItem>\n                    <SelectItem value=\"Advanced\">Advanced</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={description}\n                onChange={e => setDescription(e.target.value)}\n                placeholder=\"Describe your routine...\"\n                rows={3}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"objectives\">Training Objectives</Label>\n              <Textarea\n                id=\"objectives\"\n                value={objectives}\n                onChange={e => setObjectives(e.target.value)}\n                placeholder=\"What are the main goals and focus areas of this routine?\"\n                rows={3}\n              />\n            </div>\n          </div>\n        </Card>\n\n        {/* Strength Workouts Section */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">\n              Strength Workouts ({strengthWorkouts.length})\n            </h2>\n            <Button\n              onClick={handleAddStrengthWorkout}\n              className=\"bg-indigo-600 hover:bg-indigo-700\"\n            >\n              <Dumbbell className=\"h-4 w-4 mr-2\" />\n              Add Strength Workout\n            </Button>\n          </div>\n\n          {strengthWorkouts.map((workout, index) =>\n            renderWorkoutCard(\n              workout,\n              index,\n              true,\n              collapsedStrengthWorkouts,\n              toggleStrengthWorkoutCollapse,\n              moveStrengthWorkout,\n              removeStrengthWorkout,\n              updateStrengthWorkoutName,\n              updateStrengthWorkoutObjective,\n              updateStrengthWorkoutScheduleWrapper,\n              addStrengthSection,\n              removeStrengthSection,\n              updateStrengthSectionName,\n              updateStrengthSectionType,\n              updateStrengthSectionRestAfter,\n              updateStrengthSectionEmomDuration,\n              updateStrengthExerciseEmomReps,\n              updateStrengthExerciseSets,\n              updateStrengthExerciseName,\n              updateStrengthRestTimer,\n              updateStrengthExerciseRestAfter,\n              removeStrengthExercise,\n              strengthWorkouts.length\n            )\n          )}\n\n          {strengthWorkouts.length === 0 && (\n            <Card className=\"p-8 text-center\">\n              <div className=\"flex flex-col items-center space-y-4\">\n                <Dumbbell className=\"h-12 w-12 text-gray-400\" />\n                <div>\n                  <p className=\"text-gray-500 mb-4\">\n                    No strength workouts added yet\n                  </p>\n                  <Button\n                    onClick={handleAddStrengthWorkout}\n                    className=\"bg-indigo-600 hover:bg-indigo-700\"\n                  >\n                    <Dumbbell className=\"h-4 w-4 mr-2\" />\n                    Add Your First Strength Workout\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          )}\n        </div>\n\n        {/* Running Workouts Section */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">\n              Running Workouts (\n              {runningWorkouts.length + (creatingRunning ? 1 : 0)})\n            </h2>\n            <Button\n              onClick={handleAddRunningWorkout}\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              <Activity className=\"h-4 w-4 mr-2\" />\n              Add Running Workout\n            </Button>\n          </div>\n\n          {/* Running Creation Inline */}\n          {creatingRunning && (\n            <Card className=\"border-2 border-green-200\">\n              <TrailRunningWorkout\n                onSave={handleRunningSave}\n                onCancel={handleRunningCancel}\n                mode=\"create\"\n              />\n            </Card>\n          )}\n\n          {/* Running Editing Inline */}\n          {editingRunning && (\n            <Card className=\"border-2 border-green-200\">\n              <TrailRunningWorkout\n                onSave={handleRunningSave}\n                onCancel={handleRunningCancel}\n                initialData={editingRunning.data}\n                mode=\"edit\"\n              />\n            </Card>\n          )}\n\n          {runningWorkouts.map((workout, index) =>\n            renderWorkoutCard(\n              workout,\n              index,\n              false,\n              collapsedRunningWorkouts,\n              toggleRunningWorkoutCollapse,\n              moveRunningWorkout,\n              removeRunningWorkout,\n              updateRunningWorkoutName,\n              updateRunningWorkoutObjective,\n              updateRunningWorkoutScheduleWrapper,\n              addRunningSection,\n              removeRunningSection,\n              updateRunningSectionName,\n              updateRunningSectionType,\n              updateRunningSectionRestAfter,\n              updateRunningSectionEmomDuration,\n              updateRunningExerciseEmomReps,\n              updateRunningExerciseSets,\n              updateRunningExerciseName,\n              updateRunningRestTimer,\n              updateRunningExerciseRestAfter,\n              removeRunningExercise,\n              runningWorkouts.length\n            )\n          )}\n\n          {runningWorkouts.length === 0 && !creatingRunning && (\n            <Card className=\"p-8 text-center\">\n              <div className=\"flex flex-col items-center space-y-4\">\n                <Activity className=\"h-12 w-12 text-gray-400\" />\n                <div>\n                  <p className=\"text-gray-500 mb-4\">\n                    No running workouts added yet\n                  </p>\n                  <Button\n                    onClick={handleAddRunningWorkout}\n                    className=\"bg-green-600 hover:bg-green-700\"\n                  >\n                    <Activity className=\"h-4 w-4 mr-2\" />\n                    Add Your First Running Workout\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          )}\n        </div>\n      </div>\n\n      {/* Modals */}\n      <ExerciseSelectionModal\n        isOpen={exerciseModalOpen}\n        onClose={() => {\n          setExerciseModalOpen(false);\n          setCurrentAddExerciseContext(null);\n        }}\n        onSelectExercise={handleExerciseSelect}\n      />\n\n      <NotesModal\n        isOpen={notesModalOpen}\n        onClose={() => {\n          setNotesModalOpen(false);\n          setCurrentNotesContext(null);\n        }}\n        onSave={handleNotesSave}\n        initialNotes={currentNotesContext?.currentNotes || ''}\n      />\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}
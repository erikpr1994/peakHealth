{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/lib/supabase/server.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\n\nexport async function createClient() {\n  const cookieStore = await cookies();\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll();\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            );\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  );\n}\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,yUAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,wRAAA,CAAA,qBAAkB,AAAD,6PAGtB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAEjC,EAAE,OAAM;gBACN,0DAA0D;gBAC1D,wDAAwD;gBACxD,iBAAiB;gBACnB;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/app/api/feature-flags/public/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\nimport { createClient } from '@/lib/supabase/server';\n\nexport async function GET() {\n  const supabase = await createClient();\n\n  try {\n    const environment = process.env.NEXT_PUBLIC_ENVIRONMENT || 'development';\n\n    // Get public feature flags (no user required)\n    const flagsResponse = await supabase.rpc('get_public_feature_flags', {\n      environment_param: environment,\n    });\n\n    if (flagsResponse.error) {\n      // If the function doesn't exist, return empty flags\n      if (flagsResponse.error.message.includes('function \"get_public_feature_flags\" does not exist')) {\n        return NextResponse.json({\n          flags: [],\n        });\n      }\n      throw flagsResponse.error;\n    }\n\n    return NextResponse.json({\n      flags: flagsResponse.data || [],\n    });\n  } catch (error: unknown) {\n    console.error('Error fetching public feature flags:', error);\n    const errorMessage =\n      error instanceof Error ? error.message : 'Unknown error';\n    return NextResponse.json(\n      { error: 'Internal Server Error', details: errorMessage },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;AAEA;;;AAEO,eAAe;IACpB,MAAM,WAAW,MAAM,CAAA,GAAA,kIAAA,CAAA,eAAY,AAAD;IAElC,IAAI;QACF,MAAM,cAAc,QAAQ,GAAG,CAAC,uBAAuB,IAAI;QAE3D,8CAA8C;QAC9C,MAAM,gBAAgB,MAAM,SAAS,GAAG,CAAC,4BAA4B;YACnE,mBAAmB;QACrB;QAEA,IAAI,cAAc,KAAK,EAAE;YACvB,oDAAoD;YACpD,IAAI,cAAc,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,uDAAuD;gBAC9F,OAAO,wUAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBACvB,OAAO,EAAE;gBACX;YACF;YACA,MAAM,cAAc,KAAK;QAC3B;QAEA,OAAO,wUAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO,cAAc,IAAI,IAAI,EAAE;QACjC;IACF,EAAE,OAAO,OAAgB;QACvB,QAAQ,KAAK,CAAC,wCAAwC;QACtD,MAAM,eACJ,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC3C,OAAO,wUAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAAyB,SAAS;QAAa,GACxD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}
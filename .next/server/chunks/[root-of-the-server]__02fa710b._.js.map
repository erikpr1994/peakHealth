{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/services/exerciseMappers.ts"],"sourcesContent":["import type { Exercise, ExerciseVariant } from '../types';\nimport type {\n  Category,\n  Difficulty,\n  Equipment,\n  MuscleGroup,\n} from '../types/constants';\nimport type {\n  DatabaseExercise,\n  DatabaseExerciseVariant,\n  DatabaseInstructionStep,\n  DatabaseExerciseTips,\n  DatabaseExerciseMedia,\n} from '../types/database';\n\n// Helper function to map database category to our enum\nexport function mapCategory(dbCategory: string): Category {\n  switch (dbCategory) {\n    case 'Strength':\n      return 'Strength';\n    case 'Cardio':\n      return 'Cardio';\n    case 'Flexibility':\n      return 'Flexibility';\n    case 'Balance':\n      return 'Balance';\n    default:\n      return 'Strength';\n  }\n}\n\n// Helper function to map database difficulty to our enum\nexport function mapDifficulty(dbDifficulty: string): Difficulty {\n  switch (dbDifficulty) {\n    case 'Beginner':\n      return 'Beginner';\n    case 'Intermediate':\n      return 'Intermediate';\n    case 'Advanced':\n      return 'Advanced';\n    case 'Unknown':\n      return 'Unknown';\n    default:\n      return 'Beginner';\n  }\n}\n\n// Helper function to map database equipment to our enum\nexport function mapEquipment(dbEquipment: string): Equipment {\n  switch (dbEquipment) {\n    case 'Barbell':\n      return 'Barbell';\n    case 'Dumbbell':\n      return 'Dumbbell';\n    case 'Bodyweight':\n      return 'Bodyweight';\n    case 'Machine':\n      return 'Machine';\n    case 'Resistance Band':\n      return 'Resistance Band';\n    case 'Kettlebell':\n      return 'Kettlebell';\n    case 'Cable':\n      return 'Cable';\n    case 'Bench':\n      return 'Bench';\n    case 'Incline Bench':\n      return 'Incline Bench';\n    case 'Decline Bench':\n      return 'Decline Bench';\n    case 'Pull-up Bar':\n      return 'Pull-up Bar';\n    case 'Squat Rack':\n      return 'Squat Rack';\n    case 'Step':\n      return 'Step';\n    default:\n      return 'Bodyweight';\n  }\n}\n\n// Helper function to map database muscle group to our enum\nexport function mapMuscleGroup(dbMuscleGroup: string): MuscleGroup {\n  switch (dbMuscleGroup) {\n    case 'Chest':\n      return 'Chest';\n    case 'Back':\n      return 'Back';\n    case 'Legs':\n      return 'Legs';\n    case 'Arms':\n      return 'Arms';\n    case 'Shoulders':\n      return 'Shoulders';\n    case 'Core':\n      return 'Core';\n    case 'Glutes':\n      return 'Glutes';\n    case 'Biceps':\n      return 'Biceps';\n    case 'Triceps':\n      return 'Triceps';\n    case 'Cardio':\n      return 'Cardio';\n    case 'Full Body':\n      return 'Full Body';\n    case 'Upper Chest':\n      return 'Upper Chest';\n    case 'Lower Chest':\n      return 'Lower Chest';\n    case 'Front Delts':\n      return 'Front Delts';\n    case 'Obliques':\n      return 'Obliques';\n    case 'Quadriceps':\n      return 'Quadriceps';\n    case 'Hamstrings':\n      return 'Hamstrings';\n    default:\n      return 'Core';\n  }\n}\n\n// Transform database exercise variant to our ExerciseVariant type\nexport function transformExerciseVariant(\n  dbVariant: DatabaseExerciseVariant,\n  steps: DatabaseInstructionStep[],\n  tips?: DatabaseExerciseTips,\n  media?: DatabaseExerciseMedia\n): ExerciseVariant {\n  return {\n    id: dbVariant.id as ExerciseVariant['id'],\n    name: dbVariant.name,\n    alternativeNames: dbVariant.alternative_names,\n    description: dbVariant.description,\n    focus: dbVariant.focus,\n    difficulty: mapDifficulty(dbVariant.difficulty),\n    equipment: dbVariant.equipment.map(mapEquipment),\n    muscleGroups: dbVariant.muscle_groups.map(mapMuscleGroup),\n    secondaryMuscles: dbVariant.secondary_muscles?.map(mapMuscleGroup),\n    isUnilateral: dbVariant.is_unilateral,\n    instructions: dbVariant.instructions,\n    steps: steps\n      .sort((a, b) => a.step_order - b.step_order)\n      .map(step => ({\n        title: step.title,\n        description: step.description,\n      })),\n    tips: tips\n      ? {\n          proTips: tips.pro_tips,\n          commonMistakes: tips.common_mistakes,\n          safetyNotes: tips.safety_notes,\n        }\n      : undefined,\n    media: media\n      ? {\n          images: media.images,\n          videos: media.videos,\n          featuredImage: media.featured_image,\n          featuredVideo: media.featured_video,\n        }\n      : undefined,\n    prerequisites: undefined, // TODO: Add prerequisites field to DatabaseExerciseTips\n    created_at: new Date(dbVariant.created_at),\n    updated_at: new Date(dbVariant.updated_at),\n  };\n}\n\n// Transform database exercise to our Exercise type\nexport function transformExercise(\n  dbExercise: DatabaseExercise,\n  variants: ExerciseVariant[]\n): Exercise {\n  // Calculate summary from variants\n  const difficulties = variants.map(v => v.difficulty);\n  const allEquipment = new Set<Equipment>();\n  const allMuscleGroups = new Set<MuscleGroup>();\n\n  variants.forEach(variant => {\n    variant.equipment.forEach(eq => allEquipment.add(eq));\n    variant.muscleGroups.forEach(mg => allMuscleGroups.add(mg));\n  });\n\n  return {\n    id: dbExercise.id as Exercise['id'],\n    name: dbExercise.name,\n    alternativeNames: dbExercise.alternative_names,\n    category: mapCategory(dbExercise.category),\n    description: dbExercise.description,\n    variants,\n    mainVariantId: variants[0]?.id, // Default to first variant, could be enhanced\n    icon: dbExercise.icon,\n    iconColor: dbExercise.icon_color,\n    isFavorite: false, // This will be handled separately for user-specific data\n    isPopular: dbExercise.is_popular,\n    isNew: dbExercise.is_new,\n    rating: dbExercise.rating || undefined,\n    summary: {\n      difficultyRange: {\n        min:\n          difficulties.length > 0\n            ? (() => {\n                const minLevel = Math.min(\n                  ...difficulties.map(d => {\n                    const levels = {\n                      Beginner: 1,\n                      Intermediate: 2,\n                      Advanced: 3,\n                      Unknown: 0,\n                    };\n                    return levels[d] || 0;\n                  })\n                );\n                const levelToDifficulty = {\n                  0: 'Unknown' as Difficulty,\n                  1: 'Beginner' as Difficulty,\n                  2: 'Intermediate' as Difficulty,\n                  3: 'Advanced' as Difficulty,\n                };\n                return (\n                  levelToDifficulty[\n                    minLevel as keyof typeof levelToDifficulty\n                  ] || 'Unknown'\n                );\n              })()\n            : 'Beginner',\n        max:\n          difficulties.length > 0\n            ? (() => {\n                const maxLevel = Math.max(\n                  ...difficulties.map(d => {\n                    const levels = {\n                      Beginner: 1,\n                      Intermediate: 2,\n                      Advanced: 3,\n                      Unknown: 0,\n                    };\n                    return levels[d] || 0;\n                  })\n                );\n                const levelToDifficulty = {\n                  0: 'Unknown' as Difficulty,\n                  1: 'Beginner' as Difficulty,\n                  2: 'Intermediate' as Difficulty,\n                  3: 'Advanced' as Difficulty,\n                };\n                return (\n                  levelToDifficulty[\n                    maxLevel as keyof typeof levelToDifficulty\n                  ] || 'Unknown'\n                );\n              })()\n            : 'Beginner',\n      },\n      equipmentOptions: Array.from(allEquipment),\n      primaryMuscleGroups: Array.from(allMuscleGroups),\n    },\n    tags: dbExercise.tags,\n    relatedExercises: dbExercise.related_exercise_ids as Exercise['id'][],\n    created_at: new Date(dbExercise.created_at),\n    updated_at: new Date(dbExercise.updated_at),\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 282, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/services/dataAggregators.ts"],"sourcesContent":["import type { Exercise, ExerciseVariant } from '../types';\nimport type { Difficulty, Equipment, MuscleGroup } from '../types/constants';\nimport type {\n  DatabaseExercise,\n  DatabaseExerciseVariant,\n  DatabaseInstructionStep,\n  DatabaseExerciseTips,\n  DatabaseExerciseMedia,\n} from '../types/database';\n\nimport { transformExercise, transformExerciseVariant } from './exerciseMappers';\n\nexport class ExerciseDataAggregators {\n  /**\n   * Aggregate exercise data from separate database queries\n   */\n  aggregateExerciseData(\n    exercises: DatabaseExercise[],\n    variants: DatabaseExerciseVariant[],\n    steps: DatabaseInstructionStep[],\n    tips: DatabaseExerciseTips[],\n    media: DatabaseExerciseMedia[]\n  ): Exercise[] {\n    const transformedExercises: Exercise[] = [];\n\n    for (const exercise of exercises) {\n      const exerciseVariants = variants.filter(\n        (v: DatabaseExerciseVariant) => v.exercise_id === exercise.id\n      );\n      const transformedVariants: ExerciseVariant[] = [];\n\n      for (const variant of exerciseVariants) {\n        const variantSteps = steps.filter(\n          (s: DatabaseInstructionStep) => s.exercise_variant_id === variant.id\n        );\n        const variantTips = tips.find(\n          (t: DatabaseExerciseTips) => t.exercise_variant_id === variant.id\n        );\n        const variantMedia = media.find(\n          (m: DatabaseExerciseMedia) => m.exercise_variant_id === variant.id\n        );\n\n        transformedVariants.push(\n          transformExerciseVariant(\n            variant,\n            variantSteps,\n            variantTips,\n            variantMedia\n          )\n        );\n      }\n\n      transformedExercises.push(\n        transformExercise(exercise, transformedVariants)\n      );\n    }\n\n    return transformedExercises;\n  }\n\n  /**\n   * Filter variants by search criteria\n   */\n  filterVariantsByCriteria(\n    variants: unknown[],\n    criteria: {\n      difficulties?: Difficulty[];\n      equipment?: Equipment[];\n      muscleGroups?: MuscleGroup[];\n    }\n  ): unknown[] {\n    return variants.filter((variant: unknown) => {\n      const typedVariant = variant as {\n        difficulty?: string;\n        equipment?: string[];\n        muscle_groups?: string[];\n      };\n\n      // Check difficulty filter\n      if (\n        criteria.difficulties &&\n        criteria.difficulties.length > 0 &&\n        !criteria.difficulties.includes(typedVariant.difficulty as Difficulty)\n      ) {\n        return false;\n      }\n\n      // Check equipment filter\n      if (\n        criteria.equipment &&\n        criteria.equipment.length > 0 &&\n        !criteria.equipment.some(eq => typedVariant.equipment?.includes(eq))\n      ) {\n        return false;\n      }\n\n      // Check muscle group filter\n      if (\n        criteria.muscleGroups &&\n        criteria.muscleGroups.length > 0 &&\n        !criteria.muscleGroups.some(mg =>\n          typedVariant.muscle_groups?.includes(mg)\n        )\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  /**\n   * Transform joined exercise data from search results\n   */\n  transformJoinedExerciseData(\n    exercises: unknown[],\n    criteria?: {\n      difficulties?: Difficulty[];\n      equipment?: Equipment[];\n      muscleGroups?: MuscleGroup[];\n    }\n  ): Exercise[] {\n    const filteredExercises: Exercise[] = [];\n\n    for (const exercise of exercises) {\n      const typedExercise = exercise as { exercise_variants?: unknown[] };\n      const variants = typedExercise.exercise_variants || [];\n      const filteredVariants = criteria\n        ? this.filterVariantsByCriteria(variants, criteria)\n        : variants;\n\n      if (filteredVariants.length > 0) {\n        const transformedVariants: ExerciseVariant[] = filteredVariants.map(\n          (variant: unknown) => {\n            const typedVariant = variant as {\n              exercise_instruction_steps?: unknown[];\n              exercise_tips?: unknown[];\n              exercise_media?: unknown[];\n            };\n            const steps = (typedVariant.exercise_instruction_steps ||\n              []) as DatabaseInstructionStep[];\n            const tips = typedVariant.exercise_tips?.[0] as\n              | DatabaseExerciseTips\n              | undefined;\n            const media = typedVariant.exercise_media?.[0] as\n              | DatabaseExerciseMedia\n              | undefined;\n\n            return transformExerciseVariant(\n              variant as DatabaseExerciseVariant,\n              steps,\n              tips,\n              media\n            );\n          }\n        );\n\n        filteredExercises.push(\n          transformExercise(exercise as DatabaseExercise, transformedVariants)\n        );\n      }\n    }\n\n    return filteredExercises;\n  }\n\n  /**\n   * Transform user favorites data\n   */\n  transformUserFavoritesData(favorites: unknown[]): Exercise[] {\n    const exercises: Exercise[] = [];\n\n    for (const favorite of favorites) {\n      const typedFavorite = favorite as { exercises?: unknown };\n      const exercise = typedFavorite.exercises;\n      if (\n        exercise &&\n        typeof exercise === 'object' &&\n        !Array.isArray(exercise)\n      ) {\n        const typedExercise = exercise as { exercise_variants?: unknown[] };\n        const variants = typedExercise.exercise_variants || [];\n        const transformedVariants: ExerciseVariant[] = variants.map(\n          (variant: unknown) => {\n            const typedVariant = variant as {\n              exercise_instruction_steps?: unknown[];\n              exercise_tips?: unknown[];\n              exercise_media?: unknown[];\n            };\n            const steps = (typedVariant.exercise_instruction_steps ||\n              []) as DatabaseInstructionStep[];\n            const tips = typedVariant.exercise_tips?.[0] as\n              | DatabaseExerciseTips\n              | undefined;\n            const media = typedVariant.exercise_media?.[0] as\n              | DatabaseExerciseMedia\n              | undefined;\n\n            return transformExerciseVariant(\n              variant as DatabaseExerciseVariant,\n              steps,\n              tips,\n              media\n            );\n          }\n        );\n\n        const transformedExercise = transformExercise(\n          exercise as DatabaseExercise,\n          transformedVariants\n        );\n        transformedExercise.isFavorite = true;\n        exercises.push(transformedExercise);\n      }\n    }\n\n    return exercises;\n  }\n}\n\n// Export a singleton instance\nexport const exerciseDataAggregators = new ExerciseDataAggregators();\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 465, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/lib/supabase/server.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\n\nexport async function createClient() {\n  const cookieStore = await cookies();\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll();\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            );\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  );\n}\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,yUAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,wRAAA,CAAA,qBAAkB,AAAD,6PAGtB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAEjC,EAAE,OAAM;gBACN,0DAA0D;gBAC1D,wDAAwD;gBACxD,iBAAiB;gBACnB;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 496, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/services/databaseQueries.ts"],"sourcesContent":["import type {\n  DatabaseExercise,\n  DatabaseExerciseVariant,\n  DatabaseInstructionStep,\n  DatabaseExerciseTips,\n  DatabaseExerciseMedia,\n} from '../types/database';\n\nimport { createClient } from '@/lib/supabase/server';\n\nexport class ExerciseDatabaseQueries {\n  /**\n   * Fetch all exercises with their related data\n   */\n  async fetchExercisesWithRelatedData(): Promise<{\n    exercises: DatabaseExercise[];\n    variants: DatabaseExerciseVariant[];\n    steps: DatabaseInstructionStep[];\n    tips: DatabaseExerciseTips[];\n    media: DatabaseExerciseMedia[];\n  }> {\n    const supabase = await createClient();\n\n    // Get all exercises\n    const { data: exercises, error: exercisesError } = await supabase\n      .from('exercises')\n      .select('*')\n      .order('name');\n\n    if (exercisesError) throw exercisesError;\n    if (!exercises)\n      return { exercises: [], variants: [], steps: [], tips: [], media: [] };\n\n    // Get all variants for these exercises\n    const exerciseIds = exercises.map((e: DatabaseExercise) => e.id);\n    const { data: variants, error: variantsError } = await supabase\n      .from('exercise_variants')\n      .select('*')\n      .in('exercise_id', exerciseIds)\n      .order('name');\n\n    if (variantsError) throw variantsError;\n\n    // Get instruction steps for all variants\n    const variantIds =\n      variants?.map((v: DatabaseExerciseVariant) => v.id) || [];\n    const { data: steps, error: stepsError } = await supabase\n      .from('exercise_instruction_steps')\n      .select('*')\n      .in('exercise_variant_id', variantIds)\n      .order('step_order');\n\n    if (stepsError) throw stepsError;\n\n    // Get tips for all variants\n    const { data: tips, error: tipsError } = await supabase\n      .from('exercise_tips')\n      .select('*')\n      .in('exercise_variant_id', variantIds);\n\n    if (tipsError) throw tipsError;\n\n    // Get media for all variants\n    const { data: media, error: mediaError } = await supabase\n      .from('exercise_media')\n      .select('*')\n      .in('exercise_variant_id', variantIds);\n\n    if (mediaError) throw mediaError;\n\n    return {\n      exercises: exercises || [],\n      variants: variants || [],\n      steps: steps || [],\n      tips: tips || [],\n      media: media || [],\n    };\n  }\n\n  /**\n   * Fetch a single exercise with its related data\n   */\n  async fetchExerciseWithRelatedData(exerciseId: string): Promise<{\n    exercise: DatabaseExercise | null;\n    variants: DatabaseExerciseVariant[];\n    steps: DatabaseInstructionStep[];\n    tips: DatabaseExerciseTips[];\n    media: DatabaseExerciseMedia[];\n  }> {\n    const supabase = await createClient();\n\n    // Get the exercise\n    const { data: exercise, error: exerciseError } = await supabase\n      .from('exercises')\n      .select('*')\n      .eq('id', exerciseId)\n      .single();\n\n    if (exerciseError) throw exerciseError;\n    if (!exercise)\n      return { exercise: null, variants: [], steps: [], tips: [], media: [] };\n\n    // Get all variants for this exercise\n    const { data: variants, error: variantsError } = await supabase\n      .from('exercise_variants')\n      .select('*')\n      .eq('exercise_id', exerciseId)\n      .order('name');\n\n    if (variantsError) throw variantsError;\n\n    // Get instruction steps for all variants\n    const variantIds =\n      variants?.map((v: DatabaseExerciseVariant) => v.id) || [];\n    const { data: steps, error: stepsError } = await supabase\n      .from('exercise_instruction_steps')\n      .select('*')\n      .in('exercise_variant_id', variantIds)\n      .order('step_order');\n\n    if (stepsError) throw stepsError;\n\n    // Get tips for all variants\n    const { data: tips, error: tipsError } = await supabase\n      .from('exercise_tips')\n      .select('*')\n      .in('exercise_variant_id', variantIds);\n\n    if (tipsError) throw tipsError;\n\n    // Get media for all variants\n    const { data: media, error: mediaError } = await supabase\n      .from('exercise_media')\n      .select('*')\n      .in('exercise_variant_id', variantIds);\n\n    if (mediaError) throw mediaError;\n\n    return {\n      exercise,\n      variants: variants || [],\n      steps: steps || [],\n      tips: tips || [],\n      media: media || [],\n    };\n  }\n\n  /**\n   * Search exercises with joins\n   */\n  async searchExercisesWithJoins(\n    searchTerm?: string,\n    category?: string\n  ): Promise<unknown[]> {\n    const supabase = await createClient();\n\n    let query = supabase.from('exercises').select(`\n        *,\n        exercise_variants (\n          *,\n          exercise_instruction_steps (*),\n          exercise_tips (*),\n          exercise_media (*)\n        )\n      `);\n\n    // Apply filters\n    if (searchTerm) {\n      query = query.or(\n        `name.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%`\n      );\n    }\n\n    if (category) {\n      query = query.eq('category', category);\n    }\n\n    const { data, error } = await query;\n    if (error) throw error;\n\n    return data || [];\n  }\n\n  /**\n   * Fetch user favorites with exercise data\n   */\n  async fetchUserFavorites(userId: string): Promise<unknown[]> {\n    const supabase = await createClient();\n\n    const { data, error } = await supabase\n      .from('user_exercise_favorites')\n      .select(\n        `\n        exercise_id,\n        exercises (\n          *,\n          exercise_variants (\n            *,\n            exercise_instruction_steps (*),\n            exercise_tips (*),\n            exercise_media (*)\n          )\n        )\n      `\n      )\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) throw error;\n    return data || [];\n  }\n\n  /**\n   * Add exercise to user favorites\n   */\n  async addToFavorites(userId: string, exerciseId: string): Promise<void> {\n    const supabase = await createClient();\n\n    const { error } = await supabase.from('user_exercise_favorites').insert({\n      user_id: userId,\n      exercise_id: exerciseId,\n    });\n\n    if (error) throw error;\n  }\n\n  /**\n   * Remove exercise from user favorites\n   */\n  async removeFromFavorites(userId: string, exerciseId: string): Promise<void> {\n    const supabase = await createClient();\n\n    const { error } = await supabase\n      .from('user_exercise_favorites')\n      .delete()\n      .eq('user_id', userId)\n      .eq('exercise_id', exerciseId);\n\n    if (error) throw error;\n  }\n}\n\n// Export a singleton instance\nexport const exerciseDatabaseQueries = new ExerciseDatabaseQueries();\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 642, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/services/errorHandlers.ts"],"sourcesContent":["export class ExerciseErrorHandlers {\n  /**\n   * Handle database errors with consistent messaging\n   */\n  handleDatabaseError(error: unknown, operation: string): never {\n    console.error(`Database error during ${operation}:`, error);\n\n    // You can add more sophisticated error handling here\n    // For example, logging to external services, retry logic, etc.\n\n    throw new Error(`Failed to ${operation}`);\n  }\n\n  /**\n   * Handle validation errors\n   */\n  handleValidationError(message: string): never {\n    console.error('Validation error:', message);\n    throw new Error(`Validation failed: ${message}`);\n  }\n\n  /**\n   * Handle not found errors\n   */\n  handleNotFoundError(resource: string, id?: string): never {\n    const message = id\n      ? `${resource} with ID ${id} not found`\n      : `${resource} not found`;\n    throw new Error(message);\n  }\n\n  /**\n   * Handle permission errors\n   */\n  handlePermissionError(operation: string): never {\n    console.error(`Permission denied for operation: ${operation}`);\n    throw new Error(`You don't have permission to ${operation}`);\n  }\n}\n\n// Export a singleton instance\nexport const exerciseErrorHandlers = new ExerciseErrorHandlers();\n"],"names":[],"mappings":";;;;AAAO,MAAM;IACX;;GAEC,GACD,oBAAoB,KAAc,EAAE,SAAiB,EAAS;QAC5D,QAAQ,KAAK,CAAC,CAAC,sBAAsB,EAAE,UAAU,CAAC,CAAC,EAAE;QAErD,qDAAqD;QACrD,+DAA+D;QAE/D,MAAM,IAAI,MAAM,CAAC,UAAU,EAAE,WAAW;IAC1C;IAEA;;GAEC,GACD,sBAAsB,OAAe,EAAS;QAC5C,QAAQ,KAAK,CAAC,qBAAqB;QACnC,MAAM,IAAI,MAAM,CAAC,mBAAmB,EAAE,SAAS;IACjD;IAEA;;GAEC,GACD,oBAAoB,QAAgB,EAAE,EAAW,EAAS;QACxD,MAAM,UAAU,KACZ,GAAG,SAAS,SAAS,EAAE,GAAG,UAAU,CAAC,GACrC,GAAG,SAAS,UAAU,CAAC;QAC3B,MAAM,IAAI,MAAM;IAClB;IAEA;;GAEC,GACD,sBAAsB,SAAiB,EAAS;QAC9C,QAAQ,KAAK,CAAC,CAAC,iCAAiC,EAAE,WAAW;QAC7D,MAAM,IAAI,MAAM,CAAC,6BAA6B,EAAE,WAAW;IAC7D;AACF;AAGO,MAAM,wBAAwB,IAAI","debugId":null}},
    {"offset": {"line": 679, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/services/validators.ts"],"sourcesContent":["import type { DatabaseExercise } from '../types/database';\n\nexport class ExerciseValidators {\n  /**\n   * Validate exercise data structure\n   */\n  validateExerciseData(data: unknown): data is DatabaseExercise {\n    if (!data || typeof data !== 'object') {\n      return false;\n    }\n\n    const exercise = data as Record<string, unknown>;\n\n    return (\n      typeof exercise.id === 'string' &&\n      typeof exercise.name === 'string' &&\n      typeof exercise.category === 'string' &&\n      typeof exercise.description === 'string'\n    );\n  }\n\n  /**\n   * Validate exercise array data\n   */\n  validateExerciseArray(data: unknown): data is DatabaseExercise[] {\n    if (!Array.isArray(data)) {\n      return false;\n    }\n\n    return data.every(exercise => this.validateExerciseData(exercise));\n  }\n\n  /**\n   * Validate favorite data structure\n   */\n  validateFavoriteData(data: unknown): boolean {\n    if (!data || typeof data !== 'object') {\n      return false;\n    }\n\n    const favorite = data as Record<string, unknown>;\n\n    return Boolean(\n      typeof favorite.exercise_id === 'string' &&\n        favorite.exercises &&\n        typeof favorite.exercises === 'object' &&\n        !Array.isArray(favorite.exercises)\n    );\n  }\n\n  /**\n   * Validate search parameters\n   */\n  validateSearchParams(params: {\n    searchTerm?: string;\n    category?: string;\n    difficulties?: string[];\n    equipment?: string[];\n    muscleGroups?: string[];\n  }): boolean {\n    // All parameters are optional, so any combination is valid\n    // You can add more specific validation rules here if needed\n    return true;\n  }\n\n  /**\n   * Validate user ID\n   */\n  validateUserId(userId: string): boolean {\n    return typeof userId === 'string' && userId.length > 0;\n  }\n\n  /**\n   * Validate exercise ID\n   */\n  validateExerciseId(exerciseId: string): boolean {\n    return typeof exerciseId === 'string' && exerciseId.length > 0;\n  }\n}\n\n// Export a singleton instance\nexport const exerciseValidators = new ExerciseValidators();\n"],"names":[],"mappings":";;;;AAEO,MAAM;IACX;;GAEC,GACD,qBAAqB,IAAa,EAA4B;QAC5D,IAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;YACrC,OAAO;QACT;QAEA,MAAM,WAAW;QAEjB,OACE,OAAO,SAAS,EAAE,KAAK,YACvB,OAAO,SAAS,IAAI,KAAK,YACzB,OAAO,SAAS,QAAQ,KAAK,YAC7B,OAAO,SAAS,WAAW,KAAK;IAEpC;IAEA;;GAEC,GACD,sBAAsB,IAAa,EAA8B;QAC/D,IAAI,CAAC,MAAM,OAAO,CAAC,OAAO;YACxB,OAAO;QACT;QAEA,OAAO,KAAK,KAAK,CAAC,CAAA,WAAY,IAAI,CAAC,oBAAoB,CAAC;IAC1D;IAEA;;GAEC,GACD,qBAAqB,IAAa,EAAW;QAC3C,IAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;YACrC,OAAO;QACT;QAEA,MAAM,WAAW;QAEjB,OAAO,QACL,OAAO,SAAS,WAAW,KAAK,YAC9B,SAAS,SAAS,IAClB,OAAO,SAAS,SAAS,KAAK,YAC9B,CAAC,MAAM,OAAO,CAAC,SAAS,SAAS;IAEvC;IAEA;;GAEC,GACD,qBAAqB,MAMpB,EAAW;QACV,2DAA2D;QAC3D,4DAA4D;QAC5D,OAAO;IACT;IAEA;;GAEC,GACD,eAAe,MAAc,EAAW;QACtC,OAAO,OAAO,WAAW,YAAY,OAAO,MAAM,GAAG;IACvD;IAEA;;GAEC,GACD,mBAAmB,UAAkB,EAAW;QAC9C,OAAO,OAAO,eAAe,YAAY,WAAW,MAAM,GAAG;IAC/D;AACF;AAGO,MAAM,qBAAqB,IAAI","debugId":null}},
    {"offset": {"line": 733, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/exercises/services/exerciseService.ts"],"sourcesContent":["import type { Exercise } from '../types';\nimport type {\n  Category,\n  Difficulty,\n  Equipment,\n  MuscleGroup,\n} from '../types/constants';\n\nimport { exerciseDataAggregators } from './dataAggregators';\nimport { exerciseDatabaseQueries } from './databaseQueries';\nimport { exerciseErrorHandlers } from './errorHandlers';\nimport { exerciseValidators } from './validators';\n\nexport class ExerciseService {\n  /**\n   * Get all exercises with their variants\n   */\n  async getAllExercises(): Promise<Exercise[]> {\n    try {\n      const { exercises, variants, steps, tips, media } =\n        await exerciseDatabaseQueries.fetchExercisesWithRelatedData();\n\n      return exerciseDataAggregators.aggregateExerciseData(\n        exercises,\n        variants,\n        steps,\n        tips,\n        media\n      );\n    } catch (error) {\n      return exerciseErrorHandlers.handleDatabaseError(\n        error,\n        'fetch exercises'\n      );\n    }\n  }\n\n  /**\n   * Get a single exercise by ID with all its variants\n   */\n  async getExerciseById(exerciseId: string): Promise<Exercise | null> {\n    if (!exerciseValidators.validateExerciseId(exerciseId)) {\n      exerciseErrorHandlers.handleValidationError('Invalid exercise ID');\n      return null; // This line will never be reached, but satisfies TypeScript\n    }\n\n    try {\n      const { exercise, variants, steps, tips, media } =\n        await exerciseDatabaseQueries.fetchExerciseWithRelatedData(exerciseId);\n\n      if (!exercise) {\n        exerciseErrorHandlers.handleNotFoundError('Exercise', exerciseId);\n        return null; // This line will never be reached, but satisfies TypeScript\n      }\n\n      const exercises = exerciseDataAggregators.aggregateExerciseData(\n        [exercise],\n        variants,\n        steps,\n        tips,\n        media\n      );\n\n      return exercises[0] || null;\n    } catch (error) {\n      exerciseErrorHandlers.handleDatabaseError(error, 'fetch exercise');\n      return null; // This line will never be reached, but satisfies TypeScript\n    }\n  }\n\n  /**\n   * Search exercises by various criteria\n   */\n  async searchExercises(params: {\n    searchTerm?: string;\n    category?: Category;\n    difficulties?: Difficulty[];\n    equipment?: Equipment[];\n    muscleGroups?: MuscleGroup[];\n  }): Promise<Exercise[]> {\n    if (!exerciseValidators.validateSearchParams(params)) {\n      exerciseErrorHandlers.handleValidationError('Invalid search parameters');\n      return []; // This line will never be reached, but satisfies TypeScript\n    }\n\n    try {\n      const exercises = await exerciseDatabaseQueries.searchExercisesWithJoins(\n        params.searchTerm,\n        params.category\n      );\n\n      const criteria = {\n        difficulties: params.difficulties,\n        equipment: params.equipment,\n        muscleGroups: params.muscleGroups,\n      };\n\n      return exerciseDataAggregators.transformJoinedExerciseData(\n        exercises,\n        criteria\n      );\n    } catch (error) {\n      exerciseErrorHandlers.handleDatabaseError(error, 'search exercises');\n      return []; // This line will never be reached, but satisfies TypeScript\n    }\n  }\n\n  /**\n   * Get user's favorite exercises\n   */\n  async getUserFavoriteExercises(userId: string): Promise<Exercise[]> {\n    if (!exerciseValidators.validateUserId(userId)) {\n      exerciseErrorHandlers.handleValidationError('Invalid user ID');\n      return []; // This line will never be reached, but satisfies TypeScript\n    }\n\n    try {\n      const favorites =\n        await exerciseDatabaseQueries.fetchUserFavorites(userId);\n      return exerciseDataAggregators.transformUserFavoritesData(favorites);\n    } catch (error) {\n      exerciseErrorHandlers.handleDatabaseError(error, 'fetch user favorites');\n      return []; // This line will never be reached, but satisfies TypeScript\n    }\n  }\n\n  /**\n   * Add exercise to user favorites\n   */\n  async addToFavorites(userId: string, exerciseId: string): Promise<void> {\n    if (!exerciseValidators.validateUserId(userId)) {\n      exerciseErrorHandlers.handleValidationError('Invalid user ID');\n      return; // This line will never be reached, but satisfies TypeScript\n    }\n\n    if (!exerciseValidators.validateExerciseId(exerciseId)) {\n      exerciseErrorHandlers.handleValidationError('Invalid exercise ID');\n      return; // This line will never be reached, but satisfies TypeScript\n    }\n\n    try {\n      await exerciseDatabaseQueries.addToFavorites(userId, exerciseId);\n    } catch (error) {\n      exerciseErrorHandlers.handleDatabaseError(error, 'add to favorites');\n    }\n  }\n\n  /**\n   * Remove exercise from user favorites\n   */\n  async removeFromFavorites(userId: string, exerciseId: string): Promise<void> {\n    if (!exerciseValidators.validateUserId(userId)) {\n      exerciseErrorHandlers.handleValidationError('Invalid user ID');\n      return; // This line will never be reached, but satisfies TypeScript\n    }\n\n    if (!exerciseValidators.validateExerciseId(exerciseId)) {\n      exerciseErrorHandlers.handleValidationError('Invalid exercise ID');\n      return; // This line will never be reached, but satisfies TypeScript\n    }\n\n    try {\n      await exerciseDatabaseQueries.removeFromFavorites(userId, exerciseId);\n    } catch (error) {\n      exerciseErrorHandlers.handleDatabaseError(error, 'remove from favorites');\n    }\n  }\n}\n\n// Export a singleton instance\nexport const exerciseService = new ExerciseService();\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 853, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/app/api/exercises/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nimport { exerciseService } from '@/features/exercises/services/exerciseService';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const exercises = await exerciseService.getAllExercises();\n    return NextResponse.json({ exercises });\n  } catch (error) {\n    console.error('Error fetching exercises:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch exercises' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,YAAY,MAAM,6JAAA,CAAA,kBAAe,CAAC,eAAe;QACvD,OAAO,wUAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAU;IACvC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,wUAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}
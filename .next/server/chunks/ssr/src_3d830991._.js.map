{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/components/layout/header/Header.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/layout/header/Header.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/layout/header/Header.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qbAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2S,GACxU,yEACA","debugId":null}},
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/components/layout/header/Header.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/layout/header/Header.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/layout/header/Header.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qbAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuR,GACpT,qDACA","debugId":null}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/contexts/AppContext.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const AppProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call AppProvider() from the server but AppProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/contexts/AppContext.tsx <module evaluation>\",\n    \"AppProvider\",\n);\nexport const useAppContext = registerClientReference(\n    function() { throw new Error(\"Attempted to call useAppContext() from the server but useAppContext is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/contexts/AppContext.tsx <module evaluation>\",\n    \"useAppContext\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,cAAc,CAAA,GAAA,qbAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,6DACA;AAEG,MAAM,gBAAgB,CAAA,GAAA,qbAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,6DACA","debugId":null}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/contexts/AppContext.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const AppProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call AppProvider() from the server but AppProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/contexts/AppContext.tsx\",\n    \"AppProvider\",\n);\nexport const useAppContext = registerClientReference(\n    function() { throw new Error(\"Attempted to call useAppContext() from the server but useAppContext is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/contexts/AppContext.tsx\",\n    \"useAppContext\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,cAAc,CAAA,GAAA,qbAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,yCACA;AAEG,MAAM,gBAAgB,CAAA,GAAA,qbAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,yCACA","debugId":null}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/feature-flags/types/index.ts"],"sourcesContent":["// Feature Flag System Types\n\nexport interface UserType {\n  id: string;\n  name: string;\n  displayName: string;\n  description?: string;\n  permissions: Record<string, unknown>;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface UserGroup {\n  id: string;\n  name: string;\n  displayName: string;\n  description?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface UserTypeAssignment {\n  id: string;\n  userId: string;\n  userTypeId: string;\n  assignedAt: string;\n  assignedBy?: string;\n}\n\nexport interface UserGroupAssignment {\n  id: string;\n  userId: string;\n  groupId: string;\n  assignedAt: string;\n  assignedBy?: string;\n}\n\nexport interface FeatureFlag {\n  id: string;\n  name: string;\n  displayName: string;\n  description?: string;\n  createdBy?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface FeatureFlagEnvironment {\n  id: string;\n  featureFlagId: string;\n  environment: string;\n  isEnabled: boolean;\n  rolloutPercentage: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface FeatureFlagUserRole {\n  id: string;\n  featureFlagId: string;\n  environment: string;\n  roleName: string;\n  isEnabled: boolean;\n  createdAt: string;\n}\n\nexport interface FeatureFlagUserGroup {\n  id: string;\n  featureFlagId: string;\n  environment: string;\n  groupName: string;\n  isEnabled: boolean;\n  createdAt: string;\n}\n\nexport interface FeatureFlagAuditLog {\n  id: string;\n  featureFlagId: string;\n  action: 'created' | 'updated' | 'deleted' | 'enabled' | 'disabled';\n  oldValues?: Record<string, unknown>;\n  newValues?: Record<string, unknown>;\n  changedBy?: string;\n  changedAt: string;\n  environment?: string;\n  reason?: string;\n}\n\n// API Response Types\nexport interface UserFeatureFlag {\n  name: string;\n  isEnabled: boolean;\n  rolloutPercentage: number;\n}\n\nexport interface UserTypeInfo {\n  typeName: string;\n  displayName: string;\n  description?: string;\n}\n\nexport interface UserGroupInfo {\n  groupName: string;\n  displayName: string;\n  description?: string;\n}\n\n// Context Types\nexport interface FeatureFlagContextType {\n  flags: Record<string, UserFeatureFlag>;\n  userTypes: UserTypeInfo[];\n  userGroups: UserGroupInfo[];\n  isLoading: boolean;\n  isEnabled: (featureName: string) => boolean;\n  hasUserType: (typeName: string) => boolean;\n  isInGroup: (groupName: string) => boolean;\n  refreshFlags: () => Promise<void>;\n}\n\n// Configuration Types\nexport interface FeatureFlagConfig {\n  monitoring: {\n    enabled: boolean;\n    endpoint?: string;\n    apiKey?: string;\n  };\n  caching: {\n    enabled: boolean;\n    ttl: number; // in milliseconds\n  };\n  analytics: {\n    enabled: boolean;\n    trackUsage: boolean;\n    trackPerformance: boolean;\n  };\n}\n\n// Environment Types\nexport type Environment = 'development' | 'staging' | 'production';\n\n// Hook Return Types\nexport interface UseFeatureFlagReturn {\n  flags: Record<string, boolean>;\n  isLoading: boolean;\n}\n\nexport interface UseFeatureFlagsReturn {\n  flags: Record<string, UserFeatureFlag>;\n  userTypes: UserTypeInfo[];\n  userGroups: UserGroupInfo[];\n  isLoading: boolean;\n  isEnabled: (featureName: string) => boolean;\n  hasUserType: (typeName: string) => boolean;\n  isInGroup: (groupName: string) => boolean;\n  refreshFlags: () => Promise<void>;\n}\n\n// Component Props Types\nexport interface FeatureFlagProps {\n  name: string;\n  environment?: Environment;\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n  loadingComponent?: React.ReactNode;\n  trackAnalytics?: boolean;\n}\n\n// Database Function Types\nexport interface DatabaseFunctions {\n  get_user_feature_flags: {\n    Args: {\n      user_id: string;\n      environment_param: string;\n      user_roles?: string[];\n      user_groups?: string[];\n    };\n    Returns: UserFeatureFlag[];\n  };\n  get_public_feature_flags: {\n    Args: {\n      environment_param: string;\n    };\n    Returns: UserFeatureFlag[];\n  };\n  user_has_role: {\n    Args: {\n      user_roles: string[];\n      role_name: string;\n    };\n    Returns: boolean;\n  };\n  user_in_group: {\n    Args: {\n      user_groups: string[];\n      group_name: string;\n    };\n    Returns: boolean;\n  };\n}\n"],"names":[],"mappings":"AAAA,4BAA4B","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/feature-flags/lib/config.ts"],"sourcesContent":["import { FeatureFlagConfig } from '../types';\n\nexport const DEFAULT_FEATURE_FLAG_CONFIG: FeatureFlagConfig = {\n  monitoring: {\n    enabled: false, // Will be enabled when monitoring is added\n  },\n  caching: {\n    enabled: true,\n    ttl: 5 * 60 * 1000, // 5 minutes\n  },\n  analytics: {\n    enabled: true,\n    trackUsage: true,\n    trackPerformance: true,\n  },\n};\n\nexport const FEATURE_FLAG_CONFIG: FeatureFlagConfig = {\n  monitoring: {\n    enabled:\n      process.env.NODE_ENV === 'production' &&\n      !!process.env.FEATURE_FLAG_MONITORING_ENABLED,\n    endpoint: process.env.FEATURE_FLAG_MONITORING_ENDPOINT,\n    apiKey: process.env.FEATURE_FLAG_MONITORING_API_KEY,\n  },\n  caching: {\n    enabled: true,\n    ttl: parseInt(process.env.FEATURE_FLAG_CACHE_TTL || '300000'), // 5 minutes default\n  },\n  analytics: {\n    enabled:\n      process.env.NODE_ENV === 'production' ||\n      process.env.FEATURE_FLAG_ANALYTICS_ENABLED === 'true',\n    trackUsage: true,\n    trackPerformance: true,\n  },\n};\n\n// Environment detection\nexport const getCurrentEnvironment = ():\n  | 'development'\n  | 'staging'\n  | 'production' => {\n  if (process.env.NODE_ENV === 'production') {\n    return process.env.NEXT_PUBLIC_ENVIRONMENT === 'staging'\n      ? 'staging'\n      : 'production';\n  }\n  return 'development';\n};\n\n// Feature flag names constants\nexport const FEATURE_FLAGS = {\n  NOTIFICATION_SYSTEM_FEATURE: 'notification_system_feature',\n  CALENDAR_FEATURE: 'calendar_feature',\n  PERFORMANCE_FEATURE: 'performance_feature',\n  HEALTH_FEATURE: 'health_feature',\n  TRAINER_AND_CLUBS_FEATURE: 'trainer_and_clubs_feature',\n  GYMS_FEATURE: 'gyms_feature',\n  EQUIPMENT_FEATURE: 'equipment_feature',\n  SUGGESTIONS_FEATURE: 'suggestions_feature',\n  ACCOUNT_SETTINGS_FEATURE: 'account_settings_feature',\n  APP_SETTINGS_FEATURE: 'app_settings_feature',\n  HELP_SUPPORT_FEATURE: 'help_support_feature',\n  DASHBOARD_FEATURE: 'dashboard_feature',\n} as const;\n\n// User types constants\nexport const USER_TYPES = {\n  REGULAR: 'regular',\n  TRAINER: 'trainer',\n  PHYSIO: 'physio',\n  ADMIN: 'admin',\n} as const;\n\n// User groups constants\nexport const USER_GROUPS = {\n  BETA: 'beta',\n  PREMIUM: 'premium',\n  EARLY_ACCESS: 'early_access',\n} as const;\n"],"names":[],"mappings":";;;;;;;;AAEO,MAAM,8BAAiD;IAC5D,YAAY;QACV,SAAS;IACX;IACA,SAAS;QACP,SAAS;QACT,KAAK,IAAI,KAAK;IAChB;IACA,WAAW;QACT,SAAS;QACT,YAAY;QACZ,kBAAkB;IACpB;AACF;AAEO,MAAM,sBAAyC;IACpD,YAAY;QACV,SACE,oDAAyB,gBACzB,CAAC,CAAC,QAAQ,GAAG,CAAC,+BAA+B;QAC/C,UAAU,QAAQ,GAAG,CAAC,gCAAgC;QACtD,QAAQ,QAAQ,GAAG,CAAC,+BAA+B;IACrD;IACA,SAAS;QACP,SAAS;QACT,KAAK,SAAS,QAAQ,GAAG,CAAC,sBAAsB,IAAI;IACtD;IACA,WAAW;QACT,SACE,oDAAyB,gBACzB,QAAQ,GAAG,CAAC,8BAA8B,KAAK;QACjD,YAAY;QACZ,kBAAkB;IACpB;AACF;AAGO,MAAM,wBAAwB;IAInC;;IAKA,OAAO;AACT;AAGO,MAAM,gBAAgB;IAC3B,6BAA6B;IAC7B,kBAAkB;IAClB,qBAAqB;IACrB,gBAAgB;IAChB,2BAA2B;IAC3B,cAAc;IACd,mBAAmB;IACnB,qBAAqB;IACrB,0BAA0B;IAC1B,sBAAsB;IACtB,sBAAsB;IACtB,mBAAmB;AACrB;AAGO,MAAM,aAAa;IACxB,SAAS;IACT,SAAS;IACT,QAAQ;IACR,OAAO;AACT;AAGO,MAAM,cAAc;IACzB,MAAM;IACN,SAAS;IACT,cAAc;AAChB","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/feature-flags/context/FeatureFlagContext.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const FeatureFlagProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call FeatureFlagProvider() from the server but FeatureFlagProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/feature-flags/context/FeatureFlagContext.tsx <module evaluation>\",\n    \"FeatureFlagProvider\",\n);\nexport const useFeatureFlags = registerClientReference(\n    function() { throw new Error(\"Attempted to call useFeatureFlags() from the server but useFeatureFlags is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/feature-flags/context/FeatureFlagContext.tsx <module evaluation>\",\n    \"useFeatureFlags\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,sBAAsB,CAAA,GAAA,qbAAA,CAAA,0BAAuB,AAAD,EACrD;IAAa,MAAM,IAAI,MAAM;AAAsP,GACnR,2FACA;AAEG,MAAM,kBAAkB,CAAA,GAAA,qbAAA,CAAA,0BAAuB,AAAD,EACjD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,2FACA","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/feature-flags/context/FeatureFlagContext.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const FeatureFlagProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call FeatureFlagProvider() from the server but FeatureFlagProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/feature-flags/context/FeatureFlagContext.tsx\",\n    \"FeatureFlagProvider\",\n);\nexport const useFeatureFlags = registerClientReference(\n    function() { throw new Error(\"Attempted to call useFeatureFlags() from the server but useFeatureFlags is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/feature-flags/context/FeatureFlagContext.tsx\",\n    \"useFeatureFlags\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,sBAAsB,CAAA,GAAA,qbAAA,CAAA,0BAAuB,AAAD,EACrD;IAAa,MAAM,IAAI,MAAM;AAAsP,GACnR,uEACA;AAEG,MAAM,kBAAkB,CAAA,GAAA,qbAAA,CAAA,0BAAuB,AAAD,EACjD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,uEACA","debugId":null}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/feature-flags/hooks/useFeatureFlag.ts"],"sourcesContent":["import { useFeatureFlags } from '../context/FeatureFlagContext';\nimport { UseFeatureFlagReturn } from '../types';\n\nexport function useFeatureFlag(featureNames: string[]): UseFeatureFlagReturn {\n  const { isEnabled, isLoading, flags: allFlags } = useFeatureFlags();\n\n  const getInitialFlags = () =>\n    featureNames.reduce((acc: Record<string, boolean>, name) => {\n      acc[name] = false;\n      return acc;\n    }, {});\n\n  if (isLoading) {\n    return { flags: getInitialFlags(), isLoading: true };\n  }\n\n  // Handle unauthenticated state where no flags are loaded.\n  if (Object.keys(allFlags).length === 0) {\n    return { flags: getInitialFlags(), isLoading: false };\n  }\n\n  const flags = featureNames.reduce((acc: Record<string, boolean>, name) => {\n    acc[name] = isEnabled(name);\n    return acc;\n  }, {});\n\n  return { flags, isLoading };\n}\n"],"names":[],"mappings":";;;AAAA;;AAGO,SAAS,eAAe,YAAsB;IACnD,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,QAAQ,EAAE,GAAG,CAAA,GAAA,qKAAA,CAAA,kBAAe,AAAD;IAEhE,MAAM,kBAAkB,IACtB,aAAa,MAAM,CAAC,CAAC,KAA8B;YACjD,GAAG,CAAC,KAAK,GAAG;YACZ,OAAO;QACT,GAAG,CAAC;IAEN,IAAI,WAAW;QACb,OAAO;YAAE,OAAO;YAAmB,WAAW;QAAK;IACrD;IAEA,0DAA0D;IAC1D,IAAI,OAAO,IAAI,CAAC,UAAU,MAAM,KAAK,GAAG;QACtC,OAAO;YAAE,OAAO;YAAmB,WAAW;QAAM;IACtD;IAEA,MAAM,QAAQ,aAAa,MAAM,CAAC,CAAC,KAA8B;QAC/D,GAAG,CAAC,KAAK,GAAG,UAAU;QACtB,OAAO;IACT,GAAG,CAAC;IAEJ,OAAO;QAAE;QAAO;IAAU;AAC5B","debugId":null}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/feature-flags/index.ts"],"sourcesContent":["// Feature Flag System - Main Export\n\n// Types\nexport * from './types';\n\n// Configuration\nexport * from './lib/config';\n\n// Context and Hooks\nexport {\n  FeatureFlagProvider,\n  useFeatureFlags,\n} from './context/FeatureFlagContext';\nexport { useFeatureFlag } from './hooks/useFeatureFlag';\n"],"names":[],"mappings":"AAAA,oCAAoC;AAEpC,QAAQ;;AACR;AAEA,gBAAgB;AAChB;AAEA,oBAAoB;AACpB;AAIA","debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/notifications/NotificationsBell.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const NotificationsBell = registerClientReference(\n    function() { throw new Error(\"Attempted to call NotificationsBell() from the server but NotificationsBell is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/notifications/NotificationsBell.tsx <module evaluation>\",\n    \"NotificationsBell\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,oBAAoB,CAAA,GAAA,qbAAA,CAAA,0BAAuB,AAAD,EACnD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,kFACA","debugId":null}},
    {"offset": {"line": 272, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/notifications/NotificationsBell.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const NotificationsBell = registerClientReference(\n    function() { throw new Error(\"Attempted to call NotificationsBell() from the server but NotificationsBell is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/notifications/NotificationsBell.tsx\",\n    \"NotificationsBell\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,oBAAoB,CAAA,GAAA,qbAAA,CAAA,0BAAuB,AAAD,EACnD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,8DACA","debugId":null}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/notifications/NotificationsContext.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const NotificationsProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call NotificationsProvider() from the server but NotificationsProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/notifications/NotificationsContext.tsx <module evaluation>\",\n    \"NotificationsProvider\",\n);\nexport const useNotifications = registerClientReference(\n    function() { throw new Error(\"Attempted to call useNotifications() from the server but useNotifications is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/notifications/NotificationsContext.tsx <module evaluation>\",\n    \"useNotifications\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,wBAAwB,CAAA,GAAA,qbAAA,CAAA,0BAAuB,AAAD,EACvD;IAAa,MAAM,IAAI,MAAM;AAA0P,GACvR,qFACA;AAEG,MAAM,mBAAmB,CAAA,GAAA,qbAAA,CAAA,0BAAuB,AAAD,EAClD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,qFACA","debugId":null}},
    {"offset": {"line": 308, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/notifications/NotificationsContext.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const NotificationsProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call NotificationsProvider() from the server but NotificationsProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/notifications/NotificationsContext.tsx\",\n    \"NotificationsProvider\",\n);\nexport const useNotifications = registerClientReference(\n    function() { throw new Error(\"Attempted to call useNotifications() from the server but useNotifications is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/notifications/NotificationsContext.tsx\",\n    \"useNotifications\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,wBAAwB,CAAA,GAAA,qbAAA,CAAA,0BAAuB,AAAD,EACvD;IAAa,MAAM,IAAI,MAAM;AAA0P,GACvR,iEACA;AAEG,MAAM,mBAAmB,CAAA,GAAA,qbAAA,CAAA,0BAAuB,AAAD,EAClD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,iEACA","debugId":null}},
    {"offset": {"line": 324, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 332, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/features/notifications/index.ts"],"sourcesContent":["export { NotificationsBell } from './NotificationsBell';\nexport {\n  NotificationsProvider,\n  useNotifications,\n} from './NotificationsContext';\nexport type { Notification } from './NotificationsContext';\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/app/%28app%29/layout.tsx"],"sourcesContent":["import Header from '@/components/layout/header/Header';\nimport { AppProvider } from '@/contexts/AppContext';\nimport { FeatureFlagProvider } from '@/features/feature-flags';\nimport { NotificationsProvider } from '@/features/notifications';\n\nconst AppLayout = ({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) => {\n  return (\n    <AppProvider>\n      <FeatureFlagProvider>\n        <NotificationsProvider hasTrainer={false} isClubMember={false}>\n          <Header />\n          <main style={{ paddingTop: '64px' }}>{children}</main>\n        </NotificationsProvider>\n      </FeatureFlagProvider>\n    </AppProvider>\n  );\n};\n\nexport default AppLayout;\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAAA;AACA;AAAA;;;;;;AAEA,MAAM,YAAY,CAAC,EACjB,QAAQ,EAGR;IACA,qBACE,sbAAC,8HAAA,CAAA,cAAW;kBACV,cAAA,sbAAC,qKAAA,CAAA,sBAAmB;sBAClB,cAAA,sbAAC,yJAAA,CAAA,wBAAqB;gBAAC,YAAY;gBAAO,cAAc;;kCACtD,sbAAC,gJAAA,CAAA,UAAM;;;;;kCACP,sbAAC;wBAAK,OAAO;4BAAE,YAAY;wBAAO;kCAAI;;;;;;;;;;;;;;;;;;;;;;AAKhD;uCAEe","debugId":null}}]
}
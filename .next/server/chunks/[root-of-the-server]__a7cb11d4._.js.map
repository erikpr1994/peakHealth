{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/lib/supabase/server.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\n\nexport async function createClient() {\n  const cookieStore = await cookies();\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll();\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            );\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  );\n}\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,yUAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,wRAAA,CAAA,qBAAkB,AAAD,6PAGtB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAEjC,EAAE,OAAM;gBACN,0DAA0D;gBAC1D,wDAAwD;gBACxD,iBAAiB;gBACnB;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Safely converts a date string to a Date object\n * @param dateString - The date string to convert\n * @returns Date object if valid, undefined if invalid or null/undefined\n */\nexport function safeDateConversion(dateString: unknown): Date | undefined {\n  if (!dateString || typeof dateString !== 'string') {\n    return undefined;\n  }\n\n  const date = new Date(dateString);\n  return isNaN(date.getTime()) ? undefined : date;\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2NAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wLAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAOO,SAAS,mBAAmB,UAAmB;IACpD,IAAI,CAAC,cAAc,OAAO,eAAe,UAAU;QACjD,OAAO;IACT;IAEA,MAAM,OAAO,IAAI,KAAK;IACtB,OAAO,MAAM,KAAK,OAAO,MAAM,YAAY;AAC7C","debugId":null}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///Users/erikpr94/Documents/peakHealth/src/app/api/profile/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nimport { ProfileUpdateData } from '@/features/profile/types/profile';\nimport { createClient } from '@/lib/supabase/server';\nimport { safeDateConversion } from '@/lib/utils';\n\nexport async function GET() {\n  try {\n    const supabase = await createClient();\n\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser();\n\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Not authenticated' }, { status: 401 });\n    }\n\n    // Get user profile data using the database function\n    const { data: profileData, error: profileError } = await supabase.rpc(\n      'get_user_profile',\n      { user_id_param: user.id }\n    );\n\n    if (profileError) {\n      // eslint-disable-next-line no-console\n      console.error('Error fetching profile data:', profileError);\n      return NextResponse.json(\n        { error: 'Failed to fetch profile data' },\n        { status: 500 }\n      );\n    }\n\n    // Parse the JSONB data\n    const profile = profileData?.[0]?.profile_data || {};\n    const stats = profileData?.[0]?.stats_data || {};\n    const achievements =\n      (profileData?.[0]?.achievements_data as unknown[]) || [];\n\n    return NextResponse.json({\n      profile: {\n        id: user.id,\n        ...profile,\n        created_at: safeDateConversion(profile.created_at),\n        updated_at: safeDateConversion(profile.updated_at),\n        onboarding_completed_at: safeDateConversion(\n          profile.onboarding_completed_at\n        ),\n      },\n      stats: {\n        user_id: user.id,\n        total_workouts: stats.total_workouts || 0,\n        days_active: stats.days_active || 0,\n        hours_trained: stats.hours_trained || 0,\n        achievements_count: stats.achievements_count || 0,\n        last_updated: safeDateConversion(stats.last_updated) || new Date(),\n      },\n      achievements: achievements.map((achievement: unknown) => {\n        const achievementObj = achievement as Record<string, unknown>;\n        return {\n          ...achievementObj,\n          earned_at: safeDateConversion(achievementObj.earned_at),\n        };\n      }),\n    });\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('Profile API error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const supabase = await createClient();\n\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser();\n\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Not authenticated' }, { status: 401 });\n    }\n\n    const updateData: ProfileUpdateData = await request.json();\n\n    // Update or insert profile data\n    const { data: profile, error: profileError } = await supabase\n      .from('profiles')\n      .upsert({\n        id: user.id,\n        ...updateData,\n        updated_at: new Date().toISOString(),\n      })\n      .select()\n      .single();\n\n    if (profileError) {\n      // eslint-disable-next-line no-console\n      console.error('Error updating profile:', profileError);\n      return NextResponse.json(\n        { error: 'Failed to update profile' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      profile: {\n        id: profile.id,\n        bio: profile.bio,\n        fitness_level: profile.fitness_level,\n        time_available: profile.time_available,\n        equipment_access: profile.equipment_access,\n        experience: profile.experience,\n        goals: profile.goals,\n        workout_types: profile.workout_types,\n        limitations: profile.limitations,\n        motivation: profile.motivation,\n        onboarding_completed_at: safeDateConversion(\n          profile.onboarding_completed_at\n        ),\n        created_at: safeDateConversion(profile.created_at),\n        updated_at: safeDateConversion(profile.updated_at),\n      },\n      message: 'Profile updated successfully',\n    });\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('Profile update API error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}
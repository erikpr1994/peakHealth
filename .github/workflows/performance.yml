name: Performance Analysis

on:
  pull_request:
    branches: [main]
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'turbo.json'
  # Allow manual triggering
  workflow_dispatch:

env:
  PNPM_VERSION: 10.14.0
  NODE_VERSION: 24.x

jobs:
  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build with bundle analysis
        run: |
          # Set environment variable for Next.js bundle analyzer
          export ANALYZE=true
          
          # Build all apps
          pnpm build

      - name: Upload bundle analysis results
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: |
            apps/*/analyze
            apps/*/.next/analyze
          retention-days: 14

      - name: Comment bundle size on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Function to read bundle stats
            function readBundleStats(app) {
              try {
                const statsPath = `apps/${app}/.next/analyze/client.html`;
                if (fs.existsSync(statsPath)) {
                  return `Bundle analysis for ${app} app is available as an artifact.`;
                }
                return null;
              } catch (error) {
                return null;
              }
            }
            
            // Get stats for each app
            const apps = ['web', 'admin', 'auth', 'landing'];
            let comment = '## ðŸ“Š Bundle Size Analysis\n\n';
            
            for (const app of apps) {
              const stats = readBundleStats(app);
              if (stats) {
                comment += `### ${app} App\n${stats}\n\n`;
              }
            }
            
            comment += '\nDownload the bundle-analysis artifact for detailed reports.';
            
            // Post comment on PR
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  lighthouse:
    name: Lighthouse Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Start local server
        run: |
          # Start the web app in the background
          cd apps/web
          pnpm start &
          echo $! > .web-server.pid
          
          # Wait for server to be ready
          echo "Waiting for server to be ready..."
          npx wait-on http://localhost:3000 -t 60000

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: '.github/lighthouse-config.json'

      - name: Stop local server
        if: always()
        run: |
          if [ -f apps/web/.web-server.pid ]; then
            kill $(cat apps/web/.web-server.pid)
            rm apps/web/.web-server.pid
          fi


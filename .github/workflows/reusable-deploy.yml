name: Reusable Deployment

on:
  workflow_call:
    inputs:
      app-name:
        required: true
        type: string
      project-id-secret:
        required: true
        type: string
      sentry-project-secret:
        required: true
        type: string
      working-directory:
        required: true
        type: string
      filter-paths:
        required: true
        type: string
      environment:
        required: false
        default: 'production'
        type: string
    secrets:
      VERCEL_TOKEN:
        required: true
      VERCEL_ORG_ID:
        required: true
      SENTRY_AUTH_TOKEN:
        required: true
      SENTRY_ORG:
        required: true

jobs:
  check-changes:
    name: Check for relevant changes
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.filter.outputs.changes_detected }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            changes_detected:
              - ${{ inputs.filter-paths }}

  build-and-deploy:
    name: Build and Deploy
    needs: check-changes
    if: ${{ needs.check-changes.outputs.should_deploy == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    env:
      NODE_VERSION: 24.x
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract pnpm version from package.json
        id: pnpm-version
        shell: bash
        run: |
          PNPM_VERSION=$(node -e "try { const pkg = require('./package.json'); console.log(pkg.packageManager.split('@')[1]); } catch (e) { console.log('10.14.0'); }")
          echo "version=${PNPM_VERSION}" >> $GITHUB_OUTPUT
          echo "Using pnpm version: ${PNPM_VERSION}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ steps.pnpm-version.outputs.version }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Turborepo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build app
        run: pnpm turbo run build --filter=@peakhealth/${{ inputs.app-name }}...

      # Deploy to Vercel
      - name: Deploy to Vercel
        id: deploy
        uses: vercel/action@v3
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets[inputs.project-id-secret] }}
          working-directory: ${{ inputs.working-directory }}
          vercel-args: '--prod'

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets[inputs.sentry-project-secret] }}
        with:
          environment: ${{ inputs.environment }}
          version: ${{ github.sha }}

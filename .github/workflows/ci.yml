name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # Allow manual triggering
  workflow_dispatch: {}

# Cancel in-progress runs on new pushes
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  setup-and-validate:
    name: Setup, Lint, Type-Check, and Test
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.affected.outputs.affected }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          setup-build-cache: true
          setup-test-cache: true

      - name: Determine affected packages
        id: affected
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA=$(git merge-base ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
            AFFECTED_PACKAGES=$(pnpm turbo run build --filter="...[${BASE_SHA}]" --dry-run=json | jq -r '.tasks[] | .package' | sort -u | tr '\n' ',' | sed 's/,$//')
          else
            # For push to main, consider all packages affected
            AFFECTED_PACKAGES="all"
          fi
          echo "affected=${AFFECTED_PACKAGES}" >> $GITHUB_OUTPUT
          echo "Affected packages: ${AFFECTED_PACKAGES}"

      # Run linting using Turborepo
      - name: Run linting
        if: ${{ steps.affected.outputs.affected != '' }}
        run: |
          pnpm turbo run lint --concurrency=3 --cache-dir=.turbo

      # Run type checking using Turborepo
      - name: Run type checking
        if: ${{ steps.affected.outputs.affected != '' }}
        run: |
          pnpm turbo run type-check --concurrency=3 --cache-dir=.turbo

      # Run unit tests using Turborepo
      - name: Run unit tests
        if: ${{ steps.affected.outputs.affected != '' }}
        run: |
          pnpm turbo run test --concurrency=3 --cache-dir=.turbo

      # Run YAML linting if YAML files are changed (separate from code linting)
      - name: Check for YAML changes
        id: yaml-changes
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA=$(git merge-base ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
            YAML_CHANGED=$(git diff --name-only ${BASE_SHA} | grep -E '\.(yml|yaml)$' || true)
          else
            YAML_CHANGED=$(git diff --name-only HEAD~1 | grep -E '\.(yml|yaml)$' || true)
          fi
          if [[ -n "$YAML_CHANGED" ]]; then
            echo "yaml-changed=true" >> $GITHUB_OUTPUT
            echo "Changed YAML files: $YAML_CHANGED"
          else
            echo "yaml-changed=false" >> $GITHUB_OUTPUT
            echo "No YAML files changed"
          fi

      - name: Setup Python for YAML linting
        if: ${{ steps.yaml-changes.outputs.yaml-changed == 'true' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install yamllint
        if: ${{ steps.yaml-changes.outputs.yaml-changed == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install yamllint

      - name: Lint YAML files
        if: ${{ steps.yaml-changes.outputs.yaml-changed == 'true' }}
        run: |
          echo "Linting YAML files..."
          yamllint .github/workflows/ || exit 1
          yamllint *.yml *.yaml || exit 1

      - name: Run coverage tests
        if: ${{ steps.affected.outputs.affected != '' }}
        run: pnpm test:coverage

      - name: Upload test results
        if: ${{ steps.affected.outputs.affected != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/coverage
            **/test-results
          retention-days: 7

  build:
    name: Build
    needs: setup-and-validate
    runs-on: ubuntu-latest
    if: ${{ needs.setup-and-validate.outputs.affected != '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          setup-build-cache: true

      # Build only workspace packages (no environment variables needed)
      # Apps will be built by Vercel during deployment with proper env vars
      - name: Build packages only
        run: pnpm turbo run build --filter="@peakhealth/ui" --filter="@peakhealth/auth-types" --filter="@peakhealth/auth-utils"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/dist
          retention-days: 1

  # Optional: Full build job for testing (uncomment if needed)
  #  build-apps:
  #    name: Build Apps (Optional)
  #    needs: build
  #    runs-on: ubuntu-latest
  #    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
  #    steps:
  #      - name: Checkout repository
  #        uses: actions/checkout@v4
  #
  #      - name: Setup environment
  #        uses: ./.github/actions/setup
  #        with:
  #          setup-build-cache: true
  #
  #      - name: Download package artifacts
  #        uses: actions/download-artifact@v4
  #        with:
  #          name: build-artifacts
  #
  #      # Add environment variables for app builds
  #      - name: Build all apps
  #        env:
  #          # Add your environment variables here
  #          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  #          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  #          # Add other required env vars
  #        run: pnpm turbo run build --filter="@peakhealth/web" --filter="@peakhealth/admin" --filter="@peakhealth/landing"

  e2e-tests:
    name: E2E Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Install Playwright browsers
        run: pnpm --filter @peakhealth/e2e exec playwright install --with-deps

      - name: Setup dev database
        run: pnpm setup-dev-db

      - name: Run E2E tests
        run: |
          cd apps/e2e
          pnpm exec playwright test \
            --reporter=html,line \
            --timeout=120000 \
            --retries=1

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: apps/e2e/playwright-report/
          retention-days: 30

name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # Allow manual triggering
  workflow_dispatch: {}

# Cancel in-progress runs on new pushes
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Parallel job structure for faster CI:
  # 1. determine-affected: Determines what packages are affected (runs first)
  # 2. setup-environment: Sets up the environment and caches (runs in parallel with determine-affected)
  # 3. lint, type-check, test: Run in parallel after setup (depend on both determine-affected and setup-environment)
  # 4. yaml-lint: Runs in parallel if YAML files changed (only depends on determine-affected)
  # 5. build: Runs after all validation jobs pass
  # 6. e2e-tests: Runs after build completes

  determine-affected:
    name: Determine Affected Packages
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.affected.outputs.affected }}
      yaml-changed: ${{ steps.yaml-changes.outputs.yaml-changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          install-dependencies: false

      - name: Determine affected packages
        id: affected
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA=$(git merge-base ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
            echo "Determining affected packages from base SHA: ${BASE_SHA}"
            
            # Get affected packages with better error handling
            TURBO_OUTPUT=$(pnpm turbo run build --filter="...[${BASE_SHA}]" --dry-run=json 2>/dev/null || echo '{"tasks": []}')
            AFFECTED_PACKAGES=$(echo "$TURBO_OUTPUT" | jq -r '.tasks[] | .package // empty' 2>/dev/null | sort -u | tr '\n' ',' | sed 's/,$//')
            
            # If no packages found or empty result, set to empty string
            if [[ -z "$AFFECTED_PACKAGES" ]]; then
              AFFECTED_PACKAGES=""
              echo "No affected packages found"
            fi
          else
            # For push to main, consider all packages affected
            AFFECTED_PACKAGES="all"
            echo "Push to main detected, considering all packages affected"
          fi
          echo "affected=${AFFECTED_PACKAGES}" >> $GITHUB_OUTPUT
          echo "Affected packages: ${AFFECTED_PACKAGES}"

      - name: Check for YAML changes
        id: yaml-changes
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA=$(git merge-base ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
            YAML_CHANGED=$(git diff --name-only ${BASE_SHA} | grep -E '\.(yml|yaml)$' || true)
          else
            YAML_CHANGED=$(git diff --name-only HEAD~1 | grep -E '\.(yml|yaml)$' || true)
          fi
          if [[ -n "$YAML_CHANGED" ]]; then
            echo "yaml-changed=true" >> $GITHUB_OUTPUT
            echo "Changed YAML files: $YAML_CHANGED"
          else
            echo "yaml-changed=false" >> $GITHUB_OUTPUT
            echo "No YAML files changed"
          fi

  setup-environment:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          setup-build-cache: true
          setup-test-cache: true

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=${{ github.sha }}" >> $GITHUB_OUTPUT

  lint:
    name: Lint Code
    needs: [determine-affected, setup-environment]
    runs-on: ubuntu-latest
    if: ${{ needs.determine-affected.outputs.affected != '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          setup-build-cache: true
          setup-test-cache: true
          cache-key: ${{ needs.setup-environment.outputs.cache-key }}

      - name: Run linting
        run: |
          pnpm turbo run lint --concurrency=3 --cache-dir=.turbo

  type-check:
    name: Type Check
    needs: [determine-affected, setup-environment]
    runs-on: ubuntu-latest
    if: ${{ needs.determine-affected.outputs.affected != '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          setup-build-cache: true
          setup-test-cache: true
          cache-key: ${{ needs.setup-environment.outputs.cache-key }}

      - name: Run type checking
        run: |
          pnpm turbo run type-check --concurrency=3 --cache-dir=.turbo

  test:
    name: Unit Tests
    needs: [determine-affected, setup-environment]
    runs-on: ubuntu-latest
    if: ${{ needs.determine-affected.outputs.affected != '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          setup-build-cache: true
          setup-test-cache: true
          cache-key: ${{ needs.setup-environment.outputs.cache-key }}

      - name: Run unit tests
        run: |
          pnpm turbo run test --concurrency=3 --cache-dir=.turbo

      - name: Run coverage tests
        run: pnpm test:coverage

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/coverage
            **/test-results
          retention-days: 7

  yaml-lint:
    name: Lint YAML
    needs: [determine-affected]
    runs-on: ubuntu-latest
    if: ${{ needs.determine-affected.outputs.yaml-changed == 'true' }}
    # This job can run in parallel with other jobs since it doesn't depend on setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python for YAML linting
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install yamllint
        run: |
          python -m pip install --upgrade pip
          pip install yamllint

      - name: Lint YAML files
        run: |
          echo "Linting YAML files..."
          # Lint all YAML files in the .github directory
          yamllint .github/ || exit 1
          # Lint root YAML files if they exist
          if ls *.yml *.yaml 1> /dev/null 2>&1; then
            yamllint *.yml *.yaml || exit 1
          else
            echo "No root YAML files found, skipping..."
          fi

  build:
    name: Build
    needs: [determine-affected, setup-environment, lint, type-check, test]
    runs-on: ubuntu-latest
    if: ${{ needs.determine-affected.outputs.affected != '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          setup-build-cache: true
          cache-key: ${{ needs.setup-environment.outputs.cache-key }}
        continue-on-error: false

      # Build only workspace packages (no environment variables needed)
      # Apps will be built by Vercel during deployment with proper env vars
      - name: Build packages only
        run: |
          # Try to build with cache first, fallback to clean build if needed
          pnpm turbo run build --filter="@peakhealth/ui" --filter="@peakhealth/auth-types" --filter="@peakhealth/auth-utils" || {
            echo "Build failed, trying clean build..."
            pnpm turbo run build --filter="@peakhealth/ui" --filter="@peakhealth/auth-types" --filter="@peakhealth/auth-utils" --force
          }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/dist
          retention-days: 1

  # Optional: Full build job for testing (uncomment if needed)
  #  build-apps:
  #    name: Build Apps (Optional)
  #    needs: build
  #    runs-on: ubuntu-latest
  #    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
  #    steps:
  #      - name: Checkout repository
  #        uses: actions/checkout@v4
  #
  #      - name: Setup environment
  #        uses: ./.github/actions/setup
  #        with:
  #          setup-build-cache: true
  #
  #      - name: Download package artifacts
  #        uses: actions/download-artifact@v4
  #        with:
  #          name: build-artifacts
  #
  #      # Add environment variables for app builds
  #      - name: Build all apps
  #        env:
  #          # Add your environment variables here
  #          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  #          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  #          # Add other required env vars
  #        run: pnpm turbo run build --filter="@peakhealth/web" --filter="@peakhealth/admin" --filter="@peakhealth/landing"

  e2e-tests:
    name: E2E Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Install Playwright browsers
        run: pnpm --filter @peakhealth/e2e exec playwright install --with-deps

      - name: Setup dev database
        run: pnpm setup-dev-db

      - name: Run E2E tests
        run: |
          cd apps/e2e
          pnpm exec playwright test \
            --reporter=html,line \
            --timeout=120000 \
            --retries=1

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: apps/e2e/playwright-report/
          retention-days: 30

name: Security Scanning

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # Run weekly on main branch
  schedule:
    - cron: '0 0 * * 0'
  # Allow manual triggering
  workflow_dispatch: {}

jobs:
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          deny-licenses: 'AGPL-1.0-only, AGPL-1.0-or-later, AGPL-3.0-only, AGPL-3.0-or-later'
          comment-summary-in-pr: true

  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/workflows/reusable-setup.yml

      # Run npm audit
      - name: Run pnpm audit
        run: pnpm audit --audit-level high
        continue-on-error: true

      # SAST - Static Application Security Testing
      - name: Run Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
            p/nextjs

      # Secret scanning
      - name: Run TruffleHog secret scanner
        uses: trufflesecurity/trufflehog@main
        with:
          path: .
          base: ${{ github.event.pull_request.base.sha || 'HEAD~1' }}
          head: ${{ github.sha }}
          extra_args: --only-verified --fail

      # Infrastructure as Code security scanning
      - name: Run Checkov for IaC security
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,kubernetes,githubactions,cloudformation,arm,dockerfile,helm
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true

      # Container security scanning
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      # Upload security scan results
      - name: Upload Semgrep results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep-results.sarif

      - name: Upload Checkov results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

      # Security summary
      - name: Generate security summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let summary = '## üîí Security Scan Results\n\n';

            // Check if security scan files exist and add to summary
            const scanFiles = [
              { name: 'Semgrep SAST', file: 'semgrep-results.sarif' },
              { name: 'Checkov IaC', file: 'checkov-results.sarif' },
              { name: 'Trivy Container', file: 'trivy-results.sarif' }
            ];

            for (const scan of scanFiles) {
              try {
                if (fs.existsSync(scan.file)) {
                  const data = JSON.parse(fs.readFileSync(scan.file, 'utf8'));
                  const results = data.runs?.[0]?.results || [];
                  const errorCount = results.filter(r => r.level === 'error').length;
                  const warningCount = results.filter(r => r.level === 'warning').length;

                  summary += `### ${scan.name}\n`;
                  summary += `- ‚ùå Errors: ${errorCount}\n`;
                  summary += `- ‚ö†Ô∏è Warnings: ${warningCount}\n`;
                  summary += `- üìä Total Issues: ${results.length}\n\n`;
                }
              } catch (error) {
                summary += `### ${scan.name}\n- ‚ùå Failed to parse results\n\n`;
              }
            }

            await core.summary
              .addRaw(summary)
              .addRaw('Check the Security tab for detailed results.')
              .write();

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Setup environment
        uses: ./.github/workflows/reusable-setup.yml

      - name: Build
        run: pnpm build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{matrix.language}}'

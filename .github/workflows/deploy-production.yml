name: Vercel Production Deployment

on:
  push:
    branches: [main]
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'turbo.json'
      - '.github/workflows/deploy-production.yml'
  # Allow manual triggering
  workflow_dispatch: {}

jobs:
  detect-changes:
    name: Detect Changed Apps
    runs-on: ubuntu-latest
    outputs:
      changed-apps: ${{ steps.changes.outputs.changed-apps }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/workflows/reusable-setup.yml

      - name: Detect changed apps
        id: changes
        run: |
          # Get the base commit for comparison
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
          else
            # For push to main, compare with previous commit
            BASE_SHA=$(git rev-parse HEAD~1)
          fi

          echo "Comparing with base: $BASE_SHA"

          # Use Turborepo to detect which apps have changed
          CHANGED_APPS=$(pnpm turbo run build --filter="...[${BASE_SHA}]" --dry-run=json | jq -r '.tasks | keys | map(select(test("^@peakhealth/(web|admin|auth|landing)$"))) | .[]' | sed 's/@peakhealth\///' | sort -u | tr '\n' ',' | sed 's/,$//')

          # If no apps changed or manual trigger, deploy all apps
          if [[ -z "$CHANGED_APPS" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            CHANGED_APPS="web,admin,auth,landing"
            echo "No specific changes detected or manual trigger - deploying all apps"
          fi

          echo "Changed apps: $CHANGED_APPS"
          echo "changed-apps=$CHANGED_APPS" >> $GITHUB_OUTPUT

  deploy-production:
    name: Deploy ${{ matrix.app }} to Production
    needs: detect-changes
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.changed-apps, matrix.app) || github.event_name == 'workflow_dispatch'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    strategy:
      matrix:
        app: [web, admin, auth, landing]
        include:
          - app: web
            working-directory: apps/web
            project-id-secret: VERCEL_PROJECT_ID_WEB
            sentry-project-secret: SENTRY_PROJECT_WEB
            app-name: Web App
            package-name: '@peakhealth/web'
          - app: admin
            working-directory: apps/admin
            project-id-secret: VERCEL_PROJECT_ID_ADMIN
            sentry-project-secret: SENTRY_PROJECT_ADMIN
            app-name: Admin App
            package-name: '@peakhealth/admin'
          - app: auth
            working-directory: apps/auth
            project-id-secret: VERCEL_PROJECT_ID_AUTH
            sentry-project-secret: SENTRY_PROJECT_AUTH
            app-name: Auth App
            package-name: '@peakhealth/auth'
          - app: landing
            working-directory: apps/landing
            project-id-secret: VERCEL_PROJECT_ID_LANDING
            sentry-project-secret: SENTRY_PROJECT_LANDING
            app-name: Landing App
            package-name: '@peakhealth/landing'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/workflows/reusable-setup.yml
        with:
          setup-build-cache: true

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Change to app directory
        run: cd ${{ matrix.working-directory }}

      - name: Pull Vercel Environment Information
        run: |
          cd ${{ matrix.working-directory }}
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: |
          cd ${{ matrix.working-directory }}
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          cd ${{ matrix.working-directory }}
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30

      - name: Health check deployment
        run: |
          DEPLOYMENT_URL="${{ steps.deploy.outputs.url }}"
          echo "Performing health check on: $DEPLOYMENT_URL"

          # Basic health check - just ensure the deployment responds
          for i in {1..12}; do
            if curl -f -s "$DEPLOYMENT_URL" > /dev/null; then
              echo "‚úÖ Health check passed after ${i} attempts"
              break
            fi

            if [ $i -eq 12 ]; then
              echo "‚ùå Health check failed after 12 attempts"
              exit 1
            fi

            echo "‚è≥ Health check attempt ${i}/12 failed, retrying in 10s..."
            sleep 10
          done

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets[matrix.sentry-project-secret] }}
        with:
          environment: production
          version: ${{ github.sha }}

      - name: Notify deployment success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.url }}';
            const appName = '${{ matrix.app-name }}';
            const environment = 'production';

            console.log(`üöÄ ${appName} deployed successfully to ${environment}!`);
            console.log(`üìç Deployment URL: ${deploymentUrl}`);

            // Add deployment info to the job summary
            await core.summary
              .addHeading(`‚úÖ ${appName} Deployment Successful`)
              .addRaw(`**Environment:** ${environment}`)
              .addRaw(`**URL:** ${deploymentUrl}`)
              .addRaw(`**Commit:** ${context.sha}`)
              .addRaw(`**Deployed by:** ${context.actor}`)
              .write();

      - name: Notify deployment failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const appName = '${{ matrix.app-name }}';
            const environment = 'production';

            console.log(`‚ùå ${appName} deployment to ${environment} failed!`);

            // Add failure info to the job summary
            await core.summary
              .addHeading(`‚ùå ${appName} Deployment Failed`)
              .addRaw(`**Environment:** ${environment}`)
              .addRaw(`**Commit:** ${context.sha}`)
              .addRaw(`**Failed by:** ${context.actor}`)
              .addRaw(`**Check the logs above for details**`)
              .write();

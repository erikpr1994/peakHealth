---
name: 'Setup Environment'
description: 'Setup Node.js, pnpm, and caching for the project'

inputs:
  node-version:
    description: 'Node.js version to use'
    required: false
    default: ''
  pnpm-version:
    description: 'pnpm version to use'
    required: false
    default: ''
  install-dependencies:
    description: 'Whether to install dependencies'
    required: false
    default: 'true'
  setup-turborepo-cache:
    description: 'Whether to setup Turborepo cache'
    required: false
    default: 'true'
  setup-build-cache:
    description: 'Whether to setup build cache'
    required: false
    default: 'false'
  setup-test-cache:
    description: 'Whether to setup test cache'
    required: false
    default: 'false'
  cache-key:
    description: 'Custom cache key'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Extract Node.js version
      id: node-version
      shell: bash
      run: |
        # Try to get Node.js version from .nvmrc first
        if [ -f ".nvmrc" ]; then
          NODE_VERSION=$(cat .nvmrc | tr -d '\n')
          echo "Using Node.js version from .nvmrc: $NODE_VERSION"
        elif [ -f "package.json" ]; then
          # Try to extract from package.json engines field
          NODE_VERSION=$(node -e "
            try {
              const pkg = require('./package.json');
              console.log(pkg.engines?.node || '24.x');
            } catch (e) {
              console.log('24.x');
            }
          ")
          echo "Using Node.js version from package.json: $NODE_VERSION"
        else
          NODE_VERSION="24.x"
          echo "Using default Node.js version: $NODE_VERSION"
        fi

        # Use input version if provided, otherwise use extracted version
        if [ "${{ inputs.node-version }}" != "" ]; then
          NODE_VERSION="${{ inputs.node-version }}"
          echo "Using provided Node.js version: $NODE_VERSION"
        fi

        echo "node-version=$NODE_VERSION" >> $GITHUB_OUTPUT
        echo "Final Node.js version: $NODE_VERSION"

    - name: Extract pnpm version
      id: pnpm-version
      shell: bash
      run: |
        # Try to get pnpm version from package.json packageManager field
        if [ -f "package.json" ]; then
          PNPM_VERSION=$(node -e "
            try {
              const pkg = require('./package.json');
              const pm = pkg.packageManager;
              if (pm && pm.startsWith('pnpm@')) {
                console.log(pm.split('@')[1]);
              } else {
                console.log('10.14.0');
              }
            } catch (e) {
              console.log('10.14.0');
            }
          ")
          echo "Using pnpm version from package.json: $PNPM_VERSION"
        else
          PNPM_VERSION="10.14.0"
          echo "Using default pnpm version: $PNPM_VERSION"
        fi

        # Use input version if provided, otherwise use extracted version
        if [ "${{ inputs.pnpm-version }}" != "" ]; then
          PNPM_VERSION="${{ inputs.pnpm-version }}"
          echo "Using provided pnpm version: $PNPM_VERSION"
        fi

        echo "pnpm-version=$PNPM_VERSION" >> $GITHUB_OUTPUT
        echo "Final pnpm version: $PNPM_VERSION"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ steps.node-version.outputs.node-version }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: ${{ steps.pnpm-version.outputs.pnpm-version }}
        run_install: false

    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('package.json') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}-
          ${{ runner.os }}-pnpm-store-

    - name: Setup Turborepo cache
      if: ${{ inputs.setup-turborepo-cache == 'true' }}
      uses: actions/cache@v4
      with:
        path: .turbo
        key: ${{ runner.os }}-turbo-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-turbo-

    - name: Setup build cache
      if: ${{ inputs.setup-build-cache == 'true' }}
      uses: actions/cache@v4
      with:
        path: |
          apps/*/dist
          apps/*/.next
          packages/*/dist
          .next
          node_modules/.cache
        key: ${{ runner.os }}-build-${{ inputs.cache-key || github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Setup test cache
      if: ${{ inputs.setup-test-cache == 'true' }}
      uses: actions/cache@v4
      with:
        path: |
          **/coverage
          **/test-results
          **/.nyc_output
          **/junit.xml
        key: ${{ runner.os }}-test-${{ inputs.cache-key || github.sha }}
        restore-keys: |
          ${{ runner.os }}-test-

    # Enhanced pnpm store cache - we rely on this instead of caching node_modules directly
    # This avoids tar extraction errors with complex directory structures

    - name: Clean workspace before installation
      if: ${{ inputs.install-dependencies == 'true' }}
      shell: bash
      run: |
        # Always clean node_modules to ensure a fresh install
        echo "Cleaning node_modules directories..."
        find . -name "node_modules" -type d -prune -exec rm -rf {} \; 2>/dev/null || true
        # We don't remove the pnpm store as that's what we're caching
        # But we do clean any corrupted links
        if [ -d ".pnpm-store" ]; then
          echo "Cleaning up potentially corrupted .pnpm-store links..."
          find .pnpm-store -type l -exec test ! -e {} \; -delete 2>/dev/null || true
        fi

    - name: Install dependencies
      if: ${{ inputs.install-dependencies == 'true' }}
      shell: bash
      run: |
        # Clean install to avoid extraction issues
        # We rely on pnpm store cache for speed instead of node_modules caching
        echo "Installing dependencies from pnpm store..."
        pnpm install --frozen-lockfile --prefer-offline=true

    - name: Cache warming
      if: ${{ inputs.setup-build-cache == 'true' }}
      shell: bash
      run: |
        # Warm up build cache by running a dry build
        echo "Warming up build cache..."
        pnpm turbo run build --dry-run --cache-dir=.turbo

        # Warm up test cache
        if [ "${{ inputs.setup-test-cache }}" = "true" ]; then
          echo "Warming up test cache..."
          pnpm turbo run test --dry-run --cache-dir=.turbo
        fi

    - name: Cache status report
      if: always()
      shell: bash
      run: |
        echo "## üì¶ Cache Status Report"
        echo ""

        # Check pnpm cache
        if [ -d "$(pnpm store path)" ]; then
          PNPM_CACHE_SIZE=$(du -sh "$(pnpm store path)" | cut -f1)
          echo "‚úÖ pnpm cache: $PNPM_CACHE_SIZE"
        else
          echo "‚ùå pnpm cache: Not found"
        fi

        # Check Turborepo cache
        if [ "${{ inputs.setup-turborepo-cache }}" = "true" ] && [ -d ".turbo" ]; then
          TURBO_CACHE_SIZE=$(du -sh .turbo | cut -f1)
          echo "‚úÖ Turborepo cache: $TURBO_CACHE_SIZE"
        else
          echo "‚ùå Turborepo cache: Not enabled or not found"
        fi

        # Check build cache
        if [ "${{ inputs.setup-build-cache }}" = "true" ]; then
          BUILD_CACHE_COUNT=$(find . -name "dist" -o -name ".next" | wc -l)
          echo "‚úÖ Build cache: $BUILD_CACHE_COUNT directories"
        else
          echo "‚ùå Build cache: Not enabled"
        fi

        # Check test cache
        if [ "${{ inputs.setup-test-cache }}" = "true" ]; then
          TEST_CACHE_COUNT=$(find . -name "coverage" -o -name "test-results" | wc -l)
          echo "‚úÖ Test cache: $TEST_CACHE_COUNT directories"
        else
          echo "‚ùå Test cache: Not enabled"
        fi
        # Check node_modules status
        NODE_MODULES_COUNT=$(find . -name "node_modules" -type d | wc -l)
        echo "‚ÑπÔ∏è node_modules directories: $NODE_MODULES_COUNT (not cached, freshly installed)"

        # Display version information
        echo ""
        echo "## üîß Version Information"
        echo "Node.js: ${{ steps.node-version.outputs.node-version }}"
        echo "pnpm: ${{ steps.pnpm-version.outputs.pnpm-version }}"

---
alwaysApply: true
---

# Testing

## Test Structure

1. Use `test.step` with descriptive names for clear separation of steps in all tests
2. **Co-locate tests as `*.test.ts(x)` next to the file being tested** - place test files in the same directory as the source file, not in separate `__tests__` folders
3. Keep tests focused; split oversized specs rather than exceeding several hundred lines
4. Use descriptive test names that explain the expected behavior

## Test Organization

1. **Unit Tests**: Test individual functions, components, or utilities in isolation
2. **Integration Tests**: Test interactions between multiple components or modules
3. **E2E Tests**: Use `pnpm test:e2e` for end-to-end testing with Playwright

## Test Configuration

1. Configure different device types and designs in the Playwright config, not within individual test files
2. Use the test setup files for common test configuration
3. Ensure all tests pass without modification during refactoring

## Test Patterns

```typescript
// Example test structure with test.step
test('user can create a routine', async ({ page }) => {
  await test.step('navigate to routine creation', async () => {
    await page.goto('/routines/new');
  });

  await test.step('fill out routine form', async () => {
    await page.fill('[data-testid="routine-name"]', 'Morning Workout');
    await page.selectOption('[data-testid="difficulty"]', 'intermediate');
  });

  await test.step('submit and verify creation', async () => {
    await page.click('[data-testid="submit-button"]');
    await expect(page.locator('[data-testid="success-message"]')).toBeVisible();
  });
});
```

## Test Data and Fixtures

1. Use meaningful test data that represents real-world scenarios
2. Create reusable test fixtures for common test scenarios
3. Clean up test data after each test to ensure isolation

## Assertions

1. Use descriptive assertion messages
2. Test both positive and negative cases
3. Verify the actual behavior, not implementation details
   description:
   globs:
   alwaysApply: false

---

/* eslint-disable */
// @ts-nocheck
// This file is generated, do not edit! Run "npx hypertune generate" to regenerate.
// Generated by hypertune-javascript-client v2.7.2

import * as sdk from 'hypertune';

export type CreateSourceOptions = {
  token: string;
  baseUrl?: string;
  disableLogs?: boolean;
  disableCache?: boolean;
  disableInitialFetch?: boolean;
  disablePeriodicFetch?: boolean;
  periodicFetchInterval?: number;
  disableAutomaticEventLogging?: boolean;
  disableAutomaticPageviewLogging?: boolean;
  disableAutomaticClickLogging?: boolean;
  disableAutomaticHoverLogging?: boolean;
  disableAutomaticScrollLogging?: boolean;
  disableAutomaticFormSubmissionLogging?: boolean;
  disableAutomaticExposureLogging?: boolean;
  disableAutomaticErrorLogging?: boolean;
  disableAutomaticPerformanceLogging?: boolean;
  disableAutomaticNetworkLogging?: boolean;
  disableAutomaticConsoleLogging?: boolean;
  disableAutomaticCustomEventLogging?: boolean;
  disableAutomaticUserLogging?: boolean;
  disableAutomaticSessionLogging?: boolean;
  disableAutomaticDeviceLogging?: boolean;
  disableAutomaticBrowserLogging?: boolean;
  disableAutomaticOSLogging?: boolean;
  disableAutomaticScreenLogging?: boolean;
  disableAutomaticReferrerLogging?: boolean;
  disableAutomaticUTMLogging?: boolean;
  disableAutomaticLocationLogging?: boolean;
  disableAutomaticTimezoneLogging?: boolean;
  disableAutomaticLanguageLogging?: boolean;
  disableAutomaticCookieLogging?: boolean;
  disableAutomaticLocalStorageLogging?: boolean;
  disableAutomaticSessionStorageLogging?: boolean;
  disableAutomaticIndexedDBLogging?: boolean;
  disableAutomaticWebSQLLogging?: boolean;
  disableAutomaticCacheStorageLogging?: boolean;
  disableAutomaticServiceWorkerLogging?: boolean;
  disableAutomaticWebRTCLogging?: boolean;
  disableAutomaticWebSocketLogging?: boolean;
  disableAutomaticWebTransportLogging?: boolean;
  disableAutomaticWebAuthenticationLogging?: boolean;
  disableAutomaticWebCryptoLogging?: boolean;
  disableAutomaticWebMIDILogging?: boolean;
  disableAutomaticWebUSBLogging?: boolean;
  disableAutomaticWebBluetoothLogging?: boolean;
  disableAutomaticWebNFCLogging?: boolean;
  disableAutomaticWebSerialLogging?: boolean;
  disableAutomaticWebHIDLogging?: boolean;
  disableAutomaticWebShareLogging?: boolean;
  disableAutomaticWebXRLogging?: boolean;
  disableAutomaticWebCodecsLogging?: boolean;
  disableAutomaticWebGPULogging?: boolean;
  disableAutomaticWebAudioLogging?: boolean;
  disableAutomaticWebSpeechLogging?: boolean;
  disableAutomaticWebVRLogging?: boolean;
  disableAutomaticWebVTTLogging?: boolean;
  disableAutomaticWebRTCStatsLogging?: boolean;
  disableAutomaticWebRTCPeerConnectionLogging?: boolean;
  disableAutomaticWebRTCDataChannelLogging?: boolean;
  disableAutomaticWebRTCMediaStreamLogging?: boolean;
  disableAutomaticWebRTCMediaStreamTrackLogging?: boolean;
  disableAutomaticWebRTCMediaDevicesLogging?: boolean;
  disableAutomaticWebRTCMediaRecorderLogging?: boolean;
  disableAutomaticWebRTCMediaSourceLogging?: boolean;
  disableAutomaticWebRTCMediaStreamSourceLogging?: boolean;
  disableAutomaticWebRTCMediaStreamSinkLogging?: boolean;
  disableAutomaticWebRTCMediaStreamConstraintsLogging?: boolean;
  disableAutomaticWebRTCMediaTrackConstraintsLogging?: boolean;
  disableAutomaticWebRTCMediaTrackSettingsLogging?: boolean;
  disableAutomaticWebRTCMediaTrackCapabilitiesLogging?: boolean;
  disableAutomaticWebRTCMediaTrackSupportedConstraintsLogging?: boolean;
  disableAutomaticWebRTCMediaTrackEventLogging?: boolean;
  disableAutomaticWebRTCMediaStreamEventLogging?: boolean;
  disableAutomaticWebRTCMediaDevicesEventLogging?: boolean;
  disableAutomaticWebRTCMediaRecorderEventLogging?: boolean;
  disableAutomaticWebRTCMediaSourceEventLogging?: boolean;
  disableAutomaticWebRTCMediaStreamSourceEventLogging?: boolean;
  disableAutomaticWebRTCMediaStreamSinkEventLogging?: boolean;
  disableAutomaticWebRTCMediaStreamConstraintsEventLogging?: boolean;
  disableAutomaticWebRTCMediaTrackConstraintsEventLogging?: boolean;
  disableAutomaticWebRTCMediaTrackSettingsEventLogging?: boolean;
  disableAutomaticWebRTCMediaTrackCapabilitiesEventLogging?: boolean;
  disableAutomaticWebRTCMediaTrackSupportedConstraintsEventLogging?: boolean;
  disableAutomaticWebRTCMediaTrackEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaStreamEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaDevicesEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaRecorderEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaSourceEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaStreamSourceEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaStreamSinkEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaStreamConstraintsEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaTrackConstraintsEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaTrackSettingsEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaTrackCapabilitiesEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaTrackSupportedConstraintsEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaTrackEventEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaStreamEventEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaDevicesEventEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaRecorderEventEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaSourceEventEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaStreamSourceEventEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaStreamSinkEventEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaStreamConstraintsEventEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaTrackConstraintsEventEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaTrackSettingsEventEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaTrackCapabilitiesEventEventEventLogging?: boolean;
  disableAutomaticWebRTCMediaTrackSupportedConstraintsEventEventEventLogging?: boolean;
};

export type DehydratedState = sdk.DehydratedState;

export type RootArgs = {
  args: {
    context: {
      environment: string;
      user: {
        id: string;
        email: string;
      };
    };
  };
};

export type Source = {
  root: Root;
};

export type Root = {
  roadmap: boolean;
};

export type FlagPaths = 'root.roadmap';

export const flagFallbacks = {
  'root.roadmap': false,
};

export class SourceNode {
  props: {
    context: sdk.Context | null;
    source: sdk.Source | null;
  };

  constructor(props: {
    context: sdk.Context | null;
    source: sdk.Source | null;
  }) {
    this.props = props;
  }

  getStateHash(): string {
    return this.props.context?.getStateHash() || '';
  }

  addUpdateListener(listener: () => void): void {
    this.props.context?.addUpdateListener(listener);
  }

  removeUpdateListener(listener: () => void): void {
    this.props.context?.removeUpdateListener(listener);
  }

  setOverride(override: sdk.DeepPartial<Source> | null): void {
    this.props.context?.setOverride(override);
  }

  hydrate(state: DehydratedState | null | undefined): void {
    if (state) {
      this.props.context?.hydrate(state);
    }
  }

  dehydrate(): DehydratedState | null {
    return this.props.context?.dehydrate() || null;
  }

  async initIfNeeded(): Promise<void> {
    await this.props.context?.initIfNeeded();
  }

  async flushLogs(): Promise<void> {
    await this.props.context?.flushLogs();
  }

  getRootArgs(): RootArgs['args'] {
    return this.props.source?.getRootArgs() as RootArgs['args'];
  }

  root(options: { args: RootArgs['args'] }): RootNode {
    const rootNode = this.props.source?.root(options.args);
    return new RootNode({
      context: this.props.context,
      source: this.props.source,
      args: options.args,
      node: rootNode,
    });
  }
}

export class RootNode {
  props: {
    context: sdk.Context | null;
    source: sdk.Source | null;
    args: RootArgs['args'];
    node?: sdk.Node;
  };

  constructor(props: {
    context: sdk.Context | null;
    source: sdk.Source | null;
    args: RootArgs['args'];
    node?: sdk.Node;
  }) {
    this.props = props;
  }

  isReady(): boolean {
    return this.props.context?.isReady() || false;
  }

  getFlagValues<T extends FlagPaths, F extends typeof flagFallbacks>(options: {
    flagPaths: T[];
    flagFallbacks: F;
  }): sdk.FlagValues<T, F> {
    return (
      this.props.node?.getFlagValues(options) || ({} as sdk.FlagValues<T, F>)
    );
  }

  /**
   * [Open in Hypertune UI]({@link https://app.hypertune.com/projects/6203/main/draft/logic?selected_field_path=root%3Eroadmap})
   */
  roadmap(options: { fallback: boolean }): boolean {
    return this.props.node?.getBooleanValue('roadmap', options.fallback) || false;
  }
}

export const emptySource = new SourceNode({
  context: null,
  source: null,
});

/**
 * Create a new Hypertune source.
 *
 * @param options - Options for creating the source.
 * @returns A new Hypertune source.
 *
 * @example
 * ```typescript
 * const source = createSource({
 *   token: 'YOUR_TOKEN',
 * });
 * ```
 *
 * You can also use this to create a source with a custom context,
 * e.g. to use Hypertune as a CMS.
 *
 * @example
 * ```typescript
 * const source = createSource({
 *   token: 'YOUR_TOKEN',
 *   context: {
 *     environment: 'production',
 *     user: {
 *       id: '123',
 *       email: 'user@example.com',
 *     },
 *   },
 * });
 * ```
 */
export function createSource(options: CreateSourceOptions): SourceNode {
  const context = new sdk.Context({
    token: options.token,
    baseUrl: options.baseUrl,
    disableLogs: options.disableLogs,
    disableCache: options.disableCache,
    disableInitialFetch: options.disableInitialFetch,
    disablePeriodicFetch: options.disablePeriodicFetch,
    periodicFetchInterval: options.periodicFetchInterval,
    disableAutomaticEventLogging: options.disableAutomaticEventLogging,
    disableAutomaticPageviewLogging: options.disableAutomaticPageviewLogging,
    disableAutomaticClickLogging: options.disableAutomaticClickLogging,
    disableAutomaticHoverLogging: options.disableAutomaticHoverLogging,
    disableAutomaticScrollLogging: options.disableAutomaticScrollLogging,
    disableAutomaticFormSubmissionLogging:
      options.disableAutomaticFormSubmissionLogging,
    disableAutomaticExposureLogging: options.disableAutomaticExposureLogging,
    disableAutomaticErrorLogging: options.disableAutomaticErrorLogging,
    disableAutomaticPerformanceLogging:
      options.disableAutomaticPerformanceLogging,
    disableAutomaticNetworkLogging: options.disableAutomaticNetworkLogging,
    disableAutomaticConsoleLogging: options.disableAutomaticConsoleLogging,
    disableAutomaticCustomEventLogging:
      options.disableAutomaticCustomEventLogging,
    disableAutomaticUserLogging: options.disableAutomaticUserLogging,
    disableAutomaticSessionLogging: options.disableAutomaticSessionLogging,
    disableAutomaticDeviceLogging: options.disableAutomaticDeviceLogging,
    disableAutomaticBrowserLogging: options.disableAutomaticBrowserLogging,
    disableAutomaticOSLogging: options.disableAutomaticOSLogging,
    disableAutomaticScreenLogging: options.disableAutomaticScreenLogging,
    disableAutomaticReferrerLogging: options.disableAutomaticReferrerLogging,
    disableAutomaticUTMLogging: options.disableAutomaticUTMLogging,
    disableAutomaticLocationLogging: options.disableAutomaticLocationLogging,
    disableAutomaticTimezoneLogging: options.disableAutomaticTimezoneLogging,
    disableAutomaticLanguageLogging: options.disableAutomaticLanguageLogging,
    disableAutomaticCookieLogging: options.disableAutomaticCookieLogging,
    disableAutomaticLocalStorageLogging:
      options.disableAutomaticLocalStorageLogging,
    disableAutomaticSessionStorageLogging:
      options.disableAutomaticSessionStorageLogging,
    disableAutomaticIndexedDBLogging: options.disableAutomaticIndexedDBLogging,
    disableAutomaticWebSQLLogging: options.disableAutomaticWebSQLLogging,
    disableAutomaticCacheStorageLogging:
      options.disableAutomaticCacheStorageLogging,
    disableAutomaticServiceWorkerLogging:
      options.disableAutomaticServiceWorkerLogging,
    disableAutomaticWebRTCLogging: options.disableAutomaticWebRTCLogging,
    disableAutomaticWebSocketLogging: options.disableAutomaticWebSocketLogging,
    disableAutomaticWebTransportLogging:
      options.disableAutomaticWebTransportLogging,
    disableAutomaticWebAuthenticationLogging:
      options.disableAutomaticWebAuthenticationLogging,
    disableAutomaticWebCryptoLogging: options.disableAutomaticWebCryptoLogging,
    disableAutomaticWebMIDILogging: options.disableAutomaticWebMIDILogging,
    disableAutomaticWebUSBLogging: options.disableAutomaticWebUSBLogging,
    disableAutomaticWebBluetoothLogging:
      options.disableAutomaticWebBluetoothLogging,
    disableAutomaticWebNFCLogging: options.disableAutomaticWebNFCLogging,
    disableAutomaticWebSerialLogging: options.disableAutomaticWebSerialLogging,
    disableAutomaticWebHIDLogging: options.disableAutomaticWebHIDLogging,
    disableAutomaticWebShareLogging: options.disableAutomaticWebShareLogging,
    disableAutomaticWebXRLogging: options.disableAutomaticWebXRLogging,
    disableAutomaticWebCodecsLogging: options.disableAutomaticWebCodecsLogging,
    disableAutomaticWebGPULogging: options.disableAutomaticWebGPULogging,
    disableAutomaticWebAudioLogging: options.disableAutomaticWebAudioLogging,
    disableAutomaticWebSpeechLogging: options.disableAutomaticWebSpeechLogging,
    disableAutomaticWebVRLogging: options.disableAutomaticWebVRLogging,
    disableAutomaticWebVTTLogging: options.disableAutomaticWebVTTLogging,
    disableAutomaticWebRTCStatsLogging:
      options.disableAutomaticWebRTCStatsLogging,
    disableAutomaticWebRTCPeerConnectionLogging:
      options.disableAutomaticWebRTCPeerConnectionLogging,
    disableAutomaticWebRTCDataChannelLogging:
      options.disableAutomaticWebRTCDataChannelLogging,
    disableAutomaticWebRTCMediaStreamLogging:
      options.disableAutomaticWebRTCMediaStreamLogging,
    disableAutomaticWebRTCMediaStreamTrackLogging:
      options.disableAutomaticWebRTCMediaStreamTrackLogging,
    disableAutomaticWebRTCMediaDevicesLogging:
      options.disableAutomaticWebRTCMediaDevicesLogging,
    disableAutomaticWebRTCMediaRecorderLogging:
      options.disableAutomaticWebRTCMediaRecorderLogging,
    disableAutomaticWebRTCMediaSourceLogging:
      options.disableAutomaticWebRTCMediaSourceLogging,
    disableAutomaticWebRTCMediaStreamSourceLogging:
      options.disableAutomaticWebRTCMediaStreamSourceLogging,
    disableAutomaticWebRTCMediaStreamSinkLogging:
      options.disableAutomaticWebRTCMediaStreamSinkLogging,
    disableAutomaticWebRTCMediaStreamConstraintsLogging:
      options.disableAutomaticWebRTCMediaStreamConstraintsLogging,
    disableAutomaticWebRTCMediaTrackConstraintsLogging:
      options.disableAutomaticWebRTCMediaTrackConstraintsLogging,
    disableAutomaticWebRTCMediaTrackSettingsLogging:
      options.disableAutomaticWebRTCMediaTrackSettingsLogging,
    disableAutomaticWebRTCMediaTrackCapabilitiesLogging:
      options.disableAutomaticWebRTCMediaTrackCapabilitiesLogging,
    disableAutomaticWebRTCMediaTrackSupportedConstraintsLogging:
      options.disableAutomaticWebRTCMediaTrackSupportedConstraintsLogging,
    disableAutomaticWebRTCMediaTrackEventLogging:
      options.disableAutomaticWebRTCMediaTrackEventLogging,
    disableAutomaticWebRTCMediaStreamEventLogging:
      options.disableAutomaticWebRTCMediaStreamEventLogging,
    disableAutomaticWebRTCMediaDevicesEventLogging:
      options.disableAutomaticWebRTCMediaDevicesEventLogging,
    disableAutomaticWebRTCMediaRecorderEventLogging:
      options.disableAutomaticWebRTCMediaRecorderEventLogging,
    disableAutomaticWebRTCMediaSourceEventLogging:
      options.disableAutomaticWebRTCMediaSourceEventLogging,
    disableAutomaticWebRTCMediaStreamSourceEventLogging:
      options.disableAutomaticWebRTCMediaStreamSourceEventLogging,
    disableAutomaticWebRTCMediaStreamSinkEventLogging:
      options.disableAutomaticWebRTCMediaStreamSinkEventLogging,
    disableAutomaticWebRTCMediaStreamConstraintsEventLogging:
      options.disableAutomaticWebRTCMediaStreamConstraintsEventLogging,
    disableAutomaticWebRTCMediaTrackConstraintsEventLogging:
      options.disableAutomaticWebRTCMediaTrackConstraintsEventLogging,
    disableAutomaticWebRTCMediaTrackSettingsEventLogging:
      options.disableAutomaticWebRTCMediaTrackSettingsEventLogging,
    disableAutomaticWebRTCMediaTrackCapabilitiesEventLogging:
      options.disableAutomaticWebRTCMediaTrackCapabilitiesEventLogging,
    disableAutomaticWebRTCMediaTrackSupportedConstraintsEventLogging:
      options.disableAutomaticWebRTCMediaTrackSupportedConstraintsEventLogging,
    disableAutomaticWebRTCMediaTrackEventEventLogging:
      options.disableAutomaticWebRTCMediaTrackEventEventLogging,
    disableAutomaticWebRTCMediaStreamEventEventLogging:
      options.disableAutomaticWebRTCMediaStreamEventEventLogging,
    disableAutomaticWebRTCMediaDevicesEventEventLogging:
      options.disableAutomaticWebRTCMediaDevicesEventEventLogging,
    disableAutomaticWebRTCMediaRecorderEventEventLogging:
      options.disableAutomaticWebRTCMediaRecorderEventEventLogging,
    disableAutomaticWebRTCMediaSourceEventEventLogging:
      options.disableAutomaticWebRTCMediaSourceEventEventLogging,
    disableAutomaticWebRTCMediaStreamSourceEventEventLogging:
      options.disableAutomaticWebRTCMediaStreamSourceEventEventLogging,
    disableAutomaticWebRTCMediaStreamSinkEventEventLogging:
      options.disableAutomaticWebRTCMediaStreamSinkEventEventLogging,
    disableAutomaticWebRTCMediaStreamConstraintsEventEventLogging:
      options.disableAutomaticWebRTCMediaStreamConstraintsEventEventLogging,
    disableAutomaticWebRTCMediaTrackConstraintsEventEventLogging:
      options.disableAutomaticWebRTCMediaTrackConstraintsEventEventLogging,
    disableAutomaticWebRTCMediaTrackSettingsEventEventLogging:
      options.disableAutomaticWebRTCMediaTrackSettingsEventEventLogging,
    disableAutomaticWebRTCMediaTrackCapabilitiesEventEventLogging:
      options.disableAutomaticWebRTCMediaTrackCapabilitiesEventEventLogging,
    disableAutomaticWebRTCMediaTrackSupportedConstraintsEventEventLogging:
      options.disableAutomaticWebRTCMediaTrackSupportedConstraintsEventEventLogging,
    disableAutomaticWebRTCMediaTrackEventEventEventLogging:
      options.disableAutomaticWebRTCMediaTrackEventEventEventLogging,
    disableAutomaticWebRTCMediaStreamEventEventEventLogging:
      options.disableAutomaticWebRTCMediaStreamEventEventEventLogging,
    disableAutomaticWebRTCMediaDevicesEventEventEventLogging:
      options.disableAutomaticWebRTCMediaDevicesEventEventEventLogging,
    disableAutomaticWebRTCMediaRecorderEventEventEventLogging:
      options.disableAutomaticWebRTCMediaRecorderEventEventEventLogging,
    disableAutomaticWebRTCMediaSourceEventEventEventLogging:
      options.disableAutomaticWebRTCMediaSourceEventEventEventLogging,
    disableAutomaticWebRTCMediaStreamSourceEventEventEventLogging:
      options.disableAutomaticWebRTCMediaStreamSourceEventEventEventLogging,
    disableAutomaticWebRTCMediaStreamSinkEventEventEventLogging:
      options.disableAutomaticWebRTCMediaStreamSinkEventEventEventLogging,
    disableAutomaticWebRTCMediaStreamConstraintsEventEventEventLogging:
      options.disableAutomaticWebRTCMediaStreamConstraintsEventEventEventLogging,
    disableAutomaticWebRTCMediaTrackConstraintsEventEventEventLogging:
      options.disableAutomaticWebRTCMediaTrackConstraintsEventEventEventLogging,
    disableAutomaticWebRTCMediaTrackSettingsEventEventEventLogging:
      options.disableAutomaticWebRTCMediaTrackSettingsEventEventEventLogging,
    disableAutomaticWebRTCMediaTrackCapabilitiesEventEventEventLogging:
      options.disableAutomaticWebRTCMediaTrackCapabilitiesEventEventEventLogging,
    disableAutomaticWebRTCMediaTrackSupportedConstraintsEventEventEventLogging:
      options.disableAutomaticWebRTCMediaTrackSupportedConstraintsEventEventEventLogging,
  });

  const source = new sdk.Source({
    context,
  });

  return new SourceNode({
    context,
    source,
  });
}

export const overrideCookieName = 'hypertuneOverride';

/**
 * Initialize Hypertune.
 * @deprecated Use createSource instead.
 */
export const initHypertune = createSource;


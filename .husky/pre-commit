#!/usr/bin/env sh

echo "üîç Running lint-staged..."
pnpm lint-staged
LINT_STAGED_EXIT_CODE=$?

if [ $LINT_STAGED_EXIT_CODE -ne 0 ]; then
  echo "‚ùå Lint-staged failed"
  exit $LINT_STAGED_EXIT_CODE
fi

# Get list of changed files
echo "üìã Analyzing changed projects..."
CHANGED_FILES=$(git diff --cached --name-only)

# Function to get all workspace packages
get_workspace_packages() {
  find apps packages -name "package.json" -type f 2>/dev/null | sed 's|/package.json||' | grep -v "/\.next"
}

# Function to check if a project has changes
has_project_changes() {
  local project_path=$1
  echo "$CHANGED_FILES" | grep -q "^$project_path/"
}

# Function to check if a project has a specific script
has_script() {
  local project_path=$1
  local script_name=$2
  if [ -f "$project_path/package.json" ]; then
    # Use grep to check if the script exists in package.json
    # This avoids the dependency on jq
    grep -q "\"$script_name\":" "$project_path/package.json" 2>/dev/null
  else
    return 1
  fi
}

# Get all workspace packages
WORKSPACE_PACKAGES=$(get_workspace_packages)
CHANGED_PROJECTS=""

echo "üîç Detecting workspace packages:"
while read -r package; do
  if [ -n "$package" ]; then
    if has_project_changes "$package"; then
      CHANGED_PROJECTS="$CHANGED_PROJECTS $package"
    fi
  fi
done <<< "$WORKSPACE_PACKAGES"

# Define the build matrix - tasks to run for each project
BUILD_MATRIX=(
  "build:üèóÔ∏è Building"
  "type-check:üîç Type checking"
  "test:üß™ Running unit tests"
)

# Function to run a specific task for changed projects
run_task() {
  local task=$1
  local task_name=$2
  
  if [ -n "$CHANGED_PROJECTS" ]; then
    echo "$task_name changed projects..."
    local filters=""
    for project in $CHANGED_PROJECTS; do
      if has_script "$project" "$task"; then
        filters="$filters --filter=./$project"
      fi
    done
    
    if [ -n "$filters" ]; then
      if [ "$task" = "test" ]; then
        pnpm test:unit $filters
      else
        pnpm $task $filters
      fi
      local exit_code=$?
      
      if [ $exit_code -ne 0 ]; then
        echo "‚ùå $task_name failed"
        exit $exit_code
      fi
    fi
  fi
}

# Execute the build matrix
for matrix_item in "${BUILD_MATRIX[@]}"; do
  IFS=':' read -r task task_name <<< "$matrix_item"
  run_task "$task" "$task_name"
done

echo "‚úÖ Pre-commit checks passed!"

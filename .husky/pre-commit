#!/usr/bin/env sh

echo "üîç Running lint-staged..."
pnpm lint-staged
LINT_STAGED_EXIT_CODE=$?

if [ $LINT_STAGED_EXIT_CODE -ne 0 ]; then
  echo "‚ùå Lint-staged failed"
  exit $LINT_STAGED_EXIT_CODE
fi

# Get list of changed files and determine which projects have changes
echo "üìã Analyzing changed projects..."
CHANGED_FILES=$(git diff --cached --name-only)

# Function to check if a project has changes
has_project_changes() {
  local project_path=$1
  echo "$CHANGED_FILES" | grep -q "^$project_path/"
}

# Run build only for projects with changes
if has_project_changes "apps/web" || has_project_changes "apps/admin"; then
  echo "üèóÔ∏è Building changed projects..."
  pnpm build --filter=./apps/web --filter=./apps/admin
  BUILD_EXIT_CODE=$?

  if [ $BUILD_EXIT_CODE -ne 0 ]; then
    echo "‚ùå Build failed"
    exit $BUILD_EXIT_CODE
  fi
fi

# Run type checking only if there are TypeScript changes
if echo "$CHANGED_FILES" | grep -q "\.ts$" || echo "$CHANGED_FILES" | grep -q "\.tsx$"; then
  echo "üîç Type checking changed TypeScript files..."
  pnpm type-check --filter=./apps/web --filter=./apps/admin
  TYPE_CHECK_EXIT_CODE=$?

  if [ $TYPE_CHECK_EXIT_CODE -ne 0 ]; then
    echo "‚ùå Type check failed"
    exit $TYPE_CHECK_EXIT_CODE
  fi
fi

# Run tests only if there are changes in test-related files
if echo "$CHANGED_FILES" | grep -q "\.test\." || echo "$CHANGED_FILES" | grep -q "\.spec\." || echo "$CHANGED_FILES" | grep -q "src/"; then
  echo "üß™ Running unit tests..."
  pnpm test:unit
  TEST_EXIT_CODE=$?

  if [ $TEST_EXIT_CODE -ne 0 ]; then
    echo "‚ùå Tests failed"
    exit $TEST_EXIT_CODE
  fi
fi

echo "‚úÖ Pre-commit checks passed!"
